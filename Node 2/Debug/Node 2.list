
Node 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b58  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005c68  08005c68  00006c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d94  08005d94  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d94  08005d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a38  20000010  08005dac  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  08005dac  00007a48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c78  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc1  00000000  00000000  00019cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c39  00000000  00000000  0001da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003146  00000000  00000000  0001e691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012674  00000000  00000000  000217d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b8f  00000000  00000000  00033e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c69da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  000c6a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000cab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c50 	.word	0x08005c50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005c50 	.word	0x08005c50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* Initialize the hardware and system clock */
  HAL_Init();
 8000164:	f000 fb96 	bl	8000894 <HAL_Init>
  SystemClock_Config();
 8000168:	f000 f842 	bl	80001f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f902 	bl	8000374 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f88e 	bl	8000290 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f930 	bl	80003d8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000178:	f000 f8c8 	bl	800030c <MX_CAN_Init>

  /* Initialize the RTOS kernel */
  osKernelInitialize();
 800017c:	f002 fbfe 	bl	800297c <osKernelInitialize>

  /* Create the thread(s) */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8000180:	4a10      	ldr	r2, [pc, #64]	@ (80001c4 <main+0x64>)
 8000182:	2100      	movs	r1, #0
 8000184:	4810      	ldr	r0, [pc, #64]	@ (80001c8 <main+0x68>)
 8000186:	f002 fc5f 	bl	8002a48 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0f      	ldr	r2, [pc, #60]	@ (80001cc <main+0x6c>)
 800018e:	6013      	str	r3, [r2, #0]
  wateringTaskHandle = osThreadNew(StartWateringTask, NULL, &wateringTask_attributes);
 8000190:	4a0f      	ldr	r2, [pc, #60]	@ (80001d0 <main+0x70>)
 8000192:	2100      	movs	r1, #0
 8000194:	480f      	ldr	r0, [pc, #60]	@ (80001d4 <main+0x74>)
 8000196:	f002 fc57 	bl	8002a48 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0e      	ldr	r2, [pc, #56]	@ (80001d8 <main+0x78>)
 800019e:	6013      	str	r3, [r2, #0]
  canTaskHandle = osThreadNew(StartCanTask, NULL, &canTask_attributes);
 80001a0:	4a0e      	ldr	r2, [pc, #56]	@ (80001dc <main+0x7c>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	480e      	ldr	r0, [pc, #56]	@ (80001e0 <main+0x80>)
 80001a6:	f002 fc4f 	bl	8002a48 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <main+0x84>)
 80001ae:	6013      	str	r3, [r2, #0]
  moistureMutex1Handle = osMutexNew(&moistureMutex1_attributes);
 80001b0:	480d      	ldr	r0, [pc, #52]	@ (80001e8 <main+0x88>)
 80001b2:	f002 fcf3 	bl	8002b9c <osMutexNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0c      	ldr	r2, [pc, #48]	@ (80001ec <main+0x8c>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80001bc:	f002 fc10 	bl	80029e0 <osKernelStart>

  /* Infinite loop to keep the main function alive */
  while (1)
 80001c0:	bf00      	nop
 80001c2:	e7fd      	b.n	80001c0 <main+0x60>
 80001c4:	08005cd0 	.word	0x08005cd0
 80001c8:	0800042d 	.word	0x0800042d
 80001cc:	200000ec 	.word	0x200000ec
 80001d0:	08005cf4 	.word	0x08005cf4
 80001d4:	080004c9 	.word	0x080004c9
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08005d18 	.word	0x08005d18
 80001e0:	08000521 	.word	0x08000521
 80001e4:	200000f4 	.word	0x200000f4
 80001e8:	08005d3c 	.word	0x08005d3c
 80001ec:	200000f8 	.word	0x200000f8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	@ 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f005 fcec 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /* Configure the main internal regulator output voltage */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fc55 	bl	8001ae4 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000240:	f000 f9ae 	bl	80005a0 <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000244:	230f      	movs	r3, #15
 8000246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fec2 	bl	8001fe8 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800026a:	f000 f999 	bl	80005a0 <Error_Handler>
  }

  /* Configure the ADC peripheral clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800026e:	2302      	movs	r3, #2
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f002 f843 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000284:	f000 f98c 	bl	80005a0 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3750      	adds	r7, #80	@ 0x50
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]

  /* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 80002a0:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002a2:	4a19      	ldr	r2, [pc, #100]	@ (8000308 <MX_ADC1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fb67 	bl	80009a0 <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f962 	bl	80005a0 <Error_Handler>
  }

  /* Configure for the selected ADC regular channel to be converted */
  sConfig.Channel = ADC_CHANNEL_0;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fe1b 	bl	8000f28 <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f8:	f000 f952 	bl	80005a0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000002c 	.word	0x2000002c
 8000308:	40012400 	.word	0x40012400

0800030c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000310:	4b16      	ldr	r3, [pc, #88]	@ (800036c <MX_CAN_Init+0x60>)
 8000312:	4a17      	ldr	r2, [pc, #92]	@ (8000370 <MX_CAN_Init+0x64>)
 8000314:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000316:	4b15      	ldr	r3, [pc, #84]	@ (800036c <MX_CAN_Init+0x60>)
 8000318:	2210      	movs	r2, #16
 800031a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800031c:	4b13      	ldr	r3, [pc, #76]	@ (800036c <MX_CAN_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000322:	4b12      	ldr	r3, [pc, #72]	@ (800036c <MX_CAN_Init+0x60>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000328:	4b10      	ldr	r3, [pc, #64]	@ (800036c <MX_CAN_Init+0x60>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <MX_CAN_Init+0x60>)
 8000330:	2200      	movs	r2, #0
 8000332:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <MX_CAN_Init+0x60>)
 8000336:	2200      	movs	r2, #0
 8000338:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <MX_CAN_Init+0x60>)
 800033c:	2200      	movs	r2, #0
 800033e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000340:	4b0a      	ldr	r3, [pc, #40]	@ (800036c <MX_CAN_Init+0x60>)
 8000342:	2200      	movs	r2, #0
 8000344:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <MX_CAN_Init+0x60>)
 8000348:	2200      	movs	r2, #0
 800034a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <MX_CAN_Init+0x60>)
 800034e:	2200      	movs	r2, #0
 8000350:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000352:	4b06      	ldr	r3, [pc, #24]	@ (800036c <MX_CAN_Init+0x60>)
 8000354:	2200      	movs	r2, #0
 8000356:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000358:	4804      	ldr	r0, [pc, #16]	@ (800036c <MX_CAN_Init+0x60>)
 800035a:	f000 ff78 	bl	800124e <HAL_CAN_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000364:	f000 f91c 	bl	80005a0 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000a4 	.word	0x200000a4
 8000370:	40006400 	.word	0x40006400

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_GPIO_Init+0x5c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a10      	ldr	r2, [pc, #64]	@ (80003d0 <MX_GPIO_Init+0x5c>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_GPIO_Init+0x5c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2102      	movs	r1, #2
 80003a4:	480b      	ldr	r0, [pc, #44]	@ (80003d4 <MX_GPIO_Init+0x60>)
 80003a6:	f001 fb85 	bl	8001ab4 <HAL_GPIO_WritePin>

  /* Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003aa:	2302      	movs	r3, #2
 80003ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <MX_GPIO_Init+0x60>)
 80003c2:	f001 f9f3 	bl	80017ac <HAL_GPIO_Init>
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010800 	.word	0x40010800

080003d8 <MX_USART1_UART_Init>:
  * @brief USART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	@ (8000428 <MX_USART1_UART_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 80003e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <MX_USART1_UART_Init+0x4c>)
 8000410:	f002 f8e4 	bl	80025dc <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041a:	f000 f8c1 	bl	80005a0 <Error_Handler>
  }

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000005c 	.word	0x2000005c
 8000428:	40013800 	.word	0x40013800

0800042c <StartSensorTask>:
  * @brief  Function implementing the sensorTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartSensorTask(void *argument)
{
 800042c:	b5b0      	push	{r4, r5, r7, lr}
 800042e:	b08a      	sub	sp, #40	@ 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Start the ADC conversion */
    HAL_ADC_Start(&hadc1);
 8000434:	481f      	ldr	r0, [pc, #124]	@ (80004b4 <StartSensorTask+0x88>)
 8000436:	f000 fb8b 	bl	8000b50 <HAL_ADC_Start>
    /* Poll for ADC conversion completion */
    if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800043a:	f04f 31ff 	mov.w	r1, #4294967295
 800043e:	481d      	ldr	r0, [pc, #116]	@ (80004b4 <StartSensorTask+0x88>)
 8000440:	f000 fc60 	bl	8000d04 <HAL_ADC_PollForConversion>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d113      	bne.n	8000472 <StartSensorTask+0x46>
    	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 800044a:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <StartSensorTask+0x8c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 31ff 	mov.w	r1, #4294967295
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fc3c 	bl	8002cd0 <osMutexAcquire>
		/* Get the ADC converted value */
		moistureLevel = HAL_ADC_GetValue(&hadc1);
 8000458:	4816      	ldr	r0, [pc, #88]	@ (80004b4 <StartSensorTask+0x88>)
 800045a:	f000 fd59 	bl	8000f10 <HAL_ADC_GetValue>
 800045e:	4603      	mov	r3, r0
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <StartSensorTask+0x90>)
 8000464:	801a      	strh	r2, [r3, #0]
		osMutexRelease(moistureMutex1Handle);
 8000466:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <StartSensorTask+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fc8e 	bl	8002d8c <osMutexRelease>
 8000470:	e017      	b.n	80004a2 <StartSensorTask+0x76>
    }
    else{
    	char error_msg[] = "ADC conversion failed!\r\n";
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <StartSensorTask+0x94>)
 8000474:	f107 040c 	add.w	r4, r7, #12
 8000478:	461d      	mov	r5, r3
 800047a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000482:	c403      	stmia	r4!, {r0, r1}
 8000484:	7022      	strb	r2, [r4, #0]
    	HAL_UART_Transmit(&huart1, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe60 	bl	8000150 <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	f107 010c 	add.w	r1, r7, #12
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	4809      	ldr	r0, [pc, #36]	@ (80004c4 <StartSensorTask+0x98>)
 800049e:	f002 f8ed 	bl	800267c <HAL_UART_Transmit>
    }
    /* Stop the ADC conversion */
    HAL_ADC_Stop(&hadc1);
 80004a2:	4804      	ldr	r0, [pc, #16]	@ (80004b4 <StartSensorTask+0x88>)
 80004a4:	f000 fc02 	bl	8000cac <HAL_ADC_Stop>
    /* Delay for 1 second */
    HAL_Delay(1000);
 80004a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ac:	f000 fa54 	bl	8000958 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 80004b0:	e7c0      	b.n	8000434 <StartSensorTask+0x8>
 80004b2:	bf00      	nop
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	200000f8 	.word	0x200000f8
 80004bc:	200000ea 	.word	0x200000ea
 80004c0:	08005c9c 	.word	0x08005c9c
 80004c4:	2000005c 	.word	0x2000005c

080004c8 <StartWateringTask>:
  * @brief Function implementing the wateringTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartWateringTask(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Check if moisture level is below threshold */
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <StartWateringTask+0x4c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f04f 31ff 	mov.w	r1, #4294967295
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 fbf9 	bl	8002cd0 <osMutexAcquire>
	uint16_t threshold = moistureLevel;
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <StartWateringTask+0x50>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(moistureMutex1Handle);
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <StartWateringTask+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fc4f 	bl	8002d8c <osMutexRelease>
    if(threshold < 30){
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	2b1d      	cmp	r3, #29
 80004f2:	d805      	bhi.n	8000500 <StartWateringTask+0x38>
      /* Turn on the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <StartWateringTask+0x54>)
 80004fa:	f001 fadb 	bl	8001ab4 <HAL_GPIO_WritePin>
 80004fe:	e004      	b.n	800050a <StartWateringTask+0x42>
    } else {
      /* Turn off the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	4805      	ldr	r0, [pc, #20]	@ (800051c <StartWateringTask+0x54>)
 8000506:	f001 fad5 	bl	8001ab4 <HAL_GPIO_WritePin>
    }
    /* Delay for 1 second */
    HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050e:	f000 fa23 	bl	8000958 <HAL_Delay>
  while(1){
 8000512:	e7dd      	b.n	80004d0 <StartWateringTask+0x8>
 8000514:	200000f8 	.word	0x200000f8
 8000518:	200000ea 	.word	0x200000ea
 800051c:	40010800 	.word	0x40010800

08000520 <StartCanTask>:
  * @brief Function implementing the canTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartCanTask(void *argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Set up CAN message header */
  TxHeader.DLC = 2;
 8000528:	4b17      	ldr	r3, [pc, #92]	@ (8000588 <StartCanTask+0x68>)
 800052a:	2202      	movs	r2, #2
 800052c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800052e:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <StartCanTask+0x68>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000534:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <StartCanTask+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x0A; // Unique ID for Node 2
 800053a:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <StartCanTask+0x68>)
 800053c:	220a      	movs	r2, #10
 800053e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  while(1){
    /* Prepare CAN data */
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <StartCanTask+0x6c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fbc1 	bl	8002cd0 <osMutexAcquire>
    TxData[0] = moistureLevel & 0xFF;
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <StartCanTask+0x70>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <StartCanTask+0x74>)
 8000556:	701a      	strb	r2, [r3, #0]
    TxData[1] = (moistureLevel >> 8) & 0xFF;
 8000558:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <StartCanTask+0x70>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <StartCanTask+0x74>)
 8000564:	705a      	strb	r2, [r3, #1]
    osMutexRelease(moistureMutex1Handle);
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <StartCanTask+0x6c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fc0e 	bl	8002d8c <osMutexRelease>
    /* Transmit CAN message */
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <StartCanTask+0x78>)
 8000572:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <StartCanTask+0x74>)
 8000574:	4904      	ldr	r1, [pc, #16]	@ (8000588 <StartCanTask+0x68>)
 8000576:	4809      	ldr	r0, [pc, #36]	@ (800059c <StartCanTask+0x7c>)
 8000578:	f000 ff64 	bl	8001444 <HAL_CAN_AddTxMessage>
    /* Delay for 1 second */
    HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000580:	f000 f9ea 	bl	8000958 <HAL_Delay>
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 8000584:	bf00      	nop
 8000586:	e7db      	b.n	8000540 <StartCanTask+0x20>
 8000588:	200000cc 	.word	0x200000cc
 800058c:	200000f8 	.word	0x200000f8
 8000590:	200000ea 	.word	0x200000ea
 8000594:	200000e8 	.word	0x200000e8
 8000598:	200000e4 	.word	0x200000e4
 800059c:	200000a4 	.word	0x200000a4

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* Disable interrupts and enter an infinite loop */
  __disable_irq();
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <Error_Handler+0x8>

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_MspInit+0x68>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <HAL_MspInit+0x68>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_MspInit+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_MspInit+0x68>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <HAL_MspInit+0x68>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x68>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	210f      	movs	r1, #15
 80005e6:	f06f 0001 	mvn.w	r0, #1
 80005ea:	f001 f8b6 	bl	800175a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_MspInit+0x6c>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <HAL_MspInit+0x6c>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <HAL_ADC_MspInit+0x6c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d121      	bne.n	8000680 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <HAL_ADC_MspInit+0x70>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a12      	ldr	r2, [pc, #72]	@ (800068c <HAL_ADC_MspInit+0x70>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <HAL_ADC_MspInit+0x70>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <HAL_ADC_MspInit+0x70>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <HAL_ADC_MspInit+0x70>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_ADC_MspInit+0x70>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <HAL_ADC_MspInit+0x74>)
 800067c:	f001 f896 	bl	80017ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40012400 	.word	0x40012400
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a25      	ldr	r2, [pc, #148]	@ (8000744 <HAL_CAN_MspInit+0xb0>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d143      	bne.n	800073c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a23      	ldr	r2, [pc, #140]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4814      	ldr	r0, [pc, #80]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006fa:	f001 f857 	bl	80017ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	480e      	ldr	r0, [pc, #56]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 8000714:	f001 f84a 	bl	80017ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <HAL_CAN_MspInit+0xbc>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
 8000726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000728:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
 8000736:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <HAL_CAN_MspInit+0xbc>)
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	@ 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40006400 	.word	0x40006400
 8000748:	40021000 	.word	0x40021000
 800074c:	40010c00 	.word	0x40010c00
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <HAL_UART_MspInit+0x8c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d131      	bne.n	80007d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <HAL_UART_MspInit+0x90>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1a      	ldr	r2, [pc, #104]	@ (80007e4 <HAL_UART_MspInit+0x90>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <HAL_UART_MspInit+0x90>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <HAL_UART_MspInit+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <HAL_UART_MspInit+0x90>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_UART_MspInit+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <HAL_UART_MspInit+0x94>)
 80007ba:	f000 fff7 	bl	80017ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <HAL_UART_MspInit+0x94>)
 80007d4:	f000 ffea 	bl	80017ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013800 	.word	0x40013800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f87c 	bl	8000920 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000828:	f004 f8f8 	bl	8004a1c <xTaskGetSchedulerState>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d001      	beq.n	8000836 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000832:	f004 ff71 	bl	8005718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
	...

08000848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff fff7 	bl	800083a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480b      	ldr	r0, [pc, #44]	@ (800087c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800084e:	490c      	ldr	r1, [pc, #48]	@ (8000880 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000850:	4a0c      	ldr	r2, [pc, #48]	@ (8000884 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000864:	4c09      	ldr	r4, [pc, #36]	@ (800088c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f005 f9bb 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fc73 	bl	8000160 <main>
  bx lr
 800087a:	4770      	bx	lr
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000884:	08005d9c 	.word	0x08005d9c
  ldr r2, =_sbss
 8000888:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800088c:	20001a48 	.word	0x20001a48

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 ff4d 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff fe7c 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ff57 	bl	8001792 <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 ff2d 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	@ (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000008 	.word	0x20000008
 8000940:	200000fc 	.word	0x200000fc

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	200000fc 	.word	0x200000fc

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000960:	f7ff fff0 	bl	8000944 <HAL_GetTick>
 8000964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d005      	beq.n	800097e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_Delay+0x44>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097e:	bf00      	nop
 8000980:	f7ff ffe0 	bl	8000944 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f7      	bhi.n	8000980 <HAL_Delay+0x28>
  {
  }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008

080009a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e0be      	b.n	8000b40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d109      	bne.n	80009e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fe1c 	bl	800061c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 fbf1 	bl	80011cc <ADC_ConversionStop_Disable>
 80009ea:	4603      	mov	r3, r0
 80009ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f040 8099 	bne.w	8000b2e <HAL_ADC_Init+0x18e>
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f040 8095 	bne.w	8000b2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a0c:	f023 0302 	bic.w	r3, r3, #2
 8000a10:	f043 0202 	orr.w	r2, r3, #2
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7b1b      	ldrb	r3, [r3, #12]
 8000a26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a38:	d003      	beq.n	8000a42 <HAL_ADC_Init+0xa2>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d102      	bne.n	8000a48 <HAL_ADC_Init+0xa8>
 8000a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a46:	e000      	b.n	8000a4a <HAL_ADC_Init+0xaa>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7d1b      	ldrb	r3, [r3, #20]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d119      	bne.n	8000a8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7b1b      	ldrb	r3, [r3, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d109      	bne.n	8000a74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	035a      	lsls	r2, r3, #13
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	e00b      	b.n	8000a8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a78:	f043 0220 	orr.w	r2, r3, #32
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a84:	f043 0201 	orr.w	r2, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <HAL_ADC_Init+0x1a8>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000abc:	d003      	beq.n	8000ac6 <HAL_ADC_Init+0x126>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d104      	bne.n	8000ad0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	051b      	lsls	r3, r3, #20
 8000ace:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <HAL_ADC_Init+0x1ac>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d10b      	bne.n	8000b0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	f023 0303 	bic.w	r3, r3, #3
 8000b02:	f043 0201 	orr.w	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b0a:	e018      	b.n	8000b3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b10:	f023 0312 	bic.w	r3, r3, #18
 8000b14:	f043 0210 	orr.w	r2, r3, #16
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b20:	f043 0201 	orr.w	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b2c:	e007      	b.n	8000b3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b32:	f043 0210 	orr.w	r2, r3, #16
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	ffe1f7fd 	.word	0xffe1f7fd
 8000b4c:	ff1f0efe 	.word	0xff1f0efe

08000b50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_Start+0x1a>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e098      	b.n	8000c9c <HAL_ADC_Start+0x14c>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 fad0 	bl	8001118 <ADC_Enable>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8087 	bne.w	8000c92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a41      	ldr	r2, [pc, #260]	@ (8000ca4 <HAL_ADC_Start+0x154>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d105      	bne.n	8000bae <HAL_ADC_Start+0x5e>
 8000ba2:	4b41      	ldr	r3, [pc, #260]	@ (8000ca8 <HAL_ADC_Start+0x158>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d115      	bne.n	8000bda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d026      	beq.n	8000c16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000bd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bd8:	e01d      	b.n	8000c16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca8 <HAL_ADC_Start+0x158>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d004      	beq.n	8000bfa <HAL_ADC_Start+0xaa>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca4 <HAL_ADC_Start+0x154>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d10d      	bne.n	8000c16 <HAL_ADC_Start+0xc6>
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <HAL_ADC_Start+0x158>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c26:	f023 0206 	bic.w	r2, r3, #6
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c2e:	e002      	b.n	8000c36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f06f 0202 	mvn.w	r2, #2
 8000c46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c56:	d113      	bne.n	8000c80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c5c:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <HAL_ADC_Start+0x154>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d105      	bne.n	8000c6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_ADC_Start+0x158>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d108      	bne.n	8000c80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	e00c      	b.n	8000c9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	e003      	b.n	8000c9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40012800 	.word	0x40012800
 8000ca8:	40012400 	.word	0x40012400

08000cac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Stop+0x1a>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e01a      	b.n	8000cfc <HAL_ADC_Stop+0x50>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 fa7c 	bl	80011cc <ADC_ConversionStop_Disable>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d109      	bne.n	8000cf2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d1a:	f7ff fe13 	bl	8000944 <HAL_GetTick>
 8000d1e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00b      	beq.n	8000d46 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d32:	f043 0220 	orr.w	r2, r3, #32
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0d3      	b.n	8000eee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d131      	bne.n	8000db8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d12a      	bne.n	8000db8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d62:	e021      	b.n	8000da8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6a:	d01d      	beq.n	8000da8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <HAL_ADC_PollForConversion+0x7e>
 8000d72:	f7ff fde7 	bl	8000944 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d212      	bcs.n	8000da8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10b      	bne.n	8000da8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d94:	f043 0204 	orr.w	r2, r3, #4
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e0a2      	b.n	8000eee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0d6      	beq.n	8000d64 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000db6:	e070      	b.n	8000e9a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000db8:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef8 <HAL_ADC_PollForConversion+0x1f4>)
 8000dba:	681c      	ldr	r4, [r3, #0]
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f001 fb57 	bl	8002470 <HAL_RCCEx_GetPeriphCLKFreq>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6919      	ldr	r1, [r3, #16]
 8000dce:	4b4b      	ldr	r3, [pc, #300]	@ (8000efc <HAL_ADC_PollForConversion+0x1f8>)
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d118      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x104>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68d9      	ldr	r1, [r3, #12]
 8000ddc:	4b48      	ldr	r3, [pc, #288]	@ (8000f00 <HAL_ADC_PollForConversion+0x1fc>)
 8000dde:	400b      	ands	r3, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d111      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x104>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6919      	ldr	r1, [r3, #16]
 8000dea:	4b46      	ldr	r3, [pc, #280]	@ (8000f04 <HAL_ADC_PollForConversion+0x200>)
 8000dec:	400b      	ands	r3, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d108      	bne.n	8000e04 <HAL_ADC_PollForConversion+0x100>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68d9      	ldr	r1, [r3, #12]
 8000df8:	4b43      	ldr	r3, [pc, #268]	@ (8000f08 <HAL_ADC_PollForConversion+0x204>)
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <HAL_ADC_PollForConversion+0x100>
 8000e00:	2314      	movs	r3, #20
 8000e02:	e020      	b.n	8000e46 <HAL_ADC_PollForConversion+0x142>
 8000e04:	2329      	movs	r3, #41	@ 0x29
 8000e06:	e01e      	b.n	8000e46 <HAL_ADC_PollForConversion+0x142>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6919      	ldr	r1, [r3, #16]
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f04 <HAL_ADC_PollForConversion+0x200>)
 8000e10:	400b      	ands	r3, r1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_ADC_PollForConversion+0x120>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68d9      	ldr	r1, [r3, #12]
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f08 <HAL_ADC_PollForConversion+0x204>)
 8000e1e:	400b      	ands	r3, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00d      	beq.n	8000e40 <HAL_ADC_PollForConversion+0x13c>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6919      	ldr	r1, [r3, #16]
 8000e2a:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <HAL_ADC_PollForConversion+0x208>)
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d108      	bne.n	8000e44 <HAL_ADC_PollForConversion+0x140>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68d9      	ldr	r1, [r3, #12]
 8000e38:	4b34      	ldr	r3, [pc, #208]	@ (8000f0c <HAL_ADC_PollForConversion+0x208>)
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <HAL_ADC_PollForConversion+0x140>
 8000e40:	2354      	movs	r3, #84	@ 0x54
 8000e42:	e000      	b.n	8000e46 <HAL_ADC_PollForConversion+0x142>
 8000e44:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e4c:	e021      	b.n	8000e92 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d01a      	beq.n	8000e8c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <HAL_ADC_PollForConversion+0x168>
 8000e5c:	f7ff fd72 	bl	8000944 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d20f      	bcs.n	8000e8c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d90b      	bls.n	8000e8c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e78:	f043 0204 	orr.w	r2, r3, #4
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e030      	b.n	8000eee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d8d9      	bhi.n	8000e4e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f06f 0212 	mvn.w	r2, #18
 8000ea2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000eba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ebe:	d115      	bne.n	8000eec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d111      	bne.n	8000eec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee4:	f043 0201 	orr.w	r2, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	24924924 	.word	0x24924924
 8000f00:	00924924 	.word	0x00924924
 8000f04:	12492492 	.word	0x12492492
 8000f08:	00492492 	.word	0x00492492
 8000f0c:	00249249 	.word	0x00249249

08000f10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x20>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e0dc      	b.n	8001102 <HAL_ADC_ConfigChannel+0x1da>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d81c      	bhi.n	8000f92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	3b05      	subs	r3, #5
 8000f6a:	221f      	movs	r2, #31
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4019      	ands	r1, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	3b05      	subs	r3, #5
 8000f84:	fa00 f203 	lsl.w	r2, r0, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f90:	e03c      	b.n	800100c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d81c      	bhi.n	8000fd4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	3b23      	subs	r3, #35	@ 0x23
 8000fac:	221f      	movs	r2, #31
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	4019      	ands	r1, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b23      	subs	r3, #35	@ 0x23
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fd2:	e01b      	b.n	800100c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3b41      	subs	r3, #65	@ 0x41
 8000fe6:	221f      	movs	r2, #31
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4019      	ands	r1, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3b41      	subs	r3, #65	@ 0x41
 8001000:	fa00 f203 	lsl.w	r2, r0, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d91c      	bls.n	800104e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68d9      	ldr	r1, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	3b1e      	subs	r3, #30
 8001026:	2207      	movs	r2, #7
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	4019      	ands	r1, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	3b1e      	subs	r3, #30
 8001040:	fa00 f203 	lsl.w	r2, r0, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	e019      	b.n	8001082 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6919      	ldr	r1, [r3, #16]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	4019      	ands	r1, r3
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6898      	ldr	r0, [r3, #8]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	fa00 f203 	lsl.w	r2, r0, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d003      	beq.n	8001092 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800108e:	2b11      	cmp	r3, #17
 8001090:	d132      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_ADC_ConfigChannel+0x1e4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d125      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d126      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b10      	cmp	r3, #16
 80010c0:	d11a      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <HAL_ADC_ConfigChannel+0x1e8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <HAL_ADC_ConfigChannel+0x1ec>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	0c9a      	lsrs	r2, r3, #18
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d8:	e002      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3b01      	subs	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f9      	bne.n	80010da <HAL_ADC_ConfigChannel+0x1b2>
 80010e6:	e007      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	f043 0220 	orr.w	r2, r3, #32
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40012400 	.word	0x40012400
 8001110:	20000000 	.word	0x20000000
 8001114:	431bde83 	.word	0x431bde83

08001118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d040      	beq.n	80011b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <ADC_Enable+0xac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1f      	ldr	r2, [pc, #124]	@ (80011c8 <ADC_Enable+0xb0>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0c9b      	lsrs	r3, r3, #18
 8001152:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001154:	e002      	b.n	800115c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3b01      	subs	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f9      	bne.n	8001156 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001162:	f7ff fbef 	bl	8000944 <HAL_GetTick>
 8001166:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001168:	e01f      	b.n	80011aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800116a:	f7ff fbeb 	bl	8000944 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d918      	bls.n	80011aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b01      	cmp	r3, #1
 8001184:	d011      	beq.n	80011aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e007      	b.n	80011ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1d8      	bne.n	800116a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000
 80011c8:	431bde83 	.word	0x431bde83

080011cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d12e      	bne.n	8001244 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011f6:	f7ff fba5 	bl	8000944 <HAL_GetTick>
 80011fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011fc:	e01b      	b.n	8001236 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011fe:	f7ff fba1 	bl	8000944 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d914      	bls.n	8001236 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10d      	bne.n	8001236 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e007      	b.n	8001246 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	d0dc      	beq.n	80011fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0ed      	b.n	800143c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fa11 	bl	8000694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001282:	f7ff fb5f 	bl	8000944 <HAL_GetTick>
 8001286:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001288:	e012      	b.n	80012b0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128a:	f7ff fb5b 	bl	8000944 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b0a      	cmp	r3, #10
 8001296:	d90b      	bls.n	80012b0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2205      	movs	r2, #5
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0c5      	b.n	800143c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0e5      	beq.n	800128a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0202 	bic.w	r2, r2, #2
 80012cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ce:	f7ff fb39 	bl	8000944 <HAL_GetTick>
 80012d2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012d4:	e012      	b.n	80012fc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d6:	f7ff fb35 	bl	8000944 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b0a      	cmp	r3, #10
 80012e2:	d90b      	bls.n	80012fc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2205      	movs	r2, #5
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e09f      	b.n	800143c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e5      	bne.n	80012d6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e1b      	ldrb	r3, [r3, #24]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e5b      	ldrb	r3, [r3, #25]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7e9b      	ldrb	r3, [r3, #26]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0220 	orr.w	r2, r2, #32
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0220 	bic.w	r2, r2, #32
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7edb      	ldrb	r3, [r3, #27]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d108      	bne.n	80013a2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0210 	bic.w	r2, r2, #16
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0210 	orr.w	r2, r2, #16
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7f1b      	ldrb	r3, [r3, #28]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0208 	orr.w	r2, r2, #8
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0208 	bic.w	r2, r2, #8
 80013da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7f5b      	ldrb	r3, [r3, #29]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0204 	orr.w	r2, r2, #4
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e007      	b.n	8001406 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0204 	bic.w	r2, r2, #4
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	ea42 0103 	orr.w	r1, r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001458:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d003      	beq.n	8001470 <HAL_CAN_AddTxMessage+0x2c>
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	2b02      	cmp	r3, #2
 800146c:	f040 80ad 	bne.w	80015ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10a      	bne.n	8001490 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001480:	2b00      	cmp	r3, #0
 8001482:	d105      	bne.n	8001490 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8095 	beq.w	80015ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	0e1b      	lsrs	r3, r3, #24
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800149a:	2201      	movs	r2, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10d      	bne.n	80014c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b6:	68f9      	ldr	r1, [r7, #12]
 80014b8:	6809      	ldr	r1, [r1, #0]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3318      	adds	r3, #24
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e00f      	b.n	80014e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3318      	adds	r3, #24
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3318      	adds	r3, #24
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	440b      	add	r3, r1
 80014f8:	3304      	adds	r3, #4
 80014fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	7d1b      	ldrb	r3, [r3, #20]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d111      	bne.n	8001528 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3318      	adds	r3, #24
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	3304      	adds	r3, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	6811      	ldr	r1, [r2, #0]
 8001518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3318      	adds	r3, #24
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	440b      	add	r3, r1
 8001524:	3304      	adds	r3, #4
 8001526:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3307      	adds	r3, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	061a      	lsls	r2, r3, #24
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3306      	adds	r3, #6
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3305      	adds	r3, #5
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	4313      	orrs	r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	3204      	adds	r2, #4
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4610      	mov	r0, r2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6811      	ldr	r1, [r2, #0]
 8001550:	ea43 0200 	orr.w	r2, r3, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800155e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3303      	adds	r3, #3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	061a      	lsls	r2, r3, #24
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3302      	adds	r3, #2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	4313      	orrs	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	4610      	mov	r0, r2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	6811      	ldr	r1, [r2, #0]
 8001586:	ea43 0200 	orr.w	r2, r3, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001594:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3318      	adds	r3, #24
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	6811      	ldr	r1, [r2, #0]
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3318      	adds	r3, #24
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e00e      	b.n	80015d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3724      	adds	r7, #36	@ 0x24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
	...

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff90 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff49 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff5e 	bl	800162c <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff90 	bl	800169c <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5f 	bl	8001648 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffb0 	bl	8001700 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	@ 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e169      	b.n	8001a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8158 	bne.w	8001a8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a9a      	ldr	r2, [pc, #616]	@ (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d05e      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017e8:	4a98      	ldr	r2, [pc, #608]	@ (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d875      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017ee:	4a98      	ldr	r2, [pc, #608]	@ (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d058      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017f4:	4a96      	ldr	r2, [pc, #600]	@ (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d86f      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017fa:	4a96      	ldr	r2, [pc, #600]	@ (8001a54 <HAL_GPIO_Init+0x2a8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d052      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001800:	4a94      	ldr	r2, [pc, #592]	@ (8001a54 <HAL_GPIO_Init+0x2a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d869      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001806:	4a94      	ldr	r2, [pc, #592]	@ (8001a58 <HAL_GPIO_Init+0x2ac>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04c      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800180c:	4a92      	ldr	r2, [pc, #584]	@ (8001a58 <HAL_GPIO_Init+0x2ac>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d863      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001812:	4a92      	ldr	r2, [pc, #584]	@ (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d046      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001818:	4a90      	ldr	r2, [pc, #576]	@ (8001a5c <HAL_GPIO_Init+0x2b0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d85d      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d82a      	bhi.n	8001878 <HAL_GPIO_Init+0xcc>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d859      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001826:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <HAL_GPIO_Init+0x80>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018a7 	.word	0x080018a7
 8001830:	08001881 	.word	0x08001881
 8001834:	08001893 	.word	0x08001893
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	08001889 	.word	0x08001889
 8001874:	0800189d 	.word	0x0800189d
 8001878:	4a79      	ldr	r2, [pc, #484]	@ (8001a60 <HAL_GPIO_Init+0x2b4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187e:	e02c      	b.n	80018da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e029      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e024      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	3308      	adds	r3, #8
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e01f      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	330c      	adds	r3, #12
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e01a      	b.n	80018dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ae:	2304      	movs	r3, #4
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e013      	b.n	80018dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	611a      	str	r2, [r3, #16]
          break;
 80018c6:	e009      	b.n	80018dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	615a      	str	r2, [r3, #20]
          break;
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x130>
          break;
 80018da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	@ 0xff
 80018e0:	d801      	bhi.n	80018e6 <HAL_GPIO_Init+0x13a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_Init+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	@ 0xff
 80018f0:	d802      	bhi.n	80018f8 <HAL_GPIO_Init+0x14c>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x152>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	3b08      	subs	r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	210f      	movs	r1, #15
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80b1 	beq.w	8001a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a4c      	ldr	r2, [pc, #304]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001944:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a40      	ldr	r2, [pc, #256]	@ (8001a6c <HAL_GPIO_Init+0x2c0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_GPIO_Init+0x1ec>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3f      	ldr	r2, [pc, #252]	@ (8001a70 <HAL_GPIO_Init+0x2c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1e8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a74 <HAL_GPIO_Init+0x2c8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1e4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3d      	ldr	r2, [pc, #244]	@ (8001a78 <HAL_GPIO_Init+0x2cc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1e0>
 8001988:	2303      	movs	r3, #3
 800198a:	e006      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 800198c:	2304      	movs	r3, #4
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001998:	2300      	movs	r3, #0
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	492f      	ldr	r1, [pc, #188]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	492c      	ldr	r1, [pc, #176]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4928      	ldr	r1, [pc, #160]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4922      	ldr	r1, [pc, #136]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	491e      	ldr	r1, [pc, #120]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4918      	ldr	r1, [pc, #96]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4914      	ldr	r1, [pc, #80]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d021      	beq.n	8001a80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e021      	b.n	8001a8e <HAL_GPIO_Init+0x2e2>
 8001a4a:	bf00      	nop
 8001a4c:	10320000 	.word	0x10320000
 8001a50:	10310000 	.word	0x10310000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	10210000 	.word	0x10210000
 8001a5c:	10120000 	.word	0x10120000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40011400 	.word	0x40011400
 8001a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	4909      	ldr	r1, [pc, #36]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f47f ae8e 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	372c      	adds	r7, #44	@ 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e272      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8087 	beq.w	8001c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	4b92      	ldr	r3, [pc, #584]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d00c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b10:	4b8f      	ldr	r3, [pc, #572]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d112      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5e>
 8001b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b28:	d10b      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2a:	4b89      	ldr	r3, [pc, #548]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x12c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d168      	bne.n	8001c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e24c      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x76>
 8001b4c:	4b80      	ldr	r3, [pc, #512]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a7f      	ldr	r2, [pc, #508]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e02e      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b7b      	ldr	r3, [pc, #492]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7a      	ldr	r2, [pc, #488]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b78      	ldr	r3, [pc, #480]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a77      	ldr	r2, [pc, #476]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xbc>
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a71      	ldr	r2, [pc, #452]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b6f      	ldr	r3, [pc, #444]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6e      	ldr	r2, [pc, #440]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b68      	ldr	r3, [pc, #416]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a67      	ldr	r2, [pc, #412]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fec0 	bl	8000944 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7fe febc 	bl	8000944 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e200      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xe4>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe feac 	bl	8000944 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fea8 	bl	8000944 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1ec      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x10c>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2a:	4b49      	ldr	r3, [pc, #292]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d11c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x18c>
 8001c36:	4b46      	ldr	r3, [pc, #280]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x176>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1c0      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4939      	ldr	r1, [pc, #228]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	e03a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fe61 	bl	8000944 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7fe fe5d 	bl	8000944 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1a1      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4927      	ldr	r1, [pc, #156]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fe40 	bl	8000944 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7fe fe3c 	bl	8000944 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e180      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03a      	beq.n	8001d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7fe fe20 	bl	8000944 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7fe fe1c 	bl	8000944 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e160      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 face 	bl	80022c8 <RCC_Delay>
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7fe fe06 	bl	8000944 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3a:	e00f      	b.n	8001d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fe02 	bl	8000944 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d908      	bls.n	8001d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e146      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	42420000 	.word	0x42420000
 8001d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b92      	ldr	r3, [pc, #584]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e9      	bne.n	8001d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a6 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b88      	ldr	r3, [pc, #544]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a87      	ldr	r2, [pc, #540]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b85      	ldr	r3, [pc, #532]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dae:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7fe fdc3 	bl	8000944 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7fe fdbf 	bl	8000944 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	@ 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e103      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x312>
 8001de8:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	e02d      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x334>
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a69      	ldr	r2, [pc, #420]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	4b67      	ldr	r3, [pc, #412]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a66      	ldr	r2, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	e01c      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x356>
 8001e20:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a60      	ldr	r2, [pc, #384]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	e00b      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b58      	ldr	r3, [pc, #352]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a57      	ldr	r2, [pc, #348]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d015      	beq.n	8001e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe fd73 	bl	8000944 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe fd6f 	bl	8000944 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0b1      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ee      	beq.n	8001e62 <HAL_RCC_OscConfig+0x37e>
 8001e84:	e014      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7fe fd5d 	bl	8000944 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7fe fd59 	bl	8000944 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e09b      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ee      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8087 	beq.w	8001fda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d061      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d146      	bne.n	8001f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b33      	ldr	r3, [pc, #204]	@ (8001fb0 <HAL_RCC_OscConfig+0x4cc>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fd2d 	bl	8000944 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe fd29 	bl	8000944 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e06d      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f14:	d108      	bne.n	8001f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	4921      	ldr	r1, [pc, #132]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	491b      	ldr	r1, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fcfd 	bl	8000944 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe fcf9 	bl	8000944 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e03d      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46a>
 8001f6c:	e035      	b.n	8001fda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_RCC_OscConfig+0x4cc>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fce6 	bl	8000944 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fce2 	bl	8000944 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e026      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x498>
 8001f9a:	e01e      	b.n	8001fda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e019      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCC_OscConfig+0x500>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d0      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b67      	ldr	r3, [pc, #412]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4965      	ldr	r1, [pc, #404]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800204e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d040      	beq.n	8002108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d115      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e073      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4936      	ldr	r1, [pc, #216]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d8:	f7fe fc34 	bl	8000944 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe fc30 	bl	8000944 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e053      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d210      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 0207 	bic.w	r2, r3, #7
 800211e:	4922      	ldr	r1, [pc, #136]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fb92 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08005d4c 	.word	0x08005d4c
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x94>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x30>
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ea:	e027      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ee:	613b      	str	r3, [r7, #16]
      break;
 80021f0:	e027      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x94>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0c5b      	lsrs	r3, r3, #17
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	4a11      	ldr	r2, [pc, #68]	@ (800225c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 800221e:	fb03 f202 	mul.w	r2, r3, r2
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e004      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	613b      	str	r3, [r7, #16]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 800223e:	613b      	str	r3, [r7, #16]
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	693b      	ldr	r3, [r7, #16]
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	08005d64 	.word	0x08005d64
 800225c:	08005d74 	.word	0x08005d74
 8002260:	003d0900 	.word	0x003d0900

08002264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b02      	ldr	r3, [pc, #8]	@ (8002274 <HAL_RCC_GetHCLKFreq+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800227c:	f7ff fff2 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	@ (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	08005d5c 	.word	0x08005d5c

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a4:	f7ff ffde 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0adb      	lsrs	r3, r3, #11
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4903      	ldr	r1, [pc, #12]	@ (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08005d5c 	.word	0x08005d5c

080022c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <RCC_Delay+0x34>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <RCC_Delay+0x38>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0a5b      	lsrs	r3, r3, #9
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e4:	bf00      	nop
  }
  while (Delay --);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	60fa      	str	r2, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f9      	bne.n	80022e4 <RCC_Delay+0x1c>
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000000 	.word	0x20000000
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d07d      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002324:	4b4f      	ldr	r3, [pc, #316]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b4c      	ldr	r3, [pc, #304]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	4a4b      	ldr	r2, [pc, #300]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233a:	61d3      	str	r3, [r2, #28]
 800233c:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b46      	ldr	r3, [pc, #280]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d118      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002358:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a42      	ldr	r2, [pc, #264]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002364:	f7fe faee 	bl	8000944 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	e008      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236c:	f7fe faea 	bl	8000944 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e06d      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800238a:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002392:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d02e      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d027      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023b2:	4b2e      	ldr	r3, [pc, #184]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b8:	4b2c      	ldr	r3, [pc, #176]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023be:	4a29      	ldr	r2, [pc, #164]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d014      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fab9 	bl	8000944 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fab5 	bl	8000944 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e036      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ee      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4917      	ldr	r1, [pc, #92]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	4313      	orrs	r3, r2
 8002408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a13      	ldr	r2, [pc, #76]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	490b      	ldr	r1, [pc, #44]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4904      	ldr	r1, [pc, #16]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
 800246c:	42420440 	.word	0x42420440

08002470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b10      	cmp	r3, #16
 8002496:	f200 808a 	bhi.w	80025ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d045      	beq.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d075      	beq.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024a6:	e082      	b.n	80025ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80024a8:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024ae:	4b45      	ldr	r3, [pc, #276]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d07b      	beq.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0c9b      	lsrs	r3, r3, #18
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a41      	ldr	r2, [pc, #260]	@ (80025c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d2:	4b3c      	ldr	r3, [pc, #240]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0c5b      	lsrs	r3, r3, #17
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	4a3b      	ldr	r2, [pc, #236]	@ (80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	e004      	b.n	8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4a34      	ldr	r2, [pc, #208]	@ (80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002508:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002514:	d102      	bne.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	61bb      	str	r3, [r7, #24]
      break;
 800251a:	e04a      	b.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4a2d      	ldr	r2, [pc, #180]	@ (80025d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
      break;
 800252a:	e042      	b.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800252c:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800253c:	d108      	bne.n	8002550 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e01f      	b.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800255a:	d109      	bne.n	8002570 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002568:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e00f      	b.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800257a:	d11c      	bne.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d016      	beq.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002588:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800258c:	61bb      	str	r3, [r7, #24]
      break;
 800258e:	e012      	b.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002590:	e011      	b.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002592:	f7ff fe85 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	0b9b      	lsrs	r3, r3, #14
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	3301      	adds	r3, #1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	61bb      	str	r3, [r7, #24]
      break;
 80025ac:	e004      	b.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025ae:	bf00      	nop
 80025b0:	e002      	b.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025b6:	bf00      	nop
    }
  }
  return (frequency);
 80025b8:	69bb      	ldr	r3, [r7, #24]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08005d78 	.word	0x08005d78
 80025cc:	08005d88 	.word	0x08005d88
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	003d0900 	.word	0x003d0900
 80025d8:	aaaaaaab 	.word	0xaaaaaaab

080025dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e042      	b.n	8002674 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f8a6 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	@ 0x24
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800261e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f91d 	bl	8002860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b20      	cmp	r3, #32
 800269a:	d16d      	bne.n	8002778 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_UART_Transmit+0x2c>
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e066      	b.n	800277a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2221      	movs	r2, #33	@ 0x21
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ba:	f7fe f943 	bl	8000944 <HAL_GetTick>
 80026be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d4:	d108      	bne.n	80026e8 <HAL_UART_Transmit+0x6c>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e003      	b.n	80026f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f0:	e02a      	b.n	8002748 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2180      	movs	r1, #128	@ 0x80
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f840 	bl	8002782 <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e036      	b.n	800277a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002720:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3302      	adds	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e007      	b.n	800273a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1cf      	bne.n	80026f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	2140      	movs	r1, #64	@ 0x40
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f810 	bl	8002782 <UART_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e006      	b.n	800277a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b090      	sub	sp, #64	@ 0x40
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002792:	e050      	b.n	8002836 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d04c      	beq.n	8002836 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800279c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80027a2:	f7fe f8cf 	bl	8000944 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d241      	bcs.n	8002836 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80027c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80027d4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027da:	e841 2300 	strex	r3, r2, [r1]
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80027e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e5      	bne.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3314      	adds	r3, #20
 80027ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	613b      	str	r3, [r7, #16]
   return(result);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002806:	623a      	str	r2, [r7, #32]
 8002808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	69f9      	ldr	r1, [r7, #28]
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	61bb      	str	r3, [r7, #24]
   return(result);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e5      	bne.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e00f      	b.n	8002856 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	429a      	cmp	r2, r3
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	429a      	cmp	r2, r3
 8002852:	d09f      	beq.n	8002794 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3740      	adds	r7, #64	@ 0x40
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800289a:	f023 030c 	bic.w	r3, r3, #12
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002974 <UART_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d103      	bne.n	80028d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028c8:	f7ff fcea 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	e002      	b.n	80028d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028d0:	f7ff fcd2 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80028d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <UART_SetConfig+0x118>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	0119      	lsls	r1, r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <UART_SetConfig+0x118>)
 800290e:	fba3 0302 	umull	r0, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2064      	movs	r0, #100	@ 0x64
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	@ 0x32
 8002920:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <UART_SetConfig+0x118>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292c:	4419      	add	r1, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009a      	lsls	r2, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fbb2 f2f3 	udiv	r2, r2, r3
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <UART_SetConfig+0x118>)
 8002946:	fba3 0302 	umull	r0, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2064      	movs	r0, #100	@ 0x64
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	3332      	adds	r3, #50	@ 0x32
 8002958:	4a07      	ldr	r2, [pc, #28]	@ (8002978 <UART_SetConfig+0x118>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	440a      	add	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40013800 	.word	0x40013800
 8002978:	51eb851f 	.word	0x51eb851f

0800297c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002982:	f3ef 8305 	mrs	r3, IPSR
 8002986:	60bb      	str	r3, [r7, #8]
  return(result);
 8002988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298e:	f3ef 8310 	mrs	r3, PRIMASK
 8002992:	607b      	str	r3, [r7, #4]
  return(result);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <osKernelInitialize+0x32>
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <osKernelInitialize+0x60>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d109      	bne.n	80029b6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029a2:	f3ef 8311 	mrs	r3, BASEPRI
 80029a6:	603b      	str	r3, [r7, #0]
  return(result);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029ae:	f06f 0305 	mvn.w	r3, #5
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e00c      	b.n	80029d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <osKernelInitialize+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <osKernelInitialize+0x60>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e002      	b.n	80029d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029d0:	68fb      	ldr	r3, [r7, #12]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000100 	.word	0x20000100

080029e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e6:	f3ef 8305 	mrs	r3, IPSR
 80029ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80029ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	607b      	str	r3, [r7, #4]
  return(result);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <osKernelStart+0x32>
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <osKernelStart+0x64>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d109      	bne.n	8002a1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a06:	f3ef 8311 	mrs	r3, BASEPRI
 8002a0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a12:	f06f 0305 	mvn.w	r3, #5
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e00e      	b.n	8002a38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <osKernelStart+0x64>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <osKernelStart+0x64>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a28:	f001 fb94 	bl	8004154 <vTaskStartScheduler>
      stat = osOK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e002      	b.n	8002a38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000100 	.word	0x20000100

08002a48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b092      	sub	sp, #72	@ 0x48
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a58:	f3ef 8305 	mrs	r3, IPSR
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 8094 	bne.w	8002b8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 808d 	bne.w	8002b8e <osThreadNew+0x146>
 8002a74:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <osThreadNew+0x150>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d106      	bne.n	8002a8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a80:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 8082 	bne.w	8002b8e <osThreadNew+0x146>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d07e      	beq.n	8002b8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a94:	2318      	movs	r3, #24
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002a98:	2300      	movs	r3, #0
 8002a9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a9c:	f107 031b 	add.w	r3, r7, #27
 8002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d045      	beq.n	8002b3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <osThreadNew+0x74>
        name = attr->name;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <osThreadNew+0x9a>
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	2b38      	cmp	r3, #56	@ 0x38
 8002ad4:	d805      	bhi.n	8002ae2 <osThreadNew+0x9a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <osThreadNew+0x9e>
        return (NULL);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e054      	b.n	8002b90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <osThreadNew+0xd4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b5b      	cmp	r3, #91	@ 0x5b
 8002b04:	d90a      	bls.n	8002b1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <osThreadNew+0xd4>
        mem = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b1a:	e010      	b.n	8002b3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10c      	bne.n	8002b3e <osThreadNew+0xf6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <osThreadNew+0xf6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <osThreadNew+0xf6>
          mem = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b38:	e001      	b.n	8002b3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d110      	bne.n	8002b66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b4c:	9202      	str	r2, [sp, #8]
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b58:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f001 f95e 	bl	8003e1c <xTaskCreateStatic>
 8002b60:	4603      	mov	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e013      	b.n	8002b8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d110      	bne.n	8002b8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f001 f9ab 	bl	8003eda <xTaskCreate>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <osThreadNew+0x146>
          hTask = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3738      	adds	r7, #56	@ 0x38
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000100 	.word	0x20000100

08002b9c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	@ 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba8:	f3ef 8305 	mrs	r3, IPSR
 8002bac:	613b      	str	r3, [r7, #16]
  return(result);
 8002bae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 8085 	bne.w	8002cc0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d17e      	bne.n	8002cc0 <osMutexNew+0x124>
 8002bc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <osMutexNew+0x130>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d105      	bne.n	8002bd6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bca:	f3ef 8311 	mrs	r3, BASEPRI
 8002bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d174      	bne.n	8002cc0 <osMutexNew+0x124>
    if (attr != NULL) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	e001      	b.n	8002be8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <osMutexNew+0x5c>
      rmtx = 1U;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e001      	b.n	8002bfc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d15c      	bne.n	8002cc0 <osMutexNew+0x124>
      mem = -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <osMutexNew+0x8c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c20:	d902      	bls.n	8002c28 <osMutexNew+0x8c>
          mem = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e00c      	b.n	8002c42 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <osMutexNew+0xa6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <osMutexNew+0xa6>
            mem = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e001      	b.n	8002c42 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d112      	bne.n	8002c6e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4619      	mov	r1, r3
 8002c54:	2004      	movs	r0, #4
 8002c56:	f000 fb45 	bl	80032e4 <xQueueCreateMutexStatic>
 8002c5a:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c5c:	e016      	b.n	8002c8c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4619      	mov	r1, r3
 8002c64:	2001      	movs	r0, #1
 8002c66:	f000 fb3d 	bl	80032e4 <xQueueCreateMutexStatic>
 8002c6a:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c6c:	e00e      	b.n	8002c8c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002c7a:	2004      	movs	r0, #4
 8002c7c:	f000 fb1a 	bl	80032b4 <xQueueCreateMutex>
 8002c80:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c82:	e003      	b.n	8002c8c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002c84:	2001      	movs	r0, #1
 8002c86:	f000 fb15 	bl	80032b4 <xQueueCreateMutex>
 8002c8a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00c      	beq.n	8002cac <osMutexNew+0x110>
        if (attr != NULL) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <osMutexNew+0x104>
          name = attr->name;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e001      	b.n	8002ca4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002ca4:	6979      	ldr	r1, [r7, #20]
 8002ca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ca8:	f001 f85c 	bl	8003d64 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <osMutexNew+0x124>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3728      	adds	r7, #40	@ 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000100 	.word	0x20000100

08002cd0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cee:	f3ef 8305 	mrs	r3, IPSR
 8002cf2:	613b      	str	r3, [r7, #16]
  return(result);
 8002cf4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <osMutexAcquire+0x4a>
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <osMutexAcquire+0xb8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d109      	bne.n	8002d22 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8002d1a:	f06f 0305 	mvn.w	r3, #5
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e02c      	b.n	8002d7c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8002d28:	f06f 0303 	mvn.w	r3, #3
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e025      	b.n	8002d7c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d011      	beq.n	8002d5a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	69b8      	ldr	r0, [r7, #24]
 8002d3a:	f000 fb23 	bl	8003384 <xQueueTakeMutexRecursive>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d01b      	beq.n	8002d7c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8002d4a:	f06f 0301 	mvn.w	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e014      	b.n	8002d7c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002d52:	f06f 0302 	mvn.w	r3, #2
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	e010      	b.n	8002d7c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	69b8      	ldr	r0, [r7, #24]
 8002d5e:	f000 fdc9 	bl	80038f4 <xQueueSemaphoreTake>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d009      	beq.n	8002d7c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8002d6e:	f06f 0301 	mvn.w	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	e002      	b.n	8002d7c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002d76:	f06f 0302 	mvn.w	r3, #2
 8002d7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000100 	.word	0x20000100

08002d8c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002da8:	f3ef 8305 	mrs	r3, IPSR
 8002dac:	613b      	str	r3, [r7, #16]
  return(result);
 8002dae:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10f      	bne.n	8002dd4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <osMutexRelease+0x48>
 8002dc0:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <osMutexRelease+0x9c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d109      	bne.n	8002ddc <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dc8:	f3ef 8311 	mrs	r3, BASEPRI
 8002dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <osMutexRelease+0x50>
    stat = osErrorISR;
 8002dd4:	f06f 0305 	mvn.w	r3, #5
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e01f      	b.n	8002e1c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8002de2:	f06f 0303 	mvn.w	r3, #3
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	e018      	b.n	8002e1c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	f000 fa92 	bl	800331a <xQueueGiveMutexRecursive>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d00f      	beq.n	8002e1c <osMutexRelease+0x90>
        stat = osErrorResource;
 8002dfc:	f06f 0302 	mvn.w	r3, #2
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e00b      	b.n	8002e1c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002e04:	2300      	movs	r3, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	69b8      	ldr	r0, [r7, #24]
 8002e0c:	f000 faf2 	bl	80033f4 <xQueueGenericSend>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d002      	beq.n	8002e1c <osMutexRelease+0x90>
        stat = osErrorResource;
 8002e16:	f06f 0302 	mvn.w	r3, #2
 8002e1a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000100 	.word	0x20000100

08002e2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a06      	ldr	r2, [pc, #24]	@ (8002e54 <vApplicationGetIdleTaskMemory+0x28>)
 8002e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	20000104 	.word	0x20000104
 8002e58:	20000160 	.word	0x20000160

08002e5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	@ (8002e88 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4a06      	ldr	r2, [pc, #24]	@ (8002e8c <vApplicationGetTimerTaskMemory+0x30>)
 8002e72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000360 	.word	0x20000360
 8002e8c:	200003bc 	.word	0x200003bc

08002e90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0208 	add.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0208 	add.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d103      	bne.n	8002f4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e00c      	b.n	8002f66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3308      	adds	r3, #8
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e002      	b.n	8002f5a <vListInsert+0x2e>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d2f6      	bcs.n	8002f54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6852      	ldr	r2, [r2, #4]
 8002fbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d103      	bne.n	8002fd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
	...

08002ff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800301c:	f002 fafe 	bl	800561c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	441a      	add	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	3b01      	subs	r3, #1
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	441a      	add	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	22ff      	movs	r2, #255	@ 0xff
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	22ff      	movs	r2, #255	@ 0xff
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01a      	beq.n	80030b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3310      	adds	r3, #16
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fafa 	bl	8004678 <xTaskRemoveFromEventList>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d012      	beq.n	80030b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <xQueueGenericReset+0xd0>)
 800308c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	e009      	b.n	80030b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3310      	adds	r3, #16
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fef5 	bl	8002e90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3324      	adds	r3, #36	@ 0x24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fef0 	bl	8002e90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030b0:	f002 fae4 	bl	800567c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030b4:	2301      	movs	r3, #1
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000ed04 	.word	0xe000ed04

080030c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08e      	sub	sp, #56	@ 0x38
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	e7fd      	b.n	800310a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <xQueueGenericCreateStatic+0x56>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <xQueueGenericCreateStatic+0x5a>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <xQueueGenericCreateStatic+0x5c>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	623b      	str	r3, [r7, #32]
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <xQueueGenericCreateStatic+0x84>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <xQueueGenericCreateStatic+0x88>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <xQueueGenericCreateStatic+0x8a>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	61fb      	str	r3, [r7, #28]
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	e7fd      	b.n	8003166 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800316a:	2350      	movs	r3, #80	@ 0x50
 800316c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b50      	cmp	r3, #80	@ 0x50
 8003172:	d00b      	beq.n	800318c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	61bb      	str	r3, [r7, #24]
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800319e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80031a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4613      	mov	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f844 	bl	800323a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3730      	adds	r7, #48	@ 0x30
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	@ 0x28
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	613b      	str	r3, [r7, #16]
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e004      	b.n	80031fe <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	fb02 f303 	mul.w	r3, r2, r3
 80031fc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3350      	adds	r3, #80	@ 0x50
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fb0c 	bl	8005820 <pvPortMalloc>
 8003208:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00f      	beq.n	8003230 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	3350      	adds	r3, #80	@ 0x50
 8003214:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800321e:	79fa      	ldrb	r2, [r7, #7]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f805 	bl	800323a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003230:	69bb      	ldr	r3, [r7, #24]
	}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e002      	b.n	800325c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003268:	2101      	movs	r1, #1
 800326a:	69b8      	ldr	r0, [r7, #24]
 800326c:	f7ff fec0 	bl	8002ff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80032a0:	2300      	movs	r3, #0
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8a4 	bl	80033f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6939      	ldr	r1, [r7, #16]
 80032cc:	6978      	ldr	r0, [r7, #20]
 80032ce:	f7ff ff75 	bl	80031bc <xQueueGenericCreate>
 80032d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ffd3 	bl	8003280 <prvInitialiseMutex>

		return pxNewQueue;
 80032da:	68fb      	ldr	r3, [r7, #12]
	}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032f0:	2301      	movs	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	6939      	ldr	r1, [r7, #16]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff fede 	bl	80030c4 <xQueueGenericCreateStatic>
 8003308:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff ffb8 	bl	8003280 <prvInitialiseMutex>

		return pxNewQueue;
 8003310:	68fb      	ldr	r3, [r7, #12]
	}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	60fb      	str	r3, [r7, #12]
}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685c      	ldr	r4, [r3, #4]
 8003348:	f001 fb5a 	bl	8004a00 <xTaskGetCurrentTaskHandle>
 800334c:	4603      	mov	r3, r0
 800334e:	429c      	cmp	r4, r3
 8003350:	d111      	bne.n	8003376 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003364:	2300      	movs	r3, #0
 8003366:	2200      	movs	r2, #0
 8003368:	2100      	movs	r1, #0
 800336a:	6938      	ldr	r0, [r7, #16]
 800336c:	f000 f842 	bl	80033f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003370:	2301      	movs	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e001      	b.n	800337a <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800337a:	697b      	ldr	r3, [r7, #20]
	}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}

08003384 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	60fb      	str	r3, [r7, #12]
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	685c      	ldr	r4, [r3, #4]
 80033b4:	f001 fb24 	bl	8004a00 <xTaskGetCurrentTaskHandle>
 80033b8:	4603      	mov	r3, r0
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d107      	bne.n	80033ce <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00c      	b.n	80033e8 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80033ce:	6839      	ldr	r1, [r7, #0]
 80033d0:	6938      	ldr	r0, [r7, #16]
 80033d2:	f000 fa8f 	bl	80038f4 <xQueueSemaphoreTake>
 80033d6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80033e8:	697b      	ldr	r3, [r7, #20]
	}
 80033ea:	4618      	mov	r0, r3
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
	...

080033f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	@ 0x38
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003402:	2300      	movs	r3, #0
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xQueueGenericSend+0x34>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <xQueueGenericSend+0x42>
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <xQueueGenericSend+0x46>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <xQueueGenericSend+0x48>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <xQueueGenericSend+0x64>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x72>
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <xQueueGenericSend+0x76>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSend+0x78>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xQueueGenericSend+0x94>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003488:	f001 fac8 	bl	8004a1c <xTaskGetSchedulerState>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <xQueueGenericSend+0xa4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <xQueueGenericSend+0xa8>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <xQueueGenericSend+0xaa>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <xQueueGenericSend+0xc6>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	61fb      	str	r3, [r7, #28]
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034ba:	f002 f8af 	bl	800561c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <xQueueGenericSend+0xdc>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d129      	bne.n	8003524 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034d6:	f000 fb34 	bl	8003b42 <prvCopyDataToQueue>
 80034da:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d010      	beq.n	8003506 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	3324      	adds	r3, #36	@ 0x24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f8c5 	bl	8004678 <xTaskRemoveFromEventList>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034f4:	4b3f      	ldr	r3, [pc, #252]	@ (80035f4 <xQueueGenericSend+0x200>)
 80034f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	e00a      	b.n	800351c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800350c:	4b39      	ldr	r3, [pc, #228]	@ (80035f4 <xQueueGenericSend+0x200>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800351c:	f002 f8ae 	bl	800567c <vPortExitCritical>
				return pdPASS;
 8003520:	2301      	movs	r3, #1
 8003522:	e063      	b.n	80035ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800352a:	f002 f8a7 	bl	800567c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800352e:	2300      	movs	r3, #0
 8003530:	e05c      	b.n	80035ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4618      	mov	r0, r3
 800353e:	f001 f8ff 	bl	8004740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003546:	f002 f899 	bl	800567c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800354a:	f000 fe6b 	bl	8004224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800354e:	f002 f865 	bl	800561c <vPortEnterCritical>
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003558:	b25b      	sxtb	r3, r3
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d103      	bne.n	8003568 <xQueueGenericSend+0x174>
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356e:	b25b      	sxtb	r3, r3
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d103      	bne.n	800357e <xQueueGenericSend+0x18a>
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800357e:	f002 f87d 	bl	800567c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003582:	1d3a      	adds	r2, r7, #4
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f001 f8ee 	bl	800476c <xTaskCheckForTimeOut>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d124      	bne.n	80035e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003598:	f000 fbcb 	bl	8003d32 <prvIsQueueFull>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d018      	beq.n	80035d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	3310      	adds	r3, #16
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 f812 	bl	80045d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035b2:	f000 fb56 	bl	8003c62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035b6:	f000 fe43 	bl	8004240 <xTaskResumeAll>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f af7c 	bne.w	80034ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <xQueueGenericSend+0x200>)
 80035c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	e772      	b.n	80034ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035d6:	f000 fb44 	bl	8003c62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035da:	f000 fe31 	bl	8004240 <xTaskResumeAll>
 80035de:	e76c      	b.n	80034ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e2:	f000 fb3e 	bl	8003c62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e6:	f000 fe2b 	bl	8004240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035ea:	2300      	movs	r3, #0
		}
	}
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3738      	adds	r7, #56	@ 0x38
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	e000ed04 	.word	0xe000ed04

080035f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	@ 0x38
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <xQueueGenericSendFromISR+0x3e>
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xQueueGenericSendFromISR+0x42>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <xQueueGenericSendFromISR+0x44>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	623b      	str	r3, [r7, #32]
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d103      	bne.n	8003666 <xQueueGenericSendFromISR+0x6e>
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <xQueueGenericSendFromISR+0x72>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <xQueueGenericSendFromISR+0x74>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61fb      	str	r3, [r7, #28]
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003688:	f002 f88a 	bl	80057a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800368c:	f3ef 8211 	mrs	r2, BASEPRI
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61ba      	str	r2, [r7, #24]
 80036a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <xQueueGenericSendFromISR+0xc2>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d12c      	bne.n	8003714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036ca:	f000 fa3a 	bl	8003b42 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d112      	bne.n	80036fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	3324      	adds	r3, #36	@ 0x24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 ffc7 	bl	8004678 <xTaskRemoveFromEventList>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e007      	b.n	800370e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003702:	3301      	adds	r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	b25a      	sxtb	r2, r3
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800370e:	2301      	movs	r3, #1
 8003710:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003712:	e001      	b.n	8003718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003714:	2300      	movs	r3, #0
 8003716:	637b      	str	r3, [r7, #52]	@ 0x34
 8003718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003726:	4618      	mov	r0, r3
 8003728:	3738      	adds	r7, #56	@ 0x38
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08c      	sub	sp, #48	@ 0x30
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <xQueueReceive+0x32>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	623b      	str	r3, [r7, #32]
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <xQueueReceive+0x40>
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <xQueueReceive+0x44>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <xQueueReceive+0x46>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <xQueueReceive+0x62>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	61fb      	str	r3, [r7, #28]
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	e7fd      	b.n	800378e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003792:	f001 f943 	bl	8004a1c <xTaskGetSchedulerState>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <xQueueReceive+0x72>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <xQueueReceive+0x76>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <xQueueReceive+0x78>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <xQueueReceive+0x94>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	61bb      	str	r3, [r7, #24]
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	e7fd      	b.n	80037c0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037c4:	f001 ff2a 	bl	800561c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037d8:	f000 fa1d 	bl	8003c16 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00f      	beq.n	800380c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	3310      	adds	r3, #16
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ff41 	bl	8004678 <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037fc:	4b3c      	ldr	r3, [pc, #240]	@ (80038f0 <xQueueReceive+0x1c0>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800380c:	f001 ff36 	bl	800567c <vPortExitCritical>
				return pdPASS;
 8003810:	2301      	movs	r3, #1
 8003812:	e069      	b.n	80038e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800381a:	f001 ff2f 	bl	800567c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800381e:	2300      	movs	r3, #0
 8003820:	e062      	b.n	80038e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	4618      	mov	r0, r3
 800382e:	f000 ff87 	bl	8004740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003836:	f001 ff21 	bl	800567c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800383a:	f000 fcf3 	bl	8004224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800383e:	f001 feed 	bl	800561c <vPortEnterCritical>
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003848:	b25b      	sxtb	r3, r3
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d103      	bne.n	8003858 <xQueueReceive+0x128>
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800385e:	b25b      	sxtb	r3, r3
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d103      	bne.n	800386e <xQueueReceive+0x13e>
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800386e:	f001 ff05 	bl	800567c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003872:	1d3a      	adds	r2, r7, #4
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f000 ff76 	bl	800476c <xTaskCheckForTimeOut>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d123      	bne.n	80038ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003888:	f000 fa3d 	bl	8003d06 <prvIsQueueEmpty>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d017      	beq.n	80038c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	3324      	adds	r3, #36	@ 0x24
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fe9a 	bl	80045d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a2:	f000 f9de 	bl	8003c62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038a6:	f000 fccb 	bl	8004240 <xTaskResumeAll>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d189      	bne.n	80037c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038b0:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <xQueueReceive+0x1c0>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	e780      	b.n	80037c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c4:	f000 f9cd 	bl	8003c62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038c8:	f000 fcba 	bl	8004240 <xTaskResumeAll>
 80038cc:	e77a      	b.n	80037c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d0:	f000 f9c7 	bl	8003c62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038d4:	f000 fcb4 	bl	8004240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038da:	f000 fa14 	bl	8003d06 <prvIsQueueEmpty>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f43f af6f 	beq.w	80037c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3730      	adds	r7, #48	@ 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	e000ed04 	.word	0xe000ed04

080038f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	@ 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003906:	2300      	movs	r3, #0
 8003908:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	623b      	str	r3, [r7, #32]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	61fb      	str	r3, [r7, #28]
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003948:	f001 f868 	bl	8004a1c <xTaskGetSchedulerState>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <xQueueSemaphoreTake+0x64>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <xQueueSemaphoreTake+0x68>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <xQueueSemaphoreTake+0x6a>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	61bb      	str	r3, [r7, #24]
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800397a:	f001 fe4f 	bl	800561c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d024      	beq.n	80039d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d104      	bne.n	80039a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800399a:	f001 f9c3 	bl	8004d24 <pvTaskIncrementMutexHeldCount>
 800399e:	4602      	mov	r2, r0
 80039a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00f      	beq.n	80039cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	3310      	adds	r3, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fe61 	bl	8004678 <xTaskRemoveFromEventList>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039bc:	4b54      	ldr	r3, [pc, #336]	@ (8003b10 <xQueueSemaphoreTake+0x21c>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039cc:	f001 fe56 	bl	800567c <vPortExitCritical>
				return pdPASS;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e098      	b.n	8003b06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d112      	bne.n	8003a00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	617b      	str	r3, [r7, #20]
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80039f8:	f001 fe40 	bl	800567c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e082      	b.n	8003b06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a06:	f107 030c 	add.w	r3, r7, #12
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fe98 	bl	8004740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a14:	f001 fe32 	bl	800567c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a18:	f000 fc04 	bl	8004224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a1c:	f001 fdfe 	bl	800561c <vPortEnterCritical>
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d103      	bne.n	8003a36 <xQueueSemaphoreTake+0x142>
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d103      	bne.n	8003a4c <xQueueSemaphoreTake+0x158>
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a4c:	f001 fe16 	bl	800567c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a50:	463a      	mov	r2, r7
 8003a52:	f107 030c 	add.w	r3, r7, #12
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fe87 	bl	800476c <xTaskCheckForTimeOut>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d132      	bne.n	8003aca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a66:	f000 f94e 	bl	8003d06 <prvIsQueueEmpty>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d026      	beq.n	8003abe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003a78:	f001 fdd0 	bl	800561c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 ffe9 	bl	8004a58 <xTaskPriorityInherit>
 8003a86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003a88:	f001 fdf8 	bl	800567c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8e:	3324      	adds	r3, #36	@ 0x24
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fd9d 	bl	80045d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a9c:	f000 f8e1 	bl	8003c62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003aa0:	f000 fbce 	bl	8004240 <xTaskResumeAll>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f47f af67 	bne.w	800397a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <xQueueSemaphoreTake+0x21c>)
 8003aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	e75d      	b.n	800397a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ac0:	f000 f8cf 	bl	8003c62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ac4:	f000 fbbc 	bl	8004240 <xTaskResumeAll>
 8003ac8:	e757      	b.n	800397a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003aca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003acc:	f000 f8c9 	bl	8003c62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad0:	f000 fbb6 	bl	8004240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ad6:	f000 f916 	bl	8003d06 <prvIsQueueEmpty>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f43f af4c 	beq.w	800397a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003ae8:	f001 fd98 	bl	800561c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003aec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003aee:	f000 f811 	bl	8003b14 <prvGetDisinheritPriorityAfterTimeout>
 8003af2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f88a 	bl	8004c14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b00:	f001 fdbc 	bl	800567c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3738      	adds	r7, #56	@ 0x38
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e001      	b.n	8003b36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b36:	68fb      	ldr	r3, [r7, #12]
	}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d14d      	bne.n	8003c04 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ffe1 	bl	8004b34 <xTaskPriorityDisinherit>
 8003b72:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	e043      	b.n	8003c04 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d119      	bne.n	8003bb6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6898      	ldr	r0, [r3, #8]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	f002 f851 	bl	8005c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	441a      	add	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d32b      	bcc.n	8003c04 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	e026      	b.n	8003c04 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68d8      	ldr	r0, [r3, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	f002 f837 	bl	8005c34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	425b      	negs	r3, r3
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d207      	bcs.n	8003bf2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	425b      	negs	r3, r3
 8003bec:	441a      	add	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d105      	bne.n	8003c04 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c0c:	697b      	ldr	r3, [r7, #20]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d018      	beq.n	8003c5a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d303      	bcc.n	8003c4a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68d9      	ldr	r1, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	461a      	mov	r2, r3
 8003c54:	6838      	ldr	r0, [r7, #0]
 8003c56:	f001 ffed 	bl	8005c34 <memcpy>
	}
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c6a:	f001 fcd7 	bl	800561c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c74:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c76:	e011      	b.n	8003c9c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3324      	adds	r3, #36	@ 0x24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fcf7 	bl	8004678 <xTaskRemoveFromEventList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c90:	f000 fdd0 	bl	8004834 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dce9      	bgt.n	8003c78 <prvUnlockQueue+0x16>
 8003ca4:	e000      	b.n	8003ca8 <prvUnlockQueue+0x46>
					break;
 8003ca6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	22ff      	movs	r2, #255	@ 0xff
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cb0:	f001 fce4 	bl	800567c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cb4:	f001 fcb2 	bl	800561c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cbe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cc0:	e011      	b.n	8003ce6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3310      	adds	r3, #16
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fcd2 	bl	8004678 <xTaskRemoveFromEventList>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cda:	f000 fdab 	bl	8004834 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cde:	7bbb      	ldrb	r3, [r7, #14]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dce9      	bgt.n	8003cc2 <prvUnlockQueue+0x60>
 8003cee:	e000      	b.n	8003cf2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cf0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	22ff      	movs	r2, #255	@ 0xff
 8003cf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cfa:	f001 fcbf 	bl	800567c <vPortExitCritical>
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d0e:	f001 fc85 	bl	800561c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e001      	b.n	8003d24 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d24:	f001 fcaa 	bl	800567c <vPortExitCritical>

	return xReturn;
 8003d28:	68fb      	ldr	r3, [r7, #12]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d3a:	f001 fc6f 	bl	800561c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d102      	bne.n	8003d50 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e001      	b.n	8003d54 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d54:	f001 fc92 	bl	800567c <vPortExitCritical>

	return xReturn;
 8003d58:	68fb      	ldr	r3, [r7, #12]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e014      	b.n	8003d9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d74:	4a0e      	ldr	r2, [pc, #56]	@ (8003db0 <vQueueAddToRegistry+0x4c>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d80:	490b      	ldr	r1, [pc, #44]	@ (8003db0 <vQueueAddToRegistry+0x4c>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d8a:	4a09      	ldr	r2, [pc, #36]	@ (8003db0 <vQueueAddToRegistry+0x4c>)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d96:	e006      	b.n	8003da6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b07      	cmp	r3, #7
 8003da2:	d9e7      	bls.n	8003d74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	200007bc 	.word	0x200007bc

08003db4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dc4:	f001 fc2a 	bl	800561c <vPortEnterCritical>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d103      	bne.n	8003dde <vQueueWaitForMessageRestricted+0x2a>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003de4:	b25b      	sxtb	r3, r3
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d103      	bne.n	8003df4 <vQueueWaitForMessageRestricted+0x40>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003df4:	f001 fc42 	bl	800567c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3324      	adds	r3, #36	@ 0x24
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fc09 	bl	8004620 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	f7ff ff27 	bl	8003c62 <prvUnlockQueue>
	}
 8003e14:	bf00      	nop
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	@ 0x38
 8003e20:	af04      	add	r7, sp, #16
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	623b      	str	r3, [r7, #32]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	61fb      	str	r3, [r7, #28]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e66:	235c      	movs	r3, #92	@ 0x5c
 8003e68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e6e:	d00b      	beq.n	8003e88 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	61bb      	str	r3, [r7, #24]
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01e      	beq.n	8003ecc <xTaskCreateStatic+0xb0>
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9303      	str	r3, [sp, #12]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	9302      	str	r3, [sp, #8]
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f850 	bl	8003f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ec6:	f000 f8d5 	bl	8004074 <prvAddNewTaskToReadyList>
 8003eca:	e001      	b.n	8003ed0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ed0:	697b      	ldr	r3, [r7, #20]
	}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3728      	adds	r7, #40	@ 0x28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08c      	sub	sp, #48	@ 0x30
 8003ede:	af04      	add	r7, sp, #16
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 fc96 	bl	8005820 <pvPortMalloc>
 8003ef4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003efc:	205c      	movs	r0, #92	@ 0x5c
 8003efe:	f001 fc8f 	bl	8005820 <pvPortMalloc>
 8003f02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f10:	e005      	b.n	8003f1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f001 fd4c 	bl	80059b0 <vPortFree>
 8003f18:	e001      	b.n	8003f1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f80e 	bl	8003f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f48:	69f8      	ldr	r0, [r7, #28]
 8003f4a:	f000 f893 	bl	8004074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e002      	b.n	8003f5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	21a5      	movs	r1, #165	@ 0xa5
 8003f7e:	f001 fe2d 	bl	8005bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	617b      	str	r3, [r7, #20]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	e012      	b.n	8003fea <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	7819      	ldrb	r1, [r3, #0]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3334      	adds	r3, #52	@ 0x34
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d006      	beq.n	8003ff2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d9e9      	bls.n	8003fc4 <prvInitialiseNewTask+0x60>
 8003ff0:	e000      	b.n	8003ff4 <prvInitialiseNewTask+0x90>
		{
			break;
 8003ff2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	2b37      	cmp	r3, #55	@ 0x37
 8004000:	d901      	bls.n	8004006 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004002:	2337      	movs	r3, #55	@ 0x37
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004010:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401a:	3304      	adds	r3, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe ff56 	bl	8002ece <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	3318      	adds	r3, #24
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe ff51 	bl	8002ece <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004030:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800403c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004040:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	2200      	movs	r2, #0
 8004046:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	69b8      	ldr	r0, [r7, #24]
 8004056:	f001 f9ed 	bl	8005434 <pxPortInitialiseStack>
 800405a:	4602      	mov	r2, r0
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800406c:	bf00      	nop
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800407c:	f001 face 	bl	800561c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004080:	4b2d      	ldr	r3, [pc, #180]	@ (8004138 <prvAddNewTaskToReadyList+0xc4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a2c      	ldr	r2, [pc, #176]	@ (8004138 <prvAddNewTaskToReadyList+0xc4>)
 8004088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800408a:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <prvAddNewTaskToReadyList+0xc8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004092:	4a2a      	ldr	r2, [pc, #168]	@ (800413c <prvAddNewTaskToReadyList+0xc8>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004098:	4b27      	ldr	r3, [pc, #156]	@ (8004138 <prvAddNewTaskToReadyList+0xc4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d110      	bne.n	80040c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040a0:	f000 fbec 	bl	800487c <prvInitialiseTaskLists>
 80040a4:	e00d      	b.n	80040c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040a6:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <prvAddNewTaskToReadyList+0xcc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040ae:	4b23      	ldr	r3, [pc, #140]	@ (800413c <prvAddNewTaskToReadyList+0xc8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d802      	bhi.n	80040c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040bc:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <prvAddNewTaskToReadyList+0xc8>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040c2:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <prvAddNewTaskToReadyList+0xd0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004144 <prvAddNewTaskToReadyList+0xd0>)
 80040ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <prvAddNewTaskToReadyList+0xd0>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <prvAddNewTaskToReadyList+0xd4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d903      	bls.n	80040e8 <prvAddNewTaskToReadyList+0x74>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <prvAddNewTaskToReadyList+0xd4>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a15      	ldr	r2, [pc, #84]	@ (800414c <prvAddNewTaskToReadyList+0xd8>)
 80040f6:	441a      	add	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f7fe fef1 	bl	8002ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004104:	f001 faba 	bl	800567c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004108:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <prvAddNewTaskToReadyList+0xcc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00e      	beq.n	800412e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvAddNewTaskToReadyList+0xc8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	429a      	cmp	r2, r3
 800411c:	d207      	bcs.n	800412e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800411e:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <prvAddNewTaskToReadyList+0xdc>)
 8004120:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000cd0 	.word	0x20000cd0
 800413c:	200007fc 	.word	0x200007fc
 8004140:	20000cdc 	.word	0x20000cdc
 8004144:	20000cec 	.word	0x20000cec
 8004148:	20000cd8 	.word	0x20000cd8
 800414c:	20000800 	.word	0x20000800
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	@ 0x28
 8004158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004162:	463a      	mov	r2, r7
 8004164:	1d39      	adds	r1, r7, #4
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fe5e 	bl	8002e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	9202      	str	r2, [sp, #8]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	460a      	mov	r2, r1
 8004182:	4922      	ldr	r1, [pc, #136]	@ (800420c <vTaskStartScheduler+0xb8>)
 8004184:	4822      	ldr	r0, [pc, #136]	@ (8004210 <vTaskStartScheduler+0xbc>)
 8004186:	f7ff fe49 	bl	8003e1c <xTaskCreateStatic>
 800418a:	4603      	mov	r3, r0
 800418c:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <vTaskStartScheduler+0xc0>)
 800418e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004190:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <vTaskStartScheduler+0xc0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e001      	b.n	80041a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041a8:	f000 fe24 	bl	8004df4 <xTimerCreateTimerTask>
 80041ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d116      	bne.n	80041e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	613b      	str	r3, [r7, #16]
}
 80041c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041c8:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <vTaskStartScheduler+0xc4>)
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041d0:	4b12      	ldr	r3, [pc, #72]	@ (800421c <vTaskStartScheduler+0xc8>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041d6:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <vTaskStartScheduler+0xcc>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041dc:	f001 f9ac 	bl	8005538 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041e0:	e00f      	b.n	8004202 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d10b      	bne.n	8004202 <vTaskStartScheduler+0xae>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	60fb      	str	r3, [r7, #12]
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <vTaskStartScheduler+0xaa>
}
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	08005cb8 	.word	0x08005cb8
 8004210:	0800484d 	.word	0x0800484d
 8004214:	20000cf4 	.word	0x20000cf4
 8004218:	20000cf0 	.word	0x20000cf0
 800421c:	20000cdc 	.word	0x20000cdc
 8004220:	20000cd4 	.word	0x20000cd4

08004224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <vTaskSuspendAll+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	4a03      	ldr	r2, [pc, #12]	@ (800423c <vTaskSuspendAll+0x18>)
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000cf8 	.word	0x20000cf8

08004240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800424e:	4b42      	ldr	r3, [pc, #264]	@ (8004358 <xTaskResumeAll+0x118>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <xTaskResumeAll+0x2e>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	603b      	str	r3, [r7, #0]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800426e:	f001 f9d5 	bl	800561c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004272:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <xTaskResumeAll+0x118>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3b01      	subs	r3, #1
 8004278:	4a37      	ldr	r2, [pc, #220]	@ (8004358 <xTaskResumeAll+0x118>)
 800427a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427c:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <xTaskResumeAll+0x118>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d162      	bne.n	800434a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004284:	4b35      	ldr	r3, [pc, #212]	@ (800435c <xTaskResumeAll+0x11c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05e      	beq.n	800434a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800428c:	e02f      	b.n	80042ee <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800428e:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <xTaskResumeAll+0x120>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3318      	adds	r3, #24
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fe7e 	bl	8002f9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fe79 	bl	8002f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004364 <xTaskResumeAll+0x124>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d903      	bls.n	80042be <xTaskResumeAll+0x7e>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004364 <xTaskResumeAll+0x124>)
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4a27      	ldr	r2, [pc, #156]	@ (8004368 <xTaskResumeAll+0x128>)
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7fe fe06 	bl	8002ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	4b23      	ldr	r3, [pc, #140]	@ (800436c <xTaskResumeAll+0x12c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80042e8:	4b21      	ldr	r3, [pc, #132]	@ (8004370 <xTaskResumeAll+0x130>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004360 <xTaskResumeAll+0x120>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cb      	bne.n	800428e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042fc:	f000 fb5c 	bl	80049b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004300:	4b1c      	ldr	r3, [pc, #112]	@ (8004374 <xTaskResumeAll+0x134>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d010      	beq.n	800432e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800430c:	f000 f844 	bl	8004398 <xTaskIncrementTick>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004316:	4b16      	ldr	r3, [pc, #88]	@ (8004370 <xTaskResumeAll+0x130>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f1      	bne.n	800430c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004328:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <xTaskResumeAll+0x134>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <xTaskResumeAll+0x130>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <xTaskResumeAll+0x138>)
 800433c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f001 f997 	bl	800567c <vPortExitCritical>

	return xAlreadyYielded;
 800434e:	68bb      	ldr	r3, [r7, #8]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000cf8 	.word	0x20000cf8
 800435c:	20000cd0 	.word	0x20000cd0
 8004360:	20000c90 	.word	0x20000c90
 8004364:	20000cd8 	.word	0x20000cd8
 8004368:	20000800 	.word	0x20000800
 800436c:	200007fc 	.word	0x200007fc
 8004370:	20000ce4 	.word	0x20000ce4
 8004374:	20000ce0 	.word	0x20000ce0
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <xTaskGetTickCount+0x18>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	20000cd4 	.word	0x20000cd4

08004398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a2:	4b52      	ldr	r3, [pc, #328]	@ (80044ec <xTaskIncrementTick+0x154>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 808f 	bne.w	80044ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043ac:	4b50      	ldr	r3, [pc, #320]	@ (80044f0 <xTaskIncrementTick+0x158>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043b4:	4a4e      	ldr	r2, [pc, #312]	@ (80044f0 <xTaskIncrementTick+0x158>)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d121      	bne.n	8004404 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80043c0:	4b4c      	ldr	r3, [pc, #304]	@ (80044f4 <xTaskIncrementTick+0x15c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <xTaskIncrementTick+0x46>
 80043e2:	4b44      	ldr	r3, [pc, #272]	@ (80044f4 <xTaskIncrementTick+0x15c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	4b43      	ldr	r3, [pc, #268]	@ (80044f8 <xTaskIncrementTick+0x160>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a41      	ldr	r2, [pc, #260]	@ (80044f4 <xTaskIncrementTick+0x15c>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4a41      	ldr	r2, [pc, #260]	@ (80044f8 <xTaskIncrementTick+0x160>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <xTaskIncrementTick+0x164>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	4a3f      	ldr	r2, [pc, #252]	@ (80044fc <xTaskIncrementTick+0x164>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	f000 fada 	bl	80049b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004404:	4b3e      	ldr	r3, [pc, #248]	@ (8004500 <xTaskIncrementTick+0x168>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d34e      	bcc.n	80044ac <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <xTaskIncrementTick+0x15c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <xTaskIncrementTick+0x84>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <xTaskIncrementTick+0x86>
 800441c:	2300      	movs	r3, #0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004422:	4b37      	ldr	r3, [pc, #220]	@ (8004500 <xTaskIncrementTick+0x168>)
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	601a      	str	r2, [r3, #0]
					break;
 800442a:	e03f      	b.n	80044ac <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800442c:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <xTaskIncrementTick+0x15c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d203      	bcs.n	800444c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004444:	4a2e      	ldr	r2, [pc, #184]	@ (8004500 <xTaskIncrementTick+0x168>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6013      	str	r3, [r2, #0]
						break;
 800444a:	e02f      	b.n	80044ac <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3304      	adds	r3, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe fda3 	bl	8002f9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3318      	adds	r3, #24
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fd9a 	bl	8002f9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446c:	4b25      	ldr	r3, [pc, #148]	@ (8004504 <xTaskIncrementTick+0x16c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d903      	bls.n	800447c <xTaskIncrementTick+0xe4>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	4a22      	ldr	r2, [pc, #136]	@ (8004504 <xTaskIncrementTick+0x16c>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4a1f      	ldr	r2, [pc, #124]	@ (8004508 <xTaskIncrementTick+0x170>)
 800448a:	441a      	add	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7fe fd27 	bl	8002ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449c:	4b1b      	ldr	r3, [pc, #108]	@ (800450c <xTaskIncrementTick+0x174>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3b3      	bcc.n	800440e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044aa:	e7b0      	b.n	800440e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044ac:	4b17      	ldr	r3, [pc, #92]	@ (800450c <xTaskIncrementTick+0x174>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b2:	4915      	ldr	r1, [pc, #84]	@ (8004508 <xTaskIncrementTick+0x170>)
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d907      	bls.n	80044d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e004      	b.n	80044d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044ca:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <xTaskIncrementTick+0x178>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004510 <xTaskIncrementTick+0x178>)
 80044d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <xTaskIncrementTick+0x17c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80044dc:	2301      	movs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044e0:	697b      	ldr	r3, [r7, #20]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000cf8 	.word	0x20000cf8
 80044f0:	20000cd4 	.word	0x20000cd4
 80044f4:	20000c88 	.word	0x20000c88
 80044f8:	20000c8c 	.word	0x20000c8c
 80044fc:	20000ce8 	.word	0x20000ce8
 8004500:	20000cf0 	.word	0x20000cf0
 8004504:	20000cd8 	.word	0x20000cd8
 8004508:	20000800 	.word	0x20000800
 800450c:	200007fc 	.word	0x200007fc
 8004510:	20000ce0 	.word	0x20000ce0
 8004514:	20000ce4 	.word	0x20000ce4

08004518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800451e:	4b28      	ldr	r3, [pc, #160]	@ (80045c0 <vTaskSwitchContext+0xa8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004526:	4b27      	ldr	r3, [pc, #156]	@ (80045c4 <vTaskSwitchContext+0xac>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800452c:	e042      	b.n	80045b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800452e:	4b25      	ldr	r3, [pc, #148]	@ (80045c4 <vTaskSwitchContext+0xac>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004534:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <vTaskSwitchContext+0xb0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e011      	b.n	8004560 <vTaskSwitchContext+0x48>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <vTaskSwitchContext+0x42>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	607b      	str	r3, [r7, #4]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <vTaskSwitchContext+0x3e>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b01      	subs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	491a      	ldr	r1, [pc, #104]	@ (80045cc <vTaskSwitchContext+0xb4>)
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e3      	beq.n	800453c <vTaskSwitchContext+0x24>
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a13      	ldr	r2, [pc, #76]	@ (80045cc <vTaskSwitchContext+0xb4>)
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3308      	adds	r3, #8
 8004596:	429a      	cmp	r2, r3
 8004598:	d104      	bne.n	80045a4 <vTaskSwitchContext+0x8c>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4a09      	ldr	r2, [pc, #36]	@ (80045d0 <vTaskSwitchContext+0xb8>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4a06      	ldr	r2, [pc, #24]	@ (80045c8 <vTaskSwitchContext+0xb0>)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000cf8 	.word	0x20000cf8
 80045c4:	20000ce4 	.word	0x20000ce4
 80045c8:	20000cd8 	.word	0x20000cd8
 80045cc:	20000800 	.word	0x20000800
 80045d0:	200007fc 	.word	0x200007fc

080045d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <vTaskPlaceOnEventList+0x48>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3318      	adds	r3, #24
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fe fc91 	bl	8002f2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800460a:	2101      	movs	r1, #1
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	f000 fb9d 	bl	8004d4c <prvAddCurrentTaskToDelayedList>
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200007fc 	.word	0x200007fc

08004620 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	617b      	str	r3, [r7, #20]
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	e7fd      	b.n	8004646 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800464a:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <vTaskPlaceOnEventListRestricted+0x54>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3318      	adds	r3, #24
 8004650:	4619      	mov	r1, r3
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7fe fc47 	bl	8002ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	68b8      	ldr	r0, [r7, #8]
 8004668:	f000 fb70 	bl	8004d4c <prvAddCurrentTaskToDelayedList>
	}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	200007fc 	.word	0x200007fc

08004678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60fb      	str	r3, [r7, #12]
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3318      	adds	r3, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fc76 	bl	8002f9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <xTaskRemoveFromEventList+0xb0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11d      	bne.n	80046f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fc6d 	bl	8002f9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c6:	4b19      	ldr	r3, [pc, #100]	@ (800472c <xTaskRemoveFromEventList+0xb4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <xTaskRemoveFromEventList+0x5e>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d2:	4a16      	ldr	r2, [pc, #88]	@ (800472c <xTaskRemoveFromEventList+0xb4>)
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a13      	ldr	r2, [pc, #76]	@ (8004730 <xTaskRemoveFromEventList+0xb8>)
 80046e4:	441a      	add	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe fbfa 	bl	8002ee6 <vListInsertEnd>
 80046f2:	e005      	b.n	8004700 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	3318      	adds	r3, #24
 80046f8:	4619      	mov	r1, r3
 80046fa:	480e      	ldr	r0, [pc, #56]	@ (8004734 <xTaskRemoveFromEventList+0xbc>)
 80046fc:	f7fe fbf3 	bl	8002ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004704:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <xTaskRemoveFromEventList+0xc0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	429a      	cmp	r2, r3
 800470c:	d905      	bls.n	800471a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800470e:	2301      	movs	r3, #1
 8004710:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <xTaskRemoveFromEventList+0xc4>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e001      	b.n	800471e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800471e:	697b      	ldr	r3, [r7, #20]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000cf8 	.word	0x20000cf8
 800472c:	20000cd8 	.word	0x20000cd8
 8004730:	20000800 	.word	0x20000800
 8004734:	20000c90 	.word	0x20000c90
 8004738:	200007fc 	.word	0x200007fc
 800473c:	20000ce4 	.word	0x20000ce4

08004740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004748:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <vTaskInternalSetTimeOutState+0x24>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <vTaskInternalSetTimeOutState+0x28>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	605a      	str	r2, [r3, #4]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000ce8 	.word	0x20000ce8
 8004768:	20000cd4 	.word	0x20000cd4

0800476c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	613b      	str	r3, [r7, #16]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	e7fd      	b.n	80047ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80047b2:	f000 ff33 	bl	800561c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047b6:	4b1d      	ldr	r3, [pc, #116]	@ (800482c <xTaskCheckForTimeOut+0xc0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d102      	bne.n	80047d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	e023      	b.n	800481e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <xTaskCheckForTimeOut+0xc4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d007      	beq.n	80047f2 <xTaskCheckForTimeOut+0x86>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e015      	b.n	800481e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d20b      	bcs.n	8004814 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff99 	bl	8004740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e004      	b.n	800481e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800481e:	f000 ff2d 	bl	800567c <vPortExitCritical>

	return xReturn;
 8004822:	69fb      	ldr	r3, [r7, #28]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000cd4 	.word	0x20000cd4
 8004830:	20000ce8 	.word	0x20000ce8

08004834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004838:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <vTaskMissedYield+0x14>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000ce4 	.word	0x20000ce4

0800484c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004854:	f000 f852 	bl	80048fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004858:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <prvIdleTask+0x28>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d9f9      	bls.n	8004854 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <prvIdleTask+0x2c>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004870:	e7f0      	b.n	8004854 <prvIdleTask+0x8>
 8004872:	bf00      	nop
 8004874:	20000800 	.word	0x20000800
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	e00c      	b.n	80048a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4a12      	ldr	r2, [pc, #72]	@ (80048dc <prvInitialiseTaskLists+0x60>)
 8004894:	4413      	add	r3, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fafa 	bl	8002e90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3301      	adds	r3, #1
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b37      	cmp	r3, #55	@ 0x37
 80048a6:	d9ef      	bls.n	8004888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048a8:	480d      	ldr	r0, [pc, #52]	@ (80048e0 <prvInitialiseTaskLists+0x64>)
 80048aa:	f7fe faf1 	bl	8002e90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ae:	480d      	ldr	r0, [pc, #52]	@ (80048e4 <prvInitialiseTaskLists+0x68>)
 80048b0:	f7fe faee 	bl	8002e90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048b4:	480c      	ldr	r0, [pc, #48]	@ (80048e8 <prvInitialiseTaskLists+0x6c>)
 80048b6:	f7fe faeb 	bl	8002e90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048ba:	480c      	ldr	r0, [pc, #48]	@ (80048ec <prvInitialiseTaskLists+0x70>)
 80048bc:	f7fe fae8 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048c0:	480b      	ldr	r0, [pc, #44]	@ (80048f0 <prvInitialiseTaskLists+0x74>)
 80048c2:	f7fe fae5 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <prvInitialiseTaskLists+0x78>)
 80048c8:	4a05      	ldr	r2, [pc, #20]	@ (80048e0 <prvInitialiseTaskLists+0x64>)
 80048ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <prvInitialiseTaskLists+0x7c>)
 80048ce:	4a05      	ldr	r2, [pc, #20]	@ (80048e4 <prvInitialiseTaskLists+0x68>)
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000800 	.word	0x20000800
 80048e0:	20000c60 	.word	0x20000c60
 80048e4:	20000c74 	.word	0x20000c74
 80048e8:	20000c90 	.word	0x20000c90
 80048ec:	20000ca4 	.word	0x20000ca4
 80048f0:	20000cbc 	.word	0x20000cbc
 80048f4:	20000c88 	.word	0x20000c88
 80048f8:	20000c8c 	.word	0x20000c8c

080048fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004902:	e019      	b.n	8004938 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004904:	f000 fe8a 	bl	800561c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004908:	4b10      	ldr	r3, [pc, #64]	@ (800494c <prvCheckTasksWaitingTermination+0x50>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe fb41 	bl	8002f9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800491a:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <prvCheckTasksWaitingTermination+0x54>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	4a0b      	ldr	r2, [pc, #44]	@ (8004950 <prvCheckTasksWaitingTermination+0x54>)
 8004922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <prvCheckTasksWaitingTermination+0x58>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3b01      	subs	r3, #1
 800492a:	4a0a      	ldr	r2, [pc, #40]	@ (8004954 <prvCheckTasksWaitingTermination+0x58>)
 800492c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800492e:	f000 fea5 	bl	800567c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f810 	bl	8004958 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <prvCheckTasksWaitingTermination+0x58>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e1      	bne.n	8004904 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000ca4 	.word	0x20000ca4
 8004950:	20000cd0 	.word	0x20000cd0
 8004954:	20000cb8 	.word	0x20000cb8

08004958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f81e 	bl	80059b0 <vPortFree>
				vPortFree( pxTCB );
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f001 f81b 	bl	80059b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800497a:	e019      	b.n	80049b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004982:	2b01      	cmp	r3, #1
 8004984:	d103      	bne.n	800498e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 f812 	bl	80059b0 <vPortFree>
	}
 800498c:	e010      	b.n	80049b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004994:	2b02      	cmp	r3, #2
 8004996:	d00b      	beq.n	80049b0 <prvDeleteTCB+0x58>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <prvDeleteTCB+0x54>
	}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049be:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <prvResetNextTaskUnblockTime+0x40>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <prvResetNextTaskUnblockTime+0x14>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <prvResetNextTaskUnblockTime+0x16>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049d2:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <prvResetNextTaskUnblockTime+0x44>)
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049da:	e008      	b.n	80049ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <prvResetNextTaskUnblockTime+0x40>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4a04      	ldr	r2, [pc, #16]	@ (80049fc <prvResetNextTaskUnblockTime+0x44>)
 80049ec:	6013      	str	r3, [r2, #0]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	20000c88 	.word	0x20000c88
 80049fc:	20000cf0 	.word	0x20000cf0

08004a00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004a06:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <xTaskGetCurrentTaskHandle+0x18>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004a0c:	687b      	ldr	r3, [r7, #4]
	}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	200007fc 	.word	0x200007fc

08004a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <xTaskGetSchedulerState+0x34>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	e008      	b.n	8004a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a30:	4b08      	ldr	r3, [pc, #32]	@ (8004a54 <xTaskGetSchedulerState+0x38>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	e001      	b.n	8004a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a42:	687b      	ldr	r3, [r7, #4]
	}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000cdc 	.word	0x20000cdc
 8004a54:	20000cf8 	.word	0x20000cf8

08004a58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d056      	beq.n	8004b1c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <xTaskPriorityInherit+0xd0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d246      	bcs.n	8004b0a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	db06      	blt.n	8004a92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a84:	4b28      	ldr	r3, [pc, #160]	@ (8004b28 <xTaskPriorityInherit+0xd0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6959      	ldr	r1, [r3, #20]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4a22      	ldr	r2, [pc, #136]	@ (8004b2c <xTaskPriorityInherit+0xd4>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	4299      	cmp	r1, r3
 8004aa8:	d101      	bne.n	8004aae <xTaskPriorityInherit+0x56>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <xTaskPriorityInherit+0x58>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d022      	beq.n	8004afa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fa6f 	bl	8002f9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <xTaskPriorityInherit+0xd0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004acc:	4b18      	ldr	r3, [pc, #96]	@ (8004b30 <xTaskPriorityInherit+0xd8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d903      	bls.n	8004adc <xTaskPriorityInherit+0x84>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <xTaskPriorityInherit+0xd8>)
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4a10      	ldr	r2, [pc, #64]	@ (8004b2c <xTaskPriorityInherit+0xd4>)
 8004aea:	441a      	add	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7fe f9f7 	bl	8002ee6 <vListInsertEnd>
 8004af8:	e004      	b.n	8004b04 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <xTaskPriorityInherit+0xd0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e008      	b.n	8004b1c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b0e:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <xTaskPriorityInherit+0xd0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d201      	bcs.n	8004b1c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200007fc 	.word	0x200007fc
 8004b2c:	20000800 	.word	0x20000800
 8004b30:	20000cd8 	.word	0x20000cd8

08004b34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d058      	beq.n	8004bfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <xTaskPriorityDisinherit+0xd4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d00b      	beq.n	8004b6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60bb      	str	r3, [r7, #8]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d02c      	beq.n	8004bfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d128      	bne.n	8004bfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe f9f4 	bl	8002f9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c0c <xTaskPriorityDisinherit+0xd8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d903      	bls.n	8004bdc <xTaskPriorityDisinherit+0xa8>
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <xTaskPriorityDisinherit+0xd8>)
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4a09      	ldr	r2, [pc, #36]	@ (8004c10 <xTaskPriorityDisinherit+0xdc>)
 8004bea:	441a      	add	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f7fe f977 	bl	8002ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bfc:	697b      	ldr	r3, [r7, #20]
	}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200007fc 	.word	0x200007fc
 8004c0c:	20000cd8 	.word	0x20000cd8
 8004c10:	20000800 	.word	0x20000800

08004c14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d071      	beq.n	8004d10 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60fb      	str	r3, [r7, #12]
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d902      	bls.n	8004c5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e002      	b.n	8004c62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d051      	beq.n	8004d10 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d14c      	bne.n	8004d10 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004c76:	4b28      	ldr	r3, [pc, #160]	@ (8004d18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d10b      	bne.n	8004c98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60bb      	str	r3, [r7, #8]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	db04      	blt.n	8004cb6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	6959      	ldr	r1, [r3, #20]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	d101      	bne.n	8004cd0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01c      	beq.n	8004d10 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe f95e 	bl	8002f9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d20 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8004d20 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4a06      	ldr	r2, [pc, #24]	@ (8004d1c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004d02:	441a      	add	r2, r3
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7fe f8eb 	bl	8002ee6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d10:	bf00      	nop
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	200007fc 	.word	0x200007fc
 8004d1c:	20000800 	.word	0x20000800
 8004d20:	20000cd8 	.word	0x20000cd8

08004d24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004d28:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d36:	3201      	adds	r2, #1
 8004d38:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004d3a:	4b03      	ldr	r3, [pc, #12]	@ (8004d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
	}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	200007fc 	.word	0x200007fc

08004d4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d56:	4b21      	ldr	r3, [pc, #132]	@ (8004ddc <prvAddCurrentTaskToDelayedList+0x90>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5c:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f91a 	bl	8002f9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d10a      	bne.n	8004d86 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d76:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4819      	ldr	r0, [pc, #100]	@ (8004de4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d80:	f7fe f8b1 	bl	8002ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d84:	e026      	b.n	8004dd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d8e:	4b14      	ldr	r3, [pc, #80]	@ (8004de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d209      	bcs.n	8004db2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b0f      	ldr	r3, [pc, #60]	@ (8004de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f7fe f8be 	bl	8002f2c <vListInsert>
}
 8004db0:	e010      	b.n	8004dd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db2:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <prvAddCurrentTaskToDelayedList+0xa0>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fe f8b4 	bl	8002f2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d202      	bcs.n	8004dd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000cd4 	.word	0x20000cd4
 8004de0:	200007fc 	.word	0x200007fc
 8004de4:	20000cbc 	.word	0x20000cbc
 8004de8:	20000c8c 	.word	0x20000c8c
 8004dec:	20000c88 	.word	0x20000c88
 8004df0:	20000cf0 	.word	0x20000cf0

08004df4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	@ 0x28
 8004df8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dfe:	f000 fad9 	bl	80053b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e02:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <xTimerCreateTimerTask+0x84>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d021      	beq.n	8004e4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e12:	1d3a      	adds	r2, r7, #4
 8004e14:	f107 0108 	add.w	r1, r7, #8
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe f81d 	bl	8002e5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	9202      	str	r2, [sp, #8]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	460a      	mov	r2, r1
 8004e34:	4911      	ldr	r1, [pc, #68]	@ (8004e7c <xTimerCreateTimerTask+0x88>)
 8004e36:	4812      	ldr	r0, [pc, #72]	@ (8004e80 <xTimerCreateTimerTask+0x8c>)
 8004e38:	f7fe fff0 	bl	8003e1c <xTaskCreateStatic>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <xTimerCreateTimerTask+0x90>)
 8004e40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <xTimerCreateTimerTask+0x90>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e6c:	697b      	ldr	r3, [r7, #20]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000d2c 	.word	0x20000d2c
 8004e7c:	08005cc0 	.word	0x08005cc0
 8004e80:	08004fa9 	.word	0x08004fa9
 8004e84:	20000d30 	.word	0x20000d30

08004e88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	@ 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	623b      	str	r3, [r7, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004eb8:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <xTimerGenericCommand+0x98>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02a      	beq.n	8004f16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	dc18      	bgt.n	8004f04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ed2:	f7ff fda3 	bl	8004a1c <xTaskGetSchedulerState>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d109      	bne.n	8004ef0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004edc:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <xTimerGenericCommand+0x98>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f107 0110 	add.w	r1, r7, #16
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee8:	f7fe fa84 	bl	80033f4 <xQueueGenericSend>
 8004eec:	6278      	str	r0, [r7, #36]	@ 0x24
 8004eee:	e012      	b.n	8004f16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <xTimerGenericCommand+0x98>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	f107 0110 	add.w	r1, r7, #16
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2200      	movs	r2, #0
 8004efc:	f7fe fa7a 	bl	80033f4 <xQueueGenericSend>
 8004f00:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f02:	e008      	b.n	8004f16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <xTimerGenericCommand+0x98>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f107 0110 	add.w	r1, r7, #16
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	f7fe fb72 	bl	80035f8 <xQueueGenericSendFromISR>
 8004f14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	@ 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000d2c 	.word	0x20000d2c

08004f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa4 <prvProcessExpiredTimer+0x80>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe f82d 	bl	8002f9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d123      	bne.n	8004f92 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	18d1      	adds	r1, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	6978      	ldr	r0, [r7, #20]
 8004f58:	f000 f8cc 	bl	80050f4 <prvInsertTimerInActiveList>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d017      	beq.n	8004f92 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f62:	2300      	movs	r3, #0
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f7ff ff8b 	bl	8004e88 <xTimerGenericCommand>
 8004f72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60fb      	str	r3, [r7, #12]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	6978      	ldr	r0, [r7, #20]
 8004f98:	4798      	blx	r3
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000d24 	.word	0x20000d24

08004fa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fb0:	f107 0308 	add.w	r3, r7, #8
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 f859 	bl	800506c <prvGetNextExpireTime>
 8004fba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f805 	bl	8004fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fc6:	f000 f8d7 	bl	8005178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fca:	bf00      	nop
 8004fcc:	e7f0      	b.n	8004fb0 <prvTimerTask+0x8>
	...

08004fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fda:	f7ff f923 	bl	8004224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f866 	bl	80050b4 <prvSampleTimeNow>
 8004fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d130      	bne.n	8005052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <prvProcessTimerOrBlockTask+0x3c>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d806      	bhi.n	800500c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ffe:	f7ff f91f 	bl	8004240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff8d 	bl	8004f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800500a:	e024      	b.n	8005056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005012:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <prvProcessTimerOrBlockTask+0x90>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005024:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <prvProcessTimerOrBlockTask+0x94>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	f7fe febf 	bl	8003db4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005036:	f7ff f903 	bl	8004240 <xTaskResumeAll>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005040:	4b09      	ldr	r3, [pc, #36]	@ (8005068 <prvProcessTimerOrBlockTask+0x98>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
}
 8005050:	e001      	b.n	8005056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005052:	f7ff f8f5 	bl	8004240 <xTaskResumeAll>
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000d28 	.word	0x20000d28
 8005064:	20000d2c 	.word	0x20000d2c
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005074:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <prvGetNextExpireTime+0x44>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d105      	bne.n	800509e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005092:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <prvGetNextExpireTime+0x44>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e001      	b.n	80050a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000d24 	.word	0x20000d24

080050b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050bc:	f7ff f95e 	bl	800437c <xTaskGetTickCount>
 80050c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050c2:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <prvSampleTimeNow+0x3c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d205      	bcs.n	80050d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050cc:	f000 f910 	bl	80052f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e002      	b.n	80050de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050de:	4a04      	ldr	r2, [pc, #16]	@ (80050f0 <prvSampleTimeNow+0x3c>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000d34 	.word	0x20000d34

080050f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d812      	bhi.n	8005140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e01b      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800512e:	4b10      	ldr	r3, [pc, #64]	@ (8005170 <prvInsertTimerInActiveList+0x7c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fd fef7 	bl	8002f2c <vListInsert>
 800513e:	e012      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d206      	bcs.n	8005156 <prvInsertTimerInActiveList+0x62>
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d302      	bcc.n	8005156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e007      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005156:	4b07      	ldr	r3, [pc, #28]	@ (8005174 <prvInsertTimerInActiveList+0x80>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fd fee3 	bl	8002f2c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005166:	697b      	ldr	r3, [r7, #20]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000d28 	.word	0x20000d28
 8005174:	20000d24 	.word	0x20000d24

08005178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	@ 0x38
 800517c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800517e:	e0a5      	b.n	80052cc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da19      	bge.n	80051ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	3304      	adds	r3, #4
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	61fb      	str	r3, [r7, #28]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b0:	6850      	ldr	r0, [r2, #4]
 80051b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b4:	6892      	ldr	r2, [r2, #8]
 80051b6:	4611      	mov	r1, r2
 80051b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f2c0 8085 	blt.w	80052cc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	3304      	adds	r3, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd fee2 	bl	8002f9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051d8:	463b      	mov	r3, r7
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff6a 	bl	80050b4 <prvSampleTimeNow>
 80051e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b09      	cmp	r3, #9
 80051e6:	d86c      	bhi.n	80052c2 <prvProcessReceivedCommands+0x14a>
 80051e8:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <prvProcessReceivedCommands+0x78>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005219 	.word	0x08005219
 80051fc:	080052c3 	.word	0x080052c3
 8005200:	08005277 	.word	0x08005277
 8005204:	080052b1 	.word	0x080052b1
 8005208:	08005219 	.word	0x08005219
 800520c:	08005219 	.word	0x08005219
 8005210:	080052c3 	.word	0x080052c3
 8005214:	08005277 	.word	0x08005277
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	18d1      	adds	r1, r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005226:	f7ff ff65 	bl	80050f4 <prvInsertTimerInActiveList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d04a      	beq.n	80052c6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005236:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d142      	bne.n	80052c6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	441a      	add	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	2100      	movs	r1, #0
 8005250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005252:	f7ff fe19 	bl	8004e88 <xTimerGenericCommand>
 8005256:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d133      	bne.n	80052c6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	61bb      	str	r3, [r7, #24]
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	e7fd      	b.n	8005272 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	617b      	str	r3, [r7, #20]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	18d1      	adds	r1, r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052aa:	f7ff ff23 	bl	80050f4 <prvInsertTimerInActiveList>
					break;
 80052ae:	e00d      	b.n	80052cc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d107      	bne.n	80052ca <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80052ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052bc:	f000 fb78 	bl	80059b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052c0:	e003      	b.n	80052ca <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <prvProcessReceivedCommands+0x154>
					break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <prvProcessReceivedCommands+0x154>
					break;
 80052ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052cc:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <prvProcessReceivedCommands+0x174>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	1d39      	adds	r1, r7, #4
 80052d2:	2200      	movs	r2, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fa2b 	bl	8003730 <xQueueReceive>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f47f af4f 	bne.w	8005180 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3730      	adds	r7, #48	@ 0x30
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20000d2c 	.word	0x20000d2c

080052f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052f6:	e046      	b.n	8005386 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052f8:	4b2c      	ldr	r3, [pc, #176]	@ (80053ac <prvSwitchTimerLists+0xbc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005302:	4b2a      	ldr	r3, [pc, #168]	@ (80053ac <prvSwitchTimerLists+0xbc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3304      	adds	r3, #4
 8005310:	4618      	mov	r0, r3
 8005312:	f7fd fe43 	bl	8002f9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d12f      	bne.n	8005386 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d90e      	bls.n	8005356 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005344:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <prvSwitchTimerLists+0xbc>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fd fdec 	bl	8002f2c <vListInsert>
 8005354:	e017      	b.n	8005386 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005356:	2300      	movs	r3, #0
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2300      	movs	r3, #0
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	2100      	movs	r1, #0
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fd91 	bl	8004e88 <xTimerGenericCommand>
 8005366:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <prvSwitchTimerLists+0x96>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	603b      	str	r3, [r7, #0]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <prvSwitchTimerLists+0xbc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1b3      	bne.n	80052f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005390:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <prvSwitchTimerLists+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005396:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <prvSwitchTimerLists+0xc0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a04      	ldr	r2, [pc, #16]	@ (80053ac <prvSwitchTimerLists+0xbc>)
 800539c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800539e:	4a04      	ldr	r2, [pc, #16]	@ (80053b0 <prvSwitchTimerLists+0xc0>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	6013      	str	r3, [r2, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000d24 	.word	0x20000d24
 80053b0:	20000d28 	.word	0x20000d28

080053b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ba:	f000 f92f 	bl	800561c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053be:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d120      	bne.n	8005408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053c6:	4814      	ldr	r0, [pc, #80]	@ (8005418 <prvCheckForValidListAndQueue+0x64>)
 80053c8:	f7fd fd62 	bl	8002e90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053cc:	4813      	ldr	r0, [pc, #76]	@ (800541c <prvCheckForValidListAndQueue+0x68>)
 80053ce:	f7fd fd5f 	bl	8002e90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053d2:	4b13      	ldr	r3, [pc, #76]	@ (8005420 <prvCheckForValidListAndQueue+0x6c>)
 80053d4:	4a10      	ldr	r2, [pc, #64]	@ (8005418 <prvCheckForValidListAndQueue+0x64>)
 80053d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053d8:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <prvCheckForValidListAndQueue+0x70>)
 80053da:	4a10      	ldr	r2, [pc, #64]	@ (800541c <prvCheckForValidListAndQueue+0x68>)
 80053dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4b11      	ldr	r3, [pc, #68]	@ (8005428 <prvCheckForValidListAndQueue+0x74>)
 80053e4:	4a11      	ldr	r2, [pc, #68]	@ (800542c <prvCheckForValidListAndQueue+0x78>)
 80053e6:	2110      	movs	r1, #16
 80053e8:	200a      	movs	r0, #10
 80053ea:	f7fd fe6b 	bl	80030c4 <xQueueGenericCreateStatic>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a08      	ldr	r2, [pc, #32]	@ (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053fc:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	490b      	ldr	r1, [pc, #44]	@ (8005430 <prvCheckForValidListAndQueue+0x7c>)
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fcae 	bl	8003d64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005408:	f000 f938 	bl	800567c <vPortExitCritical>
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000d2c 	.word	0x20000d2c
 8005418:	20000cfc 	.word	0x20000cfc
 800541c:	20000d10 	.word	0x20000d10
 8005420:	20000d24 	.word	0x20000d24
 8005424:	20000d28 	.word	0x20000d28
 8005428:	20000dd8 	.word	0x20000dd8
 800542c:	20000d38 	.word	0x20000d38
 8005430:	08005cc8 	.word	0x08005cc8

08005434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b04      	subs	r3, #4
 8005444:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800544c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3b04      	subs	r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f023 0201 	bic.w	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3b04      	subs	r3, #4
 8005462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005464:	4a08      	ldr	r2, [pc, #32]	@ (8005488 <pxPortInitialiseStack+0x54>)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3b14      	subs	r3, #20
 800546e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3b20      	subs	r3, #32
 800547a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	0800548d 	.word	0x0800548d

0800548c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005496:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <prvTaskExitError+0x54>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d00b      	beq.n	80054b8 <prvTaskExitError+0x2c>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <prvTaskExitError+0x28>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	60bb      	str	r3, [r7, #8]
}
 80054ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054cc:	bf00      	nop
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0fc      	beq.n	80054ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	2000000c 	.word	0x2000000c
	...

080054f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <pxCurrentTCBConst2>)
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	6808      	ldr	r0, [r1, #0]
 80054f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054fa:	f380 8809 	msr	PSP, r0
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f04f 0000 	mov.w	r0, #0
 8005506:	f380 8811 	msr	BASEPRI, r0
 800550a:	f04e 0e0d 	orr.w	lr, lr, #13
 800550e:	4770      	bx	lr

08005510 <pxCurrentTCBConst2>:
 8005510:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005518:	4806      	ldr	r0, [pc, #24]	@ (8005534 <prvPortStartFirstTask+0x1c>)
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	f380 8808 	msr	MSP, r0
 8005522:	b662      	cpsie	i
 8005524:	b661      	cpsie	f
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	df00      	svc	0
 8005530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005532:	bf00      	nop
 8005534:	e000ed08 	.word	0xe000ed08

08005538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800553e:	4b32      	ldr	r3, [pc, #200]	@ (8005608 <xPortStartScheduler+0xd0>)
 8005540:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	22ff      	movs	r2, #255	@ 0xff
 800554e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005560:	b2da      	uxtb	r2, r3
 8005562:	4b2a      	ldr	r3, [pc, #168]	@ (800560c <xPortStartScheduler+0xd4>)
 8005564:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005566:	4b2a      	ldr	r3, [pc, #168]	@ (8005610 <xPortStartScheduler+0xd8>)
 8005568:	2207      	movs	r2, #7
 800556a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800556c:	e009      	b.n	8005582 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800556e:	4b28      	ldr	r3, [pc, #160]	@ (8005610 <xPortStartScheduler+0xd8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	4a26      	ldr	r2, [pc, #152]	@ (8005610 <xPortStartScheduler+0xd8>)
 8005576:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558a:	2b80      	cmp	r3, #128	@ 0x80
 800558c:	d0ef      	beq.n	800556e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800558e:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <xPortStartScheduler+0xd8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1c3 0307 	rsb	r3, r3, #7
 8005596:	2b04      	cmp	r3, #4
 8005598:	d00b      	beq.n	80055b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60bb      	str	r3, [r7, #8]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055b2:	4b17      	ldr	r3, [pc, #92]	@ (8005610 <xPortStartScheduler+0xd8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <xPortStartScheduler+0xd8>)
 80055ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055bc:	4b14      	ldr	r3, [pc, #80]	@ (8005610 <xPortStartScheduler+0xd8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055c4:	4a12      	ldr	r2, [pc, #72]	@ (8005610 <xPortStartScheduler+0xd8>)
 80055c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055d0:	4b10      	ldr	r3, [pc, #64]	@ (8005614 <xPortStartScheduler+0xdc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005614 <xPortStartScheduler+0xdc>)
 80055d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <xPortStartScheduler+0xdc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005614 <xPortStartScheduler+0xdc>)
 80055e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80055e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055e8:	f000 f8b8 	bl	800575c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <xPortStartScheduler+0xe0>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055f2:	f7ff ff91 	bl	8005518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055f6:	f7fe ff8f 	bl	8004518 <vTaskSwitchContext>
	prvTaskExitError();
 80055fa:	f7ff ff47 	bl	800548c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	e000e400 	.word	0xe000e400
 800560c:	20000e28 	.word	0x20000e28
 8005610:	20000e2c 	.word	0x20000e2c
 8005614:	e000ed20 	.word	0xe000ed20
 8005618:	2000000c 	.word	0x2000000c

0800561c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	607b      	str	r3, [r7, #4]
}
 8005634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005636:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <vPortEnterCritical+0x58>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	4a0d      	ldr	r2, [pc, #52]	@ (8005674 <vPortEnterCritical+0x58>)
 800563e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005640:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <vPortEnterCritical+0x58>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d110      	bne.n	800566a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005648:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <vPortEnterCritical+0x5c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <vPortEnterCritical+0x4e>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	603b      	str	r3, [r7, #0]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <vPortEnterCritical+0x4a>
	}
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr
 8005674:	2000000c 	.word	0x2000000c
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <vPortExitCritical+0x26>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	607b      	str	r3, [r7, #4]
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	e7fd      	b.n	800569e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056a2:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <vPortExitCritical+0x50>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4a08      	ldr	r2, [pc, #32]	@ (80056cc <vPortExitCritical+0x50>)
 80056aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056ac:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <vPortExitCritical+0x50>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <vPortExitCritical+0x44>
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
}
 80056be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056d0:	f3ef 8009 	mrs	r0, PSP
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005710 <pxCurrentTCBConst>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056e0:	6010      	str	r0, [r2, #0]
 80056e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056ea:	f380 8811 	msr	BASEPRI, r0
 80056ee:	f7fe ff13 	bl	8004518 <vTaskSwitchContext>
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f380 8811 	msr	BASEPRI, r0
 80056fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005706:	f380 8809 	msr	PSP, r0
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	4770      	bx	lr

08005710 <pxCurrentTCBConst>:
 8005710:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005732:	f7fe fe31 	bl	8004398 <xTaskIncrementTick>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <xPortSysTickHandler+0x40>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f383 8811 	msr	BASEPRI, r3
}
 800574e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005760:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <vPortSetupTimerInterrupt+0x30>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005766:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800576c:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <vPortSetupTimerInterrupt+0x38>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <vPortSetupTimerInterrupt+0x3c>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	4a08      	ldr	r2, [pc, #32]	@ (800579c <vPortSetupTimerInterrupt+0x40>)
 800577a:	3b01      	subs	r3, #1
 800577c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800577e:	4b03      	ldr	r3, [pc, #12]	@ (800578c <vPortSetupTimerInterrupt+0x30>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	e000e010 	.word	0xe000e010
 8005790:	e000e018 	.word	0xe000e018
 8005794:	20000000 	.word	0x20000000
 8005798:	10624dd3 	.word	0x10624dd3
 800579c:	e000e014 	.word	0xe000e014

080057a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057a6:	f3ef 8305 	mrs	r3, IPSR
 80057aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b0f      	cmp	r3, #15
 80057b0:	d915      	bls.n	80057de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057b2:	4a17      	ldr	r2, [pc, #92]	@ (8005810 <vPortValidateInterruptPriority+0x70>)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057bc:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <vPortValidateInterruptPriority+0x74>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	7afa      	ldrb	r2, [r7, #11]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d20b      	bcs.n	80057de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	607b      	str	r3, [r7, #4]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <vPortValidateInterruptPriority+0x78>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <vPortValidateInterruptPriority+0x7c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d90b      	bls.n	8005806 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	603b      	str	r3, [r7, #0]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <vPortValidateInterruptPriority+0x62>
	}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr
 8005810:	e000e3f0 	.word	0xe000e3f0
 8005814:	20000e28 	.word	0x20000e28
 8005818:	e000ed0c 	.word	0xe000ed0c
 800581c:	20000e2c 	.word	0x20000e2c

08005820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	@ 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800582c:	f7fe fcfa 	bl	8004224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005830:	4b5a      	ldr	r3, [pc, #360]	@ (800599c <pvPortMalloc+0x17c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005838:	f000 f916 	bl	8005a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800583c:	4b58      	ldr	r3, [pc, #352]	@ (80059a0 <pvPortMalloc+0x180>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	f040 8090 	bne.w	800596a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01e      	beq.n	800588e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005850:	2208      	movs	r2, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	2b00      	cmp	r3, #0
 8005860:	d015      	beq.n	800588e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	3308      	adds	r3, #8
 800586a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <pvPortMalloc+0x6e>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	617b      	str	r3, [r7, #20]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d06a      	beq.n	800596a <pvPortMalloc+0x14a>
 8005894:	4b43      	ldr	r3, [pc, #268]	@ (80059a4 <pvPortMalloc+0x184>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d865      	bhi.n	800596a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800589e:	4b42      	ldr	r3, [pc, #264]	@ (80059a8 <pvPortMalloc+0x188>)
 80058a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058a2:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <pvPortMalloc+0x188>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a8:	e004      	b.n	80058b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d903      	bls.n	80058c6 <pvPortMalloc+0xa6>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f1      	bne.n	80058aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058c6:	4b35      	ldr	r3, [pc, #212]	@ (800599c <pvPortMalloc+0x17c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d04c      	beq.n	800596a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2208      	movs	r2, #8
 80058d6:	4413      	add	r3, r2
 80058d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	1ad2      	subs	r2, r2, r3
 80058ea:	2308      	movs	r3, #8
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d920      	bls.n	8005934 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4413      	add	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <pvPortMalloc+0xfc>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	613b      	str	r3, [r7, #16]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800592e:	69b8      	ldr	r0, [r7, #24]
 8005930:	f000 f8fc 	bl	8005b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005934:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <pvPortMalloc+0x184>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	4a19      	ldr	r2, [pc, #100]	@ (80059a4 <pvPortMalloc+0x184>)
 8005940:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005942:	4b18      	ldr	r3, [pc, #96]	@ (80059a4 <pvPortMalloc+0x184>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b19      	ldr	r3, [pc, #100]	@ (80059ac <pvPortMalloc+0x18c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d203      	bcs.n	8005956 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800594e:	4b15      	ldr	r3, [pc, #84]	@ (80059a4 <pvPortMalloc+0x184>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a16      	ldr	r2, [pc, #88]	@ (80059ac <pvPortMalloc+0x18c>)
 8005954:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <pvPortMalloc+0x180>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	431a      	orrs	r2, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800596a:	f7fe fc69 	bl	8004240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <pvPortMalloc+0x170>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	60fb      	str	r3, [r7, #12]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <pvPortMalloc+0x16c>
	return pvReturn;
 8005990:	69fb      	ldr	r3, [r7, #28]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3728      	adds	r7, #40	@ 0x28
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20001a38 	.word	0x20001a38
 80059a0:	20001a44 	.word	0x20001a44
 80059a4:	20001a3c 	.word	0x20001a3c
 80059a8:	20001a30 	.word	0x20001a30
 80059ac:	20001a40 	.word	0x20001a40

080059b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04a      	beq.n	8005a58 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059c2:	2308      	movs	r3, #8
 80059c4:	425b      	negs	r3, r3
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4413      	add	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	4b22      	ldr	r3, [pc, #136]	@ (8005a60 <vPortFree+0xb0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <vPortFree+0x46>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	60fb      	str	r3, [r7, #12]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <vPortFree+0x66>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60bb      	str	r3, [r7, #8]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <vPortFree+0xb0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d019      	beq.n	8005a58 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d115      	bne.n	8005a58 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <vPortFree+0xb0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a3c:	f7fe fbf2 	bl	8004224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <vPortFree+0xb4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4413      	add	r3, r2
 8005a4a:	4a06      	ldr	r2, [pc, #24]	@ (8005a64 <vPortFree+0xb4>)
 8005a4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a4e:	6938      	ldr	r0, [r7, #16]
 8005a50:	f000 f86c 	bl	8005b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a54:	f7fe fbf4 	bl	8004240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a58:	bf00      	nop
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20001a44 	.word	0x20001a44
 8005a64:	20001a3c 	.word	0x20001a3c

08005a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a74:	4b27      	ldr	r3, [pc, #156]	@ (8005b14 <prvHeapInit+0xac>)
 8005a76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	4a1f      	ldr	r2, [pc, #124]	@ (8005b14 <prvHeapInit+0xac>)
 8005a98:	4413      	add	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b18 <prvHeapInit+0xb0>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b18 <prvHeapInit+0xb0>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0307 	bic.w	r3, r3, #7
 8005ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <prvHeapInit+0xb4>)
 8005ac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aca:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <prvHeapInit+0xb4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <prvHeapInit+0xb4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	1ad2      	subs	r2, r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <prvHeapInit+0xb4>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a0a      	ldr	r2, [pc, #40]	@ (8005b20 <prvHeapInit+0xb8>)
 8005af6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a09      	ldr	r2, [pc, #36]	@ (8005b24 <prvHeapInit+0xbc>)
 8005afe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b00:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <prvHeapInit+0xc0>)
 8005b02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b06:	601a      	str	r2, [r3, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000e30 	.word	0x20000e30
 8005b18:	20001a30 	.word	0x20001a30
 8005b1c:	20001a38 	.word	0x20001a38
 8005b20:	20001a40 	.word	0x20001a40
 8005b24:	20001a3c 	.word	0x20001a3c
 8005b28:	20001a44 	.word	0x20001a44

08005b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b34:	4b27      	ldr	r3, [pc, #156]	@ (8005bd4 <prvInsertBlockIntoFreeList+0xa8>)
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e002      	b.n	8005b40 <prvInsertBlockIntoFreeList+0x14>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d8f7      	bhi.n	8005b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4413      	add	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d108      	bne.n	8005b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d118      	bne.n	8005bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b14      	ldr	r3, [pc, #80]	@ (8005bd8 <prvInsertBlockIntoFreeList+0xac>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d00d      	beq.n	8005baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e008      	b.n	8005bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005baa:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <prvInsertBlockIntoFreeList+0xac>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e003      	b.n	8005bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d002      	beq.n	8005bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	20001a30 	.word	0x20001a30
 8005bd8:	20001a38 	.word	0x20001a38

08005bdc <memset>:
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4402      	add	r2, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	2600      	movs	r6, #0
 8005bf0:	4d0c      	ldr	r5, [pc, #48]	@ (8005c24 <__libc_init_array+0x38>)
 8005bf2:	4c0d      	ldr	r4, [pc, #52]	@ (8005c28 <__libc_init_array+0x3c>)
 8005bf4:	1b64      	subs	r4, r4, r5
 8005bf6:	10a4      	asrs	r4, r4, #2
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	f000 f828 	bl	8005c50 <_init>
 8005c00:	2600      	movs	r6, #0
 8005c02:	4d0a      	ldr	r5, [pc, #40]	@ (8005c2c <__libc_init_array+0x40>)
 8005c04:	4c0a      	ldr	r4, [pc, #40]	@ (8005c30 <__libc_init_array+0x44>)
 8005c06:	1b64      	subs	r4, r4, r5
 8005c08:	10a4      	asrs	r4, r4, #2
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	08005d94 	.word	0x08005d94
 8005c28:	08005d94 	.word	0x08005d94
 8005c2c:	08005d94 	.word	0x08005d94
 8005c30:	08005d98 	.word	0x08005d98

08005c34 <memcpy>:
 8005c34:	440a      	add	r2, r1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c3c:	d100      	bne.n	8005c40 <memcpy+0xc>
 8005c3e:	4770      	bx	lr
 8005c40:	b510      	push	{r4, lr}
 8005c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c46:	4291      	cmp	r1, r2
 8005c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4c:	d1f9      	bne.n	8005c42 <memcpy+0xe>
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <_init>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	bf00      	nop
 8005c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c56:	bc08      	pop	{r3}
 8005c58:	469e      	mov	lr, r3
 8005c5a:	4770      	bx	lr

08005c5c <_fini>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	bf00      	nop
 8005c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c62:	bc08      	pop	{r3}
 8005c64:	469e      	mov	lr, r3
 8005c66:	4770      	bx	lr
