
Node 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cfc  08005cfc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005cfc  08005cfc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cfc  08005cfc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a38  20000010  08005d14  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  08005d14  00021a48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c6b  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002daf  00000000  00000000  00032ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c38  00000000  00000000  00036a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003146  00000000  00000000  000376b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001260a  00000000  00000000  0003a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092b10  00000000  00000000  0004ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004158  00000000  00000000  000df910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e3a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bc0 	.word	0x08005bc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005bc0 	.word	0x08005bc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* Initialize the hardware and system clock */
  HAL_Init();
 8000164:	f000 fb90 	bl	8000888 <HAL_Init>
  SystemClock_Config();
 8000168:	f000 f842 	bl	80001f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f902 	bl	8000374 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f88e 	bl	8000290 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f930 	bl	80003d8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000178:	f000 f8c8 	bl	800030c <MX_CAN_Init>

  /* Initialize the RTOS kernel */
  osKernelInitialize();
 800017c:	f002 fbf8 	bl	8002970 <osKernelInitialize>

  /* Create the thread(s) */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8000180:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <main+0x64>)
 8000182:	2100      	movs	r1, #0
 8000184:	4810      	ldr	r0, [pc, #64]	; (80001c8 <main+0x68>)
 8000186:	f002 fc59 	bl	8002a3c <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0f      	ldr	r2, [pc, #60]	; (80001cc <main+0x6c>)
 800018e:	6013      	str	r3, [r2, #0]
  wateringTaskHandle = osThreadNew(StartWateringTask, NULL, &wateringTask_attributes);
 8000190:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <main+0x70>)
 8000192:	2100      	movs	r1, #0
 8000194:	480f      	ldr	r0, [pc, #60]	; (80001d4 <main+0x74>)
 8000196:	f002 fc51 	bl	8002a3c <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <main+0x78>)
 800019e:	6013      	str	r3, [r2, #0]
  canTaskHandle = osThreadNew(StartCanTask, NULL, &canTask_attributes);
 80001a0:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <main+0x7c>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	480e      	ldr	r0, [pc, #56]	; (80001e0 <main+0x80>)
 80001a6:	f002 fc49 	bl	8002a3c <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a0d      	ldr	r2, [pc, #52]	; (80001e4 <main+0x84>)
 80001ae:	6013      	str	r3, [r2, #0]
  moistureMutex1Handle = osMutexNew(&moistureMutex1_attributes);
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <main+0x88>)
 80001b2:	f002 fced 	bl	8002b90 <osMutexNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <main+0x8c>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80001bc:	f002 fc0a 	bl	80029d4 <osKernelStart>

  /* Infinite loop to keep the main function alive */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <main+0x60>
 80001c2:	bf00      	nop
 80001c4:	08005c40 	.word	0x08005c40
 80001c8:	0800042d 	.word	0x0800042d
 80001cc:	200000ec 	.word	0x200000ec
 80001d0:	08005c64 	.word	0x08005c64
 80001d4:	080004c9 	.word	0x080004c9
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08005c88 	.word	0x08005c88
 80001e0:	08000521 	.word	0x08000521
 80001e4:	200000f4 	.word	0x200000f4
 80001e8:	08005cac 	.word	0x08005cac
 80001ec:	200000f8 	.word	0x200000f8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	; 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f005 fca4 	bl	8005b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /* Configure the main internal regulator output voltage */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fc4f 	bl	8001ad8 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000240:	f000 f9ae 	bl	80005a0 <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000244:	230f      	movs	r3, #15
 8000246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 febc 	bl	8001fdc <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800026a:	f000 f999 	bl	80005a0 <Error_Handler>
  }

  /* Configure the ADC peripheral clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800026e:	2302      	movs	r3, #2
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f002 f83d 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000284:	f000 f98c 	bl	80005a0 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3750      	adds	r7, #80	; 0x50
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]

  /* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <MX_ADC1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fb61 	bl	8000994 <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f962 	bl	80005a0 <Error_Handler>
  }

  /* Configure for the selected ADC regular channel to be converted */
  sConfig.Channel = ADC_CHANNEL_0;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fe15 	bl	8000f1c <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f8:	f000 f952 	bl	80005a0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000002c 	.word	0x2000002c
 8000308:	40012400 	.word	0x40012400

0800030c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <MX_CAN_Init+0x60>)
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_CAN_Init+0x64>)
 8000314:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_CAN_Init+0x60>)
 8000318:	2210      	movs	r2, #16
 800031a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_CAN_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_CAN_Init+0x60>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_CAN_Init+0x60>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_CAN_Init+0x60>)
 8000330:	2200      	movs	r2, #0
 8000332:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000334:	4b0d      	ldr	r3, [pc, #52]	; (800036c <MX_CAN_Init+0x60>)
 8000336:	2200      	movs	r2, #0
 8000338:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_CAN_Init+0x60>)
 800033c:	2200      	movs	r2, #0
 800033e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <MX_CAN_Init+0x60>)
 8000342:	2200      	movs	r2, #0
 8000344:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_CAN_Init+0x60>)
 8000348:	2200      	movs	r2, #0
 800034a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <MX_CAN_Init+0x60>)
 800034e:	2200      	movs	r2, #0
 8000350:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_CAN_Init+0x60>)
 8000354:	2200      	movs	r2, #0
 8000356:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_CAN_Init+0x60>)
 800035a:	f000 ff72 	bl	8001242 <HAL_CAN_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000364:	f000 f91c 	bl	80005a0 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000a4 	.word	0x200000a4
 8000370:	40006400 	.word	0x40006400

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_GPIO_Init+0x5c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <MX_GPIO_Init+0x5c>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_GPIO_Init+0x5c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2102      	movs	r1, #2
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <MX_GPIO_Init+0x60>)
 80003a6:	f001 fb7f 	bl	8001aa8 <HAL_GPIO_WritePin>

  /* Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003aa:	2302      	movs	r3, #2
 80003ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_GPIO_Init+0x60>)
 80003c2:	f001 f9ed 	bl	80017a0 <HAL_GPIO_Init>
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010800 	.word	0x40010800

080003d8 <MX_USART1_UART_Init>:
  * @brief USART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <MX_USART1_UART_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 8000410:	f002 f8de 	bl	80025d0 <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041a:	f000 f8c1 	bl	80005a0 <Error_Handler>
  }

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000005c 	.word	0x2000005c
 8000428:	40013800 	.word	0x40013800

0800042c <StartSensorTask>:
  * @brief  Function implementing the sensorTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartSensorTask(void *argument)
{
 800042c:	b5b0      	push	{r4, r5, r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Start the ADC conversion */
    HAL_ADC_Start(&hadc1);
 8000434:	481f      	ldr	r0, [pc, #124]	; (80004b4 <StartSensorTask+0x88>)
 8000436:	f000 fb85 	bl	8000b44 <HAL_ADC_Start>
    /* Poll for ADC conversion completion */
    if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800043a:	f04f 31ff 	mov.w	r1, #4294967295
 800043e:	481d      	ldr	r0, [pc, #116]	; (80004b4 <StartSensorTask+0x88>)
 8000440:	f000 fc5a 	bl	8000cf8 <HAL_ADC_PollForConversion>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d113      	bne.n	8000472 <StartSensorTask+0x46>
    	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <StartSensorTask+0x8c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 31ff 	mov.w	r1, #4294967295
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fc36 	bl	8002cc4 <osMutexAcquire>
		/* Get the ADC converted value */
		moistureLevel = HAL_ADC_GetValue(&hadc1);
 8000458:	4816      	ldr	r0, [pc, #88]	; (80004b4 <StartSensorTask+0x88>)
 800045a:	f000 fd53 	bl	8000f04 <HAL_ADC_GetValue>
 800045e:	4603      	mov	r3, r0
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <StartSensorTask+0x90>)
 8000464:	801a      	strh	r2, [r3, #0]
		osMutexRelease(moistureMutex1Handle);
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <StartSensorTask+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fc88 	bl	8002d80 <osMutexRelease>
 8000470:	e017      	b.n	80004a2 <StartSensorTask+0x76>
    }
    else{
    	char error_msg[] = "ADC conversion failed!\r\n";
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <StartSensorTask+0x94>)
 8000474:	f107 040c 	add.w	r4, r7, #12
 8000478:	461d      	mov	r5, r3
 800047a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000482:	c403      	stmia	r4!, {r0, r1}
 8000484:	7022      	strb	r2, [r4, #0]
    	HAL_UART_Transmit(&huart1, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe60 	bl	8000150 <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	f107 010c 	add.w	r1, r7, #12
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <StartSensorTask+0x98>)
 800049e:	f002 f8e7 	bl	8002670 <HAL_UART_Transmit>
    }
    /* Stop the ADC conversion */
    HAL_ADC_Stop(&hadc1);
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <StartSensorTask+0x88>)
 80004a4:	f000 fbfc 	bl	8000ca0 <HAL_ADC_Stop>
    /* Delay for 1 second */
    HAL_Delay(1000);
 80004a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ac:	f000 fa4e 	bl	800094c <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 80004b0:	e7c0      	b.n	8000434 <StartSensorTask+0x8>
 80004b2:	bf00      	nop
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	200000f8 	.word	0x200000f8
 80004bc:	200000ea 	.word	0x200000ea
 80004c0:	08005c0c 	.word	0x08005c0c
 80004c4:	2000005c 	.word	0x2000005c

080004c8 <StartWateringTask>:
  * @brief Function implementing the wateringTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartWateringTask(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Check if moisture level is below threshold */
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <StartWateringTask+0x4c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f04f 31ff 	mov.w	r1, #4294967295
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 fbf3 	bl	8002cc4 <osMutexAcquire>
	uint16_t threshold = moistureLevel;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <StartWateringTask+0x50>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(moistureMutex1Handle);
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <StartWateringTask+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fc49 	bl	8002d80 <osMutexRelease>
    if(threshold < 30){
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	2b1d      	cmp	r3, #29
 80004f2:	d805      	bhi.n	8000500 <StartWateringTask+0x38>
      /* Turn on the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <StartWateringTask+0x54>)
 80004fa:	f001 fad5 	bl	8001aa8 <HAL_GPIO_WritePin>
 80004fe:	e004      	b.n	800050a <StartWateringTask+0x42>
    } else {
      /* Turn off the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <StartWateringTask+0x54>)
 8000506:	f001 facf 	bl	8001aa8 <HAL_GPIO_WritePin>
    }
    /* Delay for 1 second */
    HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 fa1d 	bl	800094c <HAL_Delay>
  while(1){
 8000512:	e7dd      	b.n	80004d0 <StartWateringTask+0x8>
 8000514:	200000f8 	.word	0x200000f8
 8000518:	200000ea 	.word	0x200000ea
 800051c:	40010800 	.word	0x40010800

08000520 <StartCanTask>:
  * @brief Function implementing the canTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartCanTask(void *argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Set up CAN message header */
  TxHeader.DLC = 2;
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <StartCanTask+0x68>)
 800052a:	2202      	movs	r2, #2
 800052c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <StartCanTask+0x68>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <StartCanTask+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x0A; // Unique ID for Node 2
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <StartCanTask+0x68>)
 800053c:	220a      	movs	r2, #10
 800053e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  while(1){
    /* Prepare CAN data */
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <StartCanTask+0x6c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fbbb 	bl	8002cc4 <osMutexAcquire>
    TxData[0] = moistureLevel & 0xFF;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <StartCanTask+0x70>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <StartCanTask+0x74>)
 8000556:	701a      	strb	r2, [r3, #0]
    TxData[1] = (moistureLevel >> 8) & 0xFF;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <StartCanTask+0x70>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <StartCanTask+0x74>)
 8000564:	705a      	strb	r2, [r3, #1]
    osMutexRelease(moistureMutex1Handle);
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <StartCanTask+0x6c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fc08 	bl	8002d80 <osMutexRelease>
    /* Transmit CAN message */
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <StartCanTask+0x78>)
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <StartCanTask+0x74>)
 8000574:	4904      	ldr	r1, [pc, #16]	; (8000588 <StartCanTask+0x68>)
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <StartCanTask+0x7c>)
 8000578:	f000 ff5e 	bl	8001438 <HAL_CAN_AddTxMessage>
    /* Delay for 1 second */
    HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 f9e4 	bl	800094c <HAL_Delay>
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 8000584:	e7dc      	b.n	8000540 <StartCanTask+0x20>
 8000586:	bf00      	nop
 8000588:	200000cc 	.word	0x200000cc
 800058c:	200000f8 	.word	0x200000f8
 8000590:	200000ea 	.word	0x200000ea
 8000594:	200000e8 	.word	0x200000e8
 8000598:	200000e4 	.word	0x200000e4
 800059c:	200000a4 	.word	0x200000a4

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* Disable interrupts and enter an infinite loop */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_MspInit+0x68>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <HAL_MspInit+0x68>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x68>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <HAL_MspInit+0x68>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x68>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	210f      	movs	r1, #15
 80005e6:	f06f 0001 	mvn.w	r0, #1
 80005ea:	f001 f8b0 	bl	800174e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x6c>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x6c>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0x6c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d121      	bne.n	8000680 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0x70>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_ADC_MspInit+0x70>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <HAL_ADC_MspInit+0x70>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_ADC_MspInit+0x74>)
 800067c:	f001 f890 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40012400 	.word	0x40012400
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <HAL_CAN_MspInit+0xb0>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d143      	bne.n	800073c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a23      	ldr	r2, [pc, #140]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4814      	ldr	r0, [pc, #80]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006fa:	f001 f851 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <HAL_CAN_MspInit+0xb8>)
 8000714:	f001 f844 	bl	80017a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_CAN_MspInit+0xbc>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_CAN_MspInit+0xbc>)
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40006400 	.word	0x40006400
 8000748:	40021000 	.word	0x40021000
 800074c:	40010c00 	.word	0x40010c00
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d131      	bne.n	80007d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007ba:	f000 fff1 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007d4:	f000 ffe4 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013800 	.word	0x40013800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f87b 	bl	8000914 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800081e:	f004 f8d1 	bl	80049c4 <xTaskGetSchedulerState>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d001      	beq.n	800082c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000828:	f004 ff36 	bl	8005698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff fff8 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f005 f979 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fc79 	bl	8000160 <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000878:	08005d04 	.word	0x08005d04
  ldr r2, =_sbss
 800087c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000880:	20001a48 	.word	0x20001a48

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 ff4d 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fe82 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff57 	bl	8001786 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 ff2d 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	200000fc 	.word	0x200000fc

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	200000fc 	.word	0x200000fc

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff0 	bl	8000938 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffe0 	bl	8000938 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e0be      	b.n	8000b34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fe22 	bl	800061c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 fbf1 	bl	80011c0 <ADC_ConversionStop_Disable>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 8099 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8095 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a00:	f023 0302 	bic.w	r3, r3, #2
 8000a04:	f043 0202 	orr.w	r2, r3, #2
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b1b      	ldrb	r3, [r3, #12]
 8000a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a2c:	d003      	beq.n	8000a36 <HAL_ADC_Init+0xa2>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <HAL_ADC_Init+0xa8>
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	e000      	b.n	8000a3e <HAL_ADC_Init+0xaa>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7d1b      	ldrb	r3, [r3, #20]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d119      	bne.n	8000a80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7b1b      	ldrb	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	035a      	lsls	r2, r3, #13
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e00b      	b.n	8000a80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	f043 0220 	orr.w	r2, r3, #32
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <HAL_ADC_Init+0x1a8>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab0:	d003      	beq.n	8000aba <HAL_ADC_Init+0x126>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d104      	bne.n	8000ac4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	051b      	lsls	r3, r3, #20
 8000ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_ADC_Init+0x1ac>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d10b      	bne.n	8000b00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f023 0303 	bic.w	r3, r3, #3
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afe:	e018      	b.n	8000b32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f023 0312 	bic.w	r3, r3, #18
 8000b08:	f043 0210 	orr.w	r2, r3, #16
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	f043 0201 	orr.w	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b20:	e007      	b.n	8000b32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	f043 0210 	orr.w	r2, r3, #16
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b40:	ff1f0efe 	.word	0xff1f0efe

08000b44 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d101      	bne.n	8000b5e <HAL_ADC_Start+0x1a>
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	e098      	b.n	8000c90 <HAL_ADC_Start+0x14c>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2201      	movs	r2, #1
 8000b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 fad0 	bl	800110c <ADC_Enable>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 8087 	bne.w	8000c86 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a41      	ldr	r2, [pc, #260]	; (8000c98 <HAL_ADC_Start+0x154>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d105      	bne.n	8000ba2 <HAL_ADC_Start+0x5e>
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <HAL_ADC_Start+0x158>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d115      	bne.n	8000bce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d026      	beq.n	8000c0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bcc:	e01d      	b.n	8000c0a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <HAL_ADC_Start+0x158>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d004      	beq.n	8000bee <HAL_ADC_Start+0xaa>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <HAL_ADC_Start+0x154>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10d      	bne.n	8000c0a <HAL_ADC_Start+0xc6>
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <HAL_ADC_Start+0x158>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1a:	f023 0206 	bic.w	r2, r3, #6
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c22:	e002      	b.n	8000c2a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f06f 0202 	mvn.w	r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c4a:	d113      	bne.n	8000c74 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c50:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <HAL_ADC_Start+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_ADC_Start+0x158>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d108      	bne.n	8000c74 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	e00c      	b.n	8000c8e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	e003      	b.n	8000c8e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40012800 	.word	0x40012800
 8000c9c:	40012400 	.word	0x40012400

08000ca0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_ADC_Stop+0x1a>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e01a      	b.n	8000cf0 <HAL_ADC_Stop+0x50>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fa7c 	bl	80011c0 <ADC_ConversionStop_Disable>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cda:	f023 0301 	bic.w	r3, r3, #1
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d0e:	f7ff fe13 	bl	8000938 <HAL_GetTick>
 8000d12:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	f043 0220 	orr.w	r2, r3, #32
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0d3      	b.n	8000ee2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d131      	bne.n	8000dac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d12a      	bne.n	8000dac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d56:	e021      	b.n	8000d9c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5e:	d01d      	beq.n	8000d9c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <HAL_ADC_PollForConversion+0x7e>
 8000d66:	f7ff fde7 	bl	8000938 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d212      	bcs.n	8000d9c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10b      	bne.n	8000d9c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f043 0204 	orr.w	r2, r3, #4
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e0a2      	b.n	8000ee2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0d6      	beq.n	8000d58 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000daa:	e070      	b.n	8000e8e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_ADC_PollForConversion+0x1f4>)
 8000dae:	681c      	ldr	r4, [r3, #0]
 8000db0:	2002      	movs	r0, #2
 8000db2:	f001 fb57 	bl	8002464 <HAL_RCCEx_GetPeriphCLKFreq>
 8000db6:	4603      	mov	r3, r0
 8000db8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6919      	ldr	r1, [r3, #16]
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_ADC_PollForConversion+0x1f8>)
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d118      	bne.n	8000dfc <HAL_ADC_PollForConversion+0x104>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68d9      	ldr	r1, [r3, #12]
 8000dd0:	4b48      	ldr	r3, [pc, #288]	; (8000ef4 <HAL_ADC_PollForConversion+0x1fc>)
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d111      	bne.n	8000dfc <HAL_ADC_PollForConversion+0x104>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6919      	ldr	r1, [r3, #16]
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <HAL_ADC_PollForConversion+0x200>)
 8000de0:	400b      	ands	r3, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d108      	bne.n	8000df8 <HAL_ADC_PollForConversion+0x100>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68d9      	ldr	r1, [r3, #12]
 8000dec:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_ADC_PollForConversion+0x204>)
 8000dee:	400b      	ands	r3, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_ADC_PollForConversion+0x100>
 8000df4:	2314      	movs	r3, #20
 8000df6:	e020      	b.n	8000e3a <HAL_ADC_PollForConversion+0x142>
 8000df8:	2329      	movs	r3, #41	; 0x29
 8000dfa:	e01e      	b.n	8000e3a <HAL_ADC_PollForConversion+0x142>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6919      	ldr	r1, [r3, #16]
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <HAL_ADC_PollForConversion+0x200>)
 8000e04:	400b      	ands	r3, r1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_ADC_PollForConversion+0x120>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68d9      	ldr	r1, [r3, #12]
 8000e10:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <HAL_ADC_PollForConversion+0x204>)
 8000e12:	400b      	ands	r3, r1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00d      	beq.n	8000e34 <HAL_ADC_PollForConversion+0x13c>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6919      	ldr	r1, [r3, #16]
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_ADC_PollForConversion+0x208>)
 8000e20:	400b      	ands	r3, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d108      	bne.n	8000e38 <HAL_ADC_PollForConversion+0x140>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68d9      	ldr	r1, [r3, #12]
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <HAL_ADC_PollForConversion+0x208>)
 8000e2e:	400b      	ands	r3, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_PollForConversion+0x140>
 8000e34:	2354      	movs	r3, #84	; 0x54
 8000e36:	e000      	b.n	8000e3a <HAL_ADC_PollForConversion+0x142>
 8000e38:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e40:	e021      	b.n	8000e86 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d01a      	beq.n	8000e80 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_ADC_PollForConversion+0x168>
 8000e50:	f7ff fd72 	bl	8000938 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d20f      	bcs.n	8000e80 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d90b      	bls.n	8000e80 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f043 0204 	orr.w	r2, r3, #4
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e030      	b.n	8000ee2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d8d9      	bhi.n	8000e42 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f06f 0212 	mvn.w	r2, #18
 8000e96:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eb2:	d115      	bne.n	8000ee0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d105      	bne.n	8000ee0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f043 0201 	orr.w	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	24924924 	.word	0x24924924
 8000ef4:	00924924 	.word	0x00924924
 8000ef8:	12492492 	.word	0x12492492
 8000efc:	00492492 	.word	0x00492492
 8000f00:	00249249 	.word	0x00249249

08000f04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x20>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e0dc      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1da>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d81c      	bhi.n	8000f86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b05      	subs	r3, #5
 8000f5e:	221f      	movs	r2, #31
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4019      	ands	r1, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b05      	subs	r3, #5
 8000f78:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
 8000f84:	e03c      	b.n	8001000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	d81c      	bhi.n	8000fc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b23      	subs	r3, #35	; 0x23
 8000fa0:	221f      	movs	r2, #31
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4019      	ands	r1, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b23      	subs	r3, #35	; 0x23
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc6:	e01b      	b.n	8001000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	221f      	movs	r2, #31
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4019      	ands	r1, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b41      	subs	r3, #65	; 0x41
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b09      	cmp	r3, #9
 8001006:	d91c      	bls.n	8001042 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68d9      	ldr	r1, [r3, #12]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	2207      	movs	r2, #7
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	4019      	ands	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6898      	ldr	r0, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	3b1e      	subs	r3, #30
 8001034:	fa00 f203 	lsl.w	r2, r0, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	e019      	b.n	8001076 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6919      	ldr	r1, [r3, #16]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	2207      	movs	r2, #7
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4019      	ands	r1, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	fa00 f203 	lsl.w	r2, r0, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d003      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001082:	2b11      	cmp	r3, #17
 8001084:	d132      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_ADC_ConfigChannel+0x1e4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d125      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d126      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d11a      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_ADC_ConfigChannel+0x1e8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_ADC_ConfigChannel+0x1ec>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0c9a      	lsrs	r2, r3, #18
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x1b2>
 80010da:	e007      	b.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f043 0220 	orr.w	r2, r3, #32
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40012400 	.word	0x40012400
 8001104:	20000000 	.word	0x20000000
 8001108:	431bde83 	.word	0x431bde83

0800110c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d040      	beq.n	80011ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <ADC_Enable+0xac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <ADC_Enable+0xb0>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	0c9b      	lsrs	r3, r3, #18
 8001146:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001148:	e002      	b.n	8001150 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001156:	f7ff fbef 	bl	8000938 <HAL_GetTick>
 800115a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800115c:	e01f      	b.n	800119e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800115e:	f7ff fbeb 	bl	8000938 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d918      	bls.n	800119e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d011      	beq.n	800119e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	f043 0210 	orr.w	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e007      	b.n	80011ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1d8      	bne.n	800115e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12e      	bne.n	8001238 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ea:	f7ff fba5 	bl	8000938 <HAL_GetTick>
 80011ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f0:	e01b      	b.n	800122a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011f2:	f7ff fba1 	bl	8000938 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d914      	bls.n	800122a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10d      	bne.n	800122a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e007      	b.n	800123a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d0dc      	beq.n	80011f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0ed      	b.n	8001430 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fa17 	bl	8000694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001276:	f7ff fb5f 	bl	8000938 <HAL_GetTick>
 800127a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800127c:	e012      	b.n	80012a4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800127e:	f7ff fb5b 	bl	8000938 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b0a      	cmp	r3, #10
 800128a:	d90b      	bls.n	80012a4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2205      	movs	r2, #5
 800129c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0c5      	b.n	8001430 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0e5      	beq.n	800127e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0202 	bic.w	r2, r2, #2
 80012c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c2:	f7ff fb39 	bl	8000938 <HAL_GetTick>
 80012c6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c8:	e012      	b.n	80012f0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ca:	f7ff fb35 	bl	8000938 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b0a      	cmp	r3, #10
 80012d6:	d90b      	bls.n	80012f0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2205      	movs	r2, #5
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e09f      	b.n	8001430 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1e5      	bne.n	80012ca <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e1b      	ldrb	r3, [r3, #24]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e007      	b.n	8001328 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001326:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e5b      	ldrb	r3, [r3, #25]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e9b      	ldrb	r3, [r3, #26]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e007      	b.n	800137c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0220 	bic.w	r2, r2, #32
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7edb      	ldrb	r3, [r3, #27]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0210 	bic.w	r2, r2, #16
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e007      	b.n	80013a6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0210 	orr.w	r2, r2, #16
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7f1b      	ldrb	r3, [r3, #28]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0208 	orr.w	r2, r2, #8
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e007      	b.n	80013d0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0208 	bic.w	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7f5b      	ldrb	r3, [r3, #29]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d108      	bne.n	80013ea <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e007      	b.n	80013fa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0204 	bic.w	r2, r2, #4
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	ea42 0103 	orr.w	r1, r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001456:	7ffb      	ldrb	r3, [r7, #31]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <HAL_CAN_AddTxMessage+0x2c>
 800145c:	7ffb      	ldrb	r3, [r7, #31]
 800145e:	2b02      	cmp	r3, #2
 8001460:	f040 80ad 	bne.w	80015be <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8095 	beq.w	80015ae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	0e1b      	lsrs	r3, r3, #24
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800148e:	2201      	movs	r2, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10d      	bne.n	80014bc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014aa:	68f9      	ldr	r1, [r7, #12]
 80014ac:	6809      	ldr	r1, [r1, #0]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3318      	adds	r3, #24
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	440b      	add	r3, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00f      	b.n	80014dc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014cc:	68f9      	ldr	r1, [r7, #12]
 80014ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3318      	adds	r3, #24
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	440b      	add	r3, r1
 80014da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3318      	adds	r3, #24
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	7d1b      	ldrb	r3, [r3, #20]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d111      	bne.n	800151c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3318      	adds	r3, #24
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3318      	adds	r3, #24
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	440b      	add	r3, r1
 8001518:	3304      	adds	r3, #4
 800151a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3307      	adds	r3, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	061a      	lsls	r2, r3, #24
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3306      	adds	r3, #6
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3305      	adds	r3, #5
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4313      	orrs	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	3204      	adds	r2, #4
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	4610      	mov	r0, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6811      	ldr	r1, [r2, #0]
 8001544:	ea43 0200 	orr.w	r2, r3, r0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	440b      	add	r3, r1
 800154e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001552:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3303      	adds	r3, #3
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	061a      	lsls	r2, r3, #24
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3302      	adds	r3, #2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3301      	adds	r3, #1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4313      	orrs	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	4610      	mov	r0, r2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	6811      	ldr	r1, [r2, #0]
 800157a:	ea43 0200 	orr.w	r2, r3, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	440b      	add	r3, r1
 8001584:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001588:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3318      	adds	r3, #24
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	6811      	ldr	r1, [r2, #0]
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3318      	adds	r3, #24
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	440b      	add	r3, r1
 80015a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e00e      	b.n	80015cc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e006      	b.n	80015cc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
	...

080015d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	; (800161c <__NVIC_SetPriorityGrouping+0x44>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff90 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff49 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff5e 	bl	8001620 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff90 	bl	8001690 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5f 	bl	800163c <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffb0 	bl	80016f4 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e169      	b.n	8001a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b4:	2201      	movs	r2, #1
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8158 	bne.w	8001a82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d05e      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017dc:	4a98      	ldr	r2, [pc, #608]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d875      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017e2:	4a98      	ldr	r2, [pc, #608]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d058      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017e8:	4a96      	ldr	r2, [pc, #600]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d86f      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017ee:	4a96      	ldr	r2, [pc, #600]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d052      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017f4:	4a94      	ldr	r2, [pc, #592]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d869      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017fa:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 8001800:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d863      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001806:	4a92      	ldr	r2, [pc, #584]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d046      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 800180c:	4a90      	ldr	r2, [pc, #576]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d85d      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d82a      	bhi.n	800186c <HAL_GPIO_Init+0xcc>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d859      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_GPIO_Init+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800189b 	.word	0x0800189b
 8001824:	08001875 	.word	0x08001875
 8001828:	08001887 	.word	0x08001887
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	080018cf 	.word	0x080018cf
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018cf 	.word	0x080018cf
 8001844:	080018cf 	.word	0x080018cf
 8001848:	080018cf 	.word	0x080018cf
 800184c:	080018cf 	.word	0x080018cf
 8001850:	080018cf 	.word	0x080018cf
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018cf 	.word	0x080018cf
 800185c:	080018cf 	.word	0x080018cf
 8001860:	080018cf 	.word	0x080018cf
 8001864:	0800187d 	.word	0x0800187d
 8001868:	08001891 	.word	0x08001891
 800186c:	4a79      	ldr	r2, [pc, #484]	; (8001a54 <HAL_GPIO_Init+0x2b4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e029      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e024      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	3308      	adds	r3, #8
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e01f      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e01a      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a2:	2304      	movs	r3, #4
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e013      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
          break;
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	615a      	str	r2, [r3, #20]
          break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          break;
 80018ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d801      	bhi.n	80018da <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_Init+0x13e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d802      	bhi.n	80018ec <HAL_GPIO_Init+0x14c>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x152>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3b08      	subs	r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	210f      	movs	r1, #15
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_GPIO_Init+0x2c0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1ec>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3f      	ldr	r2, [pc, #252]	; (8001a64 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e0>
 800197c:	2303      	movs	r3, #3
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001980:	2304      	movs	r3, #4
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001984:	2302      	movs	r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199e:	492f      	ldr	r1, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	492c      	ldr	r1, [pc, #176]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4928      	ldr	r1, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	491e      	ldr	r1, [pc, #120]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4914      	ldr	r1, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d021      	beq.n	8001a74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e021      	b.n	8001a82 <HAL_GPIO_Init+0x2e2>
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae8e 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	372c      	adds	r7, #44	; 0x2c
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e272      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8087 	beq.w	8001c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b04:	4b8f      	ldr	r3, [pc, #572]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
 8001b10:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x12c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d168      	bne.n	8001c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e24c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x76>
 8001b40:	4b80      	ldr	r3, [pc, #512]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7f      	ldr	r2, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b78      	ldr	r3, [pc, #480]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xbc>
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a71      	ldr	r2, [pc, #452]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b94:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fec0 	bl	8000938 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe febc 	bl	8000938 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e200      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe4>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe feac 	bl	8000938 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7fe fea8 	bl	8000938 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1ec      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x10c>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1e:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1c0      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4939      	ldr	r1, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7fe fe61 	bl	8000938 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7fe fe5d 	bl	8000938 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1a1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe fe40 	bl	8000938 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7fe fe3c 	bl	8000938 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e180      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03a      	beq.n	8001d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d019      	beq.n	8001d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fe20 	bl	8000938 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7fe fe1c 	bl	8000938 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e160      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 face 	bl	80022bc <RCC_Delay>
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7fe fe06 	bl	8000938 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	e00f      	b.n	8001d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7fe fe02 	bl	8000938 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d908      	bls.n	8001d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e146      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	42420000 	.word	0x42420000
 8001d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b92      	ldr	r3, [pc, #584]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e9      	bne.n	8001d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a6 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a87      	ldr	r2, [pc, #540]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7e      	ldr	r2, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fdc3 	bl	8000938 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe fdbf 	bl	8000938 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	; 0x64
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e103      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b6f      	ldr	r3, [pc, #444]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a6e      	ldr	r2, [pc, #440]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001df2:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a69      	ldr	r2, [pc, #420]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a66      	ldr	r2, [pc, #408]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	e01c      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d10c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x356>
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a60      	ldr	r2, [pc, #384]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e00b      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d015      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fd73 	bl	8000938 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fd6f 	bl	8000938 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0b1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCC_OscConfig+0x37e>
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe fd5d 	bl	8000938 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7fe fd59 	bl	8000938 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e09b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d061      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d146      	bne.n	8001f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_RCC_OscConfig+0x4cc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fd2d 	bl	8000938 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe fd29 	bl	8000938 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e06d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d108      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4921      	ldr	r1, [pc, #132]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a19      	ldr	r1, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	491b      	ldr	r1, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fcfd 	bl	8000938 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe fcf9 	bl	8000938 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e03d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46a>
 8001f60:	e035      	b.n	8001fce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fce6 	bl	8000938 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fce2 	bl	8000938 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e026      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x498>
 8001f8e:	e01e      	b.n	8001fce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e019      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x500>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0d0      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4965      	ldr	r1, [pc, #404]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d040      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e073      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4936      	ldr	r1, [pc, #216]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fc34 	bl	8000938 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe fc30 	bl	8000938 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e053      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d210      	bcs.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fb92 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08005cbc 	.word	0x08005cbc
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x30>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x36>
 80021de:	e027      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	e027      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0c5b      	lsrs	r3, r3, #17
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	fb03 f202 	mul.w	r2, r3, r2
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e004      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	693b      	ldr	r3, [r7, #16]
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	007a1200 	.word	0x007a1200
 800224c:	08005cd4 	.word	0x08005cd4
 8002250:	08005ce4 	.word	0x08005ce4
 8002254:	003d0900 	.word	0x003d0900

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_RCC_GetHCLKFreq+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002270:	f7ff fff2 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4903      	ldr	r1, [pc, #12]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08005ccc 	.word	0x08005ccc

08002294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002298:	f7ff ffde 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0adb      	lsrs	r3, r3, #11
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08005ccc 	.word	0x08005ccc

080022bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <RCC_Delay+0x34>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <RCC_Delay+0x38>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d8:	bf00      	nop
  }
  while (Delay --);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f9      	bne.n	80022d8 <RCC_Delay+0x1c>
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	20000000 	.word	0x20000000
 80022f4:	10624dd3 	.word	0x10624dd3

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d07d      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234c:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a42      	ldr	r2, [pc, #264]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002358:	f7fe faee 	bl	8000938 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	e008      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe faea 	bl	8000938 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e06d      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d02e      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d027      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ac:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023b2:	4a29      	ldr	r2, [pc, #164]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d014      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fab9 	bl	8000938 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fab5 	bl	8000938 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e036      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4917      	ldr	r1, [pc, #92]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	4a13      	ldr	r2, [pc, #76]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4904      	ldr	r1, [pc, #16]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420440 	.word	0x42420440

08002464 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b10      	cmp	r3, #16
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b10      	cmp	r3, #16
 800248a:	f200 808a 	bhi.w	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d045      	beq.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d075      	beq.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800249a:	e082      	b.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d07b      	beq.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	4a41      	ldr	r2, [pc, #260]	; (80025bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0c5b      	lsrs	r3, r3, #17
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024e0:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e004      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002508:	d102      	bne.n	8002510 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	61bb      	str	r3, [r7, #24]
      break;
 800250e:	e04a      	b.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
      break;
 800251e:	e042      	b.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d108      	bne.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800253c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	e01f      	b.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254e:	d109      	bne.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800255c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e00f      	b.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800256e:	d11c      	bne.n	80025aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d016      	beq.n	80025aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800257c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002580:	61bb      	str	r3, [r7, #24]
      break;
 8002582:	e012      	b.n	80025aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002584:	e011      	b.n	80025aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002586:	f7ff fe85 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0b9b      	lsrs	r3, r3, #14
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	61bb      	str	r3, [r7, #24]
      break;
 80025a0:	e004      	b.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025a2:	bf00      	nop
 80025a4:	e002      	b.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025aa:	bf00      	nop
    }
  }
  return (frequency);
 80025ac:	69bb      	ldr	r3, [r7, #24]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08005ce8 	.word	0x08005ce8
 80025c0:	08005cf8 	.word	0x08005cf8
 80025c4:	007a1200 	.word	0x007a1200
 80025c8:	003d0900 	.word	0x003d0900
 80025cc:	aaaaaaab 	.word	0xaaaaaaab

080025d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e042      	b.n	8002668 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe f8ac 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2224      	movs	r2, #36	; 0x24
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f91d 	bl	8002854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	d16d      	bne.n	800276c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_UART_Transmit+0x2c>
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e066      	b.n	800276e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ae:	f7fe f943 	bl	8000938 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d108      	bne.n	80026dc <HAL_UART_Transmit+0x6c>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	e003      	b.n	80026e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026e4:	e02a      	b.n	800273c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f840 	bl	8002776 <UART_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e036      	b.n	800276e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10b      	bne.n	800271e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	3302      	adds	r3, #2
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e007      	b.n	800272e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1cf      	bne.n	80026e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2200      	movs	r2, #0
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f810 	bl	8002776 <UART_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e006      	b.n	800276e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b090      	sub	sp, #64	; 0x40
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4613      	mov	r3, r2
 8002784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002786:	e050      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d04c      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002796:	f7fe f8cf 	bl	8000938 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d241      	bcs.n	800282a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c6:	637a      	str	r2, [r7, #52]	; 0x34
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ce:	e841 2300 	strex	r3, r2, [r1]
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e5      	bne.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3314      	adds	r3, #20
 80027e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3314      	adds	r3, #20
 80027f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fa:	623a      	str	r2, [r7, #32]
 80027fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	69f9      	ldr	r1, [r7, #28]
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	61bb      	str	r3, [r7, #24]
   return(result);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e5      	bne.n	80027da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e00f      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4013      	ands	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	429a      	cmp	r2, r3
 8002846:	d09f      	beq.n	8002788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3740      	adds	r7, #64	; 0x40
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800288e:	f023 030c 	bic.w	r3, r3, #12
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	430b      	orrs	r3, r1
 800289a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <UART_SetConfig+0x114>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d103      	bne.n	80028c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028bc:	f7ff fcea 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	e002      	b.n	80028ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028c4:	f7ff fcd2 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 80028c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009a      	lsls	r2, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	4a22      	ldr	r2, [pc, #136]	; (800296c <UART_SetConfig+0x118>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	0119      	lsls	r1, r3, #4
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	009a      	lsls	r2, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <UART_SetConfig+0x118>)
 8002902:	fba3 0302 	umull	r0, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	fb00 f303 	mul.w	r3, r0, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	3332      	adds	r3, #50	; 0x32
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <UART_SetConfig+0x118>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002920:	4419      	add	r1, r3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	009a      	lsls	r2, r3, #2
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	fbb2 f2f3 	udiv	r2, r2, r3
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <UART_SetConfig+0x118>)
 800293a:	fba3 0302 	umull	r0, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2064      	movs	r0, #100	; 0x64
 8002942:	fb00 f303 	mul.w	r3, r0, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <UART_SetConfig+0x118>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	440a      	add	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40013800 	.word	0x40013800
 800296c:	51eb851f 	.word	0x51eb851f

08002970 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002976:	f3ef 8305 	mrs	r3, IPSR
 800297a:	60bb      	str	r3, [r7, #8]
  return(result);
 800297c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002982:	f3ef 8310 	mrs	r3, PRIMASK
 8002986:	607b      	str	r3, [r7, #4]
  return(result);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <osKernelInitialize+0x32>
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <osKernelInitialize+0x60>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d109      	bne.n	80029aa <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002996:	f3ef 8311 	mrs	r3, BASEPRI
 800299a:	603b      	str	r3, [r7, #0]
  return(result);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029a2:	f06f 0305 	mvn.w	r3, #5
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e00c      	b.n	80029c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <osKernelInitialize+0x60>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <osKernelInitialize+0x60>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e002      	b.n	80029c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029c4:	68fb      	ldr	r3, [r7, #12]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	20000100 	.word	0x20000100

080029d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029da:	f3ef 8305 	mrs	r3, IPSR
 80029de:	60bb      	str	r3, [r7, #8]
  return(result);
 80029e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ea:	607b      	str	r3, [r7, #4]
  return(result);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <osKernelStart+0x32>
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <osKernelStart+0x64>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d109      	bne.n	8002a0e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029fa:	f3ef 8311 	mrs	r3, BASEPRI
 80029fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a06:	f06f 0305 	mvn.w	r3, #5
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e00e      	b.n	8002a2c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <osKernelStart+0x64>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <osKernelStart+0x64>)
 8002a18:	2202      	movs	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a1c:	f001 fb78 	bl	8004110 <vTaskStartScheduler>
      stat = osOK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e002      	b.n	8002a2c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000100 	.word	0x20000100

08002a3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b092      	sub	sp, #72	; 0x48
 8002a40:	af04      	add	r7, sp, #16
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a4c:	f3ef 8305 	mrs	r3, IPSR
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 8094 	bne.w	8002b82 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5e:	623b      	str	r3, [r7, #32]
  return(result);
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 808d 	bne.w	8002b82 <osThreadNew+0x146>
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <osThreadNew+0x150>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d106      	bne.n	8002a7e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a70:	f3ef 8311 	mrs	r3, BASEPRI
 8002a74:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 8082 	bne.w	8002b82 <osThreadNew+0x146>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d07e      	beq.n	8002b82 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a88:	2318      	movs	r3, #24
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a90:	f107 031b 	add.w	r3, r7, #27
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d045      	beq.n	8002b2e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <osThreadNew+0x74>
        name = attr->name;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <osThreadNew+0x9a>
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	2b38      	cmp	r3, #56	; 0x38
 8002ac8:	d805      	bhi.n	8002ad6 <osThreadNew+0x9a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <osThreadNew+0x9e>
        return (NULL);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e054      	b.n	8002b84 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <osThreadNew+0xd4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b5b      	cmp	r3, #91	; 0x5b
 8002af8:	d90a      	bls.n	8002b10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <osThreadNew+0xd4>
        mem = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0e:	e010      	b.n	8002b32 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10c      	bne.n	8002b32 <osThreadNew+0xf6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <osThreadNew+0xf6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <osThreadNew+0xf6>
          mem = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2c:	e001      	b.n	8002b32 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d110      	bne.n	8002b5a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b40:	9202      	str	r2, [sp, #8]
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f001 f946 	bl	8003de0 <xTaskCreateStatic>
 8002b54:	4603      	mov	r3, r0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e013      	b.n	8002b82 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d110      	bne.n	8002b82 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 f990 	bl	8003e98 <xTaskCreate>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <osThreadNew+0x146>
          hTask = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3738      	adds	r7, #56	; 0x38
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000100 	.word	0x20000100

08002b90 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b9c:	f3ef 8305 	mrs	r3, IPSR
 8002ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ba2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 8085 	bne.w	8002cb4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bae:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d17e      	bne.n	8002cb4 <osMutexNew+0x124>
 8002bb6:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <osMutexNew+0x130>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d105      	bne.n	8002bca <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d174      	bne.n	8002cb4 <osMutexNew+0x124>
    if (attr != NULL) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	e001      	b.n	8002bdc <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <osMutexNew+0x5c>
      rmtx = 1U;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e001      	b.n	8002bf0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d15c      	bne.n	8002cb4 <osMutexNew+0x124>
      mem = -1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <osMutexNew+0x8c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b4f      	cmp	r3, #79	; 0x4f
 8002c14:	d902      	bls.n	8002c1c <osMutexNew+0x8c>
          mem = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e00c      	b.n	8002c36 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <osMutexNew+0xa6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <osMutexNew+0xa6>
            mem = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e001      	b.n	8002c36 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d112      	bne.n	8002c62 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4619      	mov	r1, r3
 8002c48:	2004      	movs	r0, #4
 8002c4a:	f000 fb3d 	bl	80032c8 <xQueueCreateMutexStatic>
 8002c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8002c50:	e016      	b.n	8002c80 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4619      	mov	r1, r3
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f000 fb35 	bl	80032c8 <xQueueCreateMutexStatic>
 8002c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8002c60:	e00e      	b.n	8002c80 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002c6e:	2004      	movs	r0, #4
 8002c70:	f000 fb12 	bl	8003298 <xQueueCreateMutex>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24
 8002c76:	e003      	b.n	8002c80 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f000 fb0d 	bl	8003298 <xQueueCreateMutex>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <osMutexNew+0x110>
        if (attr != NULL) {
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <osMutexNew+0x104>
          name = attr->name;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e001      	b.n	8002c98 <osMutexNew+0x108>
        } else {
          name = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c9c:	f001 f844 	bl	8003d28 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <osMutexNew+0x124>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000100 	.word	0x20000100

08002cc4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ce2:	f3ef 8305 	mrs	r3, IPSR
 8002ce6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ce8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cee:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <osMutexAcquire+0x4a>
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <osMutexAcquire+0xb8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d109      	bne.n	8002d16 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d02:	f3ef 8311 	mrs	r3, BASEPRI
 8002d06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8002d0e:	f06f 0305 	mvn.w	r3, #5
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	e02c      	b.n	8002d70 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8002d1c:	f06f 0303 	mvn.w	r3, #3
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e025      	b.n	8002d70 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002d2a:	6839      	ldr	r1, [r7, #0]
 8002d2c:	69b8      	ldr	r0, [r7, #24]
 8002d2e:	f000 fb1a 	bl	8003366 <xQueueTakeMutexRecursive>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d01b      	beq.n	8002d70 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8002d3e:	f06f 0301 	mvn.w	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	e014      	b.n	8002d70 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002d46:	f06f 0302 	mvn.w	r3, #2
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	e010      	b.n	8002d70 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	69b8      	ldr	r0, [r7, #24]
 8002d52:	f000 fdb5 	bl	80038c0 <xQueueSemaphoreTake>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d009      	beq.n	8002d70 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8002d62:	f06f 0301 	mvn.w	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	e002      	b.n	8002d70 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002d6a:	f06f 0302 	mvn.w	r3, #2
 8002d6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002d70:	69fb      	ldr	r3, [r7, #28]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000100 	.word	0x20000100

08002d80 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d9c:	f3ef 8305 	mrs	r3, IPSR
 8002da0:	613b      	str	r3, [r7, #16]
  return(result);
 8002da2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <osMutexRelease+0x48>
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <osMutexRelease+0x9c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d109      	bne.n	8002dd0 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8002dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8002dc8:	f06f 0305 	mvn.w	r3, #5
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e01f      	b.n	8002e10 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8002dd6:	f06f 0303 	mvn.w	r3, #3
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e018      	b.n	8002e10 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002de4:	69b8      	ldr	r0, [r7, #24]
 8002de6:	f000 fa8a 	bl	80032fe <xQueueGiveMutexRecursive>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d00f      	beq.n	8002e10 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002df0:	f06f 0302 	mvn.w	r3, #2
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e00b      	b.n	8002e10 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	69b8      	ldr	r0, [r7, #24]
 8002e00:	f000 fae8 	bl	80033d4 <xQueueGenericSend>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d002      	beq.n	8002e10 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002e0a:	f06f 0302 	mvn.w	r3, #2
 8002e0e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8002e10:	69fb      	ldr	r3, [r7, #28]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000100 	.word	0x20000100

08002e20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <vApplicationGetIdleTaskMemory+0x28>)
 8002e30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000104 	.word	0x20000104
 8002e4c:	20000160 	.word	0x20000160

08002e50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <vApplicationGetTimerTaskMemory+0x2c>)
 8002e60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <vApplicationGetTimerTaskMemory+0x30>)
 8002e66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000360 	.word	0x20000360
 8002e80:	200003bc 	.word	0x200003bc

08002e84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f103 0208 	add.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f103 0208 	add.w	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f103 0208 	add.w	r2, r3, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d103      	bne.n	8002f40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e00c      	b.n	8002f5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3308      	adds	r3, #8
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e002      	b.n	8002f4e <vListInsert+0x2e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d2f6      	bcs.n	8002f48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d103      	bne.n	8002fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
	...

08002fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800300e:	f002 fac5 	bl	800559c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	441a      	add	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	3b01      	subs	r3, #1
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d114      	bne.n	800308e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01a      	beq.n	80030a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3310      	adds	r3, #16
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fad7 	bl	8004624 <xTaskRemoveFromEventList>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <xQueueGenericReset+0xcc>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	e009      	b.n	80030a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3310      	adds	r3, #16
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fef6 	bl	8002e84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fef1 	bl	8002e84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030a2:	f002 faab 	bl	80055fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08e      	sub	sp, #56	; 0x38
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <xQueueGenericCreateStatic+0x52>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <xQueueGenericCreateStatic+0x56>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <xQueueGenericCreateStatic+0x58>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	623b      	str	r3, [r7, #32]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <xQueueGenericCreateStatic+0x7e>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <xQueueGenericCreateStatic+0x82>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueGenericCreateStatic+0x84>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61fb      	str	r3, [r7, #28]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003152:	2350      	movs	r3, #80	; 0x50
 8003154:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b50      	cmp	r3, #80	; 0x50
 800315a:	d00a      	beq.n	8003172 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	61bb      	str	r3, [r7, #24]
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003184:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f843 	bl	800321e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800319a:	4618      	mov	r0, r3
 800319c:	3730      	adds	r7, #48	; 0x30
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08a      	sub	sp, #40	; 0x28
 80031a6:	af02      	add	r7, sp, #8
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <xQueueGenericCreate+0x2a>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	613b      	str	r3, [r7, #16]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e004      	b.n	80031e2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3350      	adds	r3, #80	; 0x50
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fad8 	bl	800579c <pvPortMalloc>
 80031ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00f      	beq.n	8003214 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	3350      	adds	r3, #80	; 0x50
 80031f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003202:	79fa      	ldrb	r2, [r7, #7]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f805 	bl	800321e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003214:	69bb      	ldr	r3, [r7, #24]
	}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e002      	b.n	8003240 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800324c:	2101      	movs	r1, #1
 800324e:	69b8      	ldr	r0, [r7, #24]
 8003250:	f7ff fec8 	bl	8002fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00e      	beq.n	8003290 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003284:	2300      	movs	r3, #0
 8003286:	2200      	movs	r2, #0
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8a2 	bl	80033d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032a2:	2301      	movs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	461a      	mov	r2, r3
 80032ae:	6939      	ldr	r1, [r7, #16]
 80032b0:	6978      	ldr	r0, [r7, #20]
 80032b2:	f7ff ff76 	bl	80031a2 <xQueueGenericCreate>
 80032b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff ffd3 	bl	8003264 <prvInitialiseMutex>

		return pxNewQueue;
 80032be:	68fb      	ldr	r3, [r7, #12]
	}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	6939      	ldr	r1, [r7, #16]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff fee4 	bl	80030b4 <xQueueGenericCreateStatic>
 80032ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7ff ffb8 	bl	8003264 <prvInitialiseMutex>

		return pxNewQueue;
 80032f4:	68fb      	ldr	r3, [r7, #12]
	}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	685c      	ldr	r4, [r3, #4]
 800332a:	f001 fb3d 	bl	80049a8 <xTaskGetCurrentTaskHandle>
 800332e:	4603      	mov	r3, r0
 8003330:	429c      	cmp	r4, r3
 8003332:	d111      	bne.n	8003358 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003346:	2300      	movs	r3, #0
 8003348:	2200      	movs	r2, #0
 800334a:	2100      	movs	r1, #0
 800334c:	6938      	ldr	r0, [r7, #16]
 800334e:	f000 f841 	bl	80033d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003352:	2301      	movs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	e001      	b.n	800335c <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800335c:	697b      	ldr	r3, [r7, #20]
	}
 800335e:	4618      	mov	r0, r3
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}

08003366 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003366:	b590      	push	{r4, r7, lr}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	60fb      	str	r3, [r7, #12]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	685c      	ldr	r4, [r3, #4]
 8003394:	f001 fb08 	bl	80049a8 <xTaskGetCurrentTaskHandle>
 8003398:	4603      	mov	r3, r0
 800339a:	429c      	cmp	r4, r3
 800339c:	d107      	bne.n	80033ae <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e00c      	b.n	80033c8 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	6938      	ldr	r0, [r7, #16]
 80033b2:	f000 fa85 	bl	80038c0 <xQueueSemaphoreTake>
 80033b6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80033c8:	697b      	ldr	r3, [r7, #20]
	}
 80033ca:	4618      	mov	r0, r3
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}
	...

080033d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08e      	sub	sp, #56	; 0x38
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueGenericSend+0x32>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d103      	bne.n	8003414 <xQueueGenericSend+0x40>
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <xQueueGenericSend+0x44>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <xQueueGenericSend+0x46>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <xQueueGenericSend+0x60>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d103      	bne.n	8003442 <xQueueGenericSend+0x6e>
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <xQueueGenericSend+0x72>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <xQueueGenericSend+0x74>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xQueueGenericSend+0x8e>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	623b      	str	r3, [r7, #32]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003462:	f001 faaf 	bl	80049c4 <xTaskGetSchedulerState>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <xQueueGenericSend+0x9e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <xQueueGenericSend+0xa2>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <xQueueGenericSend+0xa4>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <xQueueGenericSend+0xbe>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	61fb      	str	r3, [r7, #28]
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003492:	f002 f883 	bl	800559c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <xQueueGenericSend+0xd4>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d129      	bne.n	80034fc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ae:	f000 fb2a 	bl	8003b06 <prvCopyDataToQueue>
 80034b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d010      	beq.n	80034de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 f8af 	bl	8004624 <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <xQueueGenericSend+0x1f8>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e00a      	b.n	80034f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <xQueueGenericSend+0x1f8>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034f4:	f002 f882 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e063      	b.n	80035c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003502:	f002 f87b 	bl	80055fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003506:	2300      	movs	r3, #0
 8003508:	e05c      	b.n	80035c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4618      	mov	r0, r3
 8003516:	f001 f8e9 	bl	80046ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800351e:	f002 f86d 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003522:	f000 fe5b 	bl	80041dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003526:	f002 f839 	bl	800559c <vPortEnterCritical>
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003530:	b25b      	sxtb	r3, r3
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d103      	bne.n	8003540 <xQueueGenericSend+0x16c>
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003546:	b25b      	sxtb	r3, r3
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x182>
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003556:	f002 f851 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800355a:	1d3a      	adds	r2, r7, #4
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f8d8 	bl	8004718 <xTaskCheckForTimeOut>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d124      	bne.n	80035b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800356e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003570:	f000 fbc1 	bl	8003cf6 <prvIsQueueFull>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	3310      	adds	r3, #16
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fffe 	bl	8004584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358a:	f000 fb4c 	bl	8003c26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800358e:	f000 fe33 	bl	80041f8 <xTaskResumeAll>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af7c 	bne.w	8003492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <xQueueGenericSend+0x1f8>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	e772      	b.n	8003492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ae:	f000 fb3a 	bl	8003c26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035b2:	f000 fe21 	bl	80041f8 <xTaskResumeAll>
 80035b6:	e76c      	b.n	8003492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ba:	f000 fb34 	bl	8003c26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035be:	f000 fe1b 	bl	80041f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035c2:	2300      	movs	r3, #0
		}
	}
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3738      	adds	r7, #56	; 0x38
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <xQueueGenericSendFromISR+0x3c>
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <xQueueGenericSendFromISR+0x40>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <xQueueGenericSendFromISR+0x42>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	623b      	str	r3, [r7, #32]
}
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d103      	bne.n	800363a <xQueueGenericSendFromISR+0x6a>
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <xQueueGenericSendFromISR+0x6e>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <xQueueGenericSendFromISR+0x70>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61fb      	str	r3, [r7, #28]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800365a:	f002 f861 	bl	8005720 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800365e:	f3ef 8211 	mrs	r2, BASEPRI
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61ba      	str	r2, [r7, #24]
 8003674:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003676:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <xQueueGenericSendFromISR+0xbc>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d12c      	bne.n	80036e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369c:	f000 fa33 	bl	8003b06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d112      	bne.n	80036d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 ffb4 	bl	8004624 <xTaskRemoveFromEventList>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036d4:	3301      	adds	r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	b25a      	sxtb	r2, r3
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036e0:	2301      	movs	r3, #1
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036e4:	e001      	b.n	80036ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3738      	adds	r7, #56	; 0x38
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <xQueueReceive+0x30>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	623b      	str	r3, [r7, #32]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <xQueueReceive+0x3e>
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <xQueueReceive+0x42>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueReceive+0x44>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xQueueReceive+0x5e>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61fb      	str	r3, [r7, #28]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800375e:	f001 f931 	bl	80049c4 <xTaskGetSchedulerState>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <xQueueReceive+0x6e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <xQueueReceive+0x72>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <xQueueReceive+0x74>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xQueueReceive+0x8e>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61bb      	str	r3, [r7, #24]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800378e:	f001 ff05 	bl	800559c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01f      	beq.n	80037de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037a2:	f000 fa1a 	bl	8003bda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	1e5a      	subs	r2, r3, #1
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00f      	beq.n	80037d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	3310      	adds	r3, #16
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 ff32 	bl	8004624 <xTaskRemoveFromEventList>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <xQueueReceive+0x1bc>)
 80037c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037d6:	f001 ff11 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 80037da:	2301      	movs	r3, #1
 80037dc:	e069      	b.n	80038b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037e4:	f001 ff0a 	bl	80055fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e062      	b.n	80038b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037f2:	f107 0310 	add.w	r3, r7, #16
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 ff78 	bl	80046ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003800:	f001 fefc 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003804:	f000 fcea 	bl	80041dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003808:	f001 fec8 	bl	800559c <vPortEnterCritical>
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003812:	b25b      	sxtb	r3, r3
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d103      	bne.n	8003822 <xQueueReceive+0x122>
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003828:	b25b      	sxtb	r3, r3
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d103      	bne.n	8003838 <xQueueReceive+0x138>
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003838:	f001 fee0 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800383c:	1d3a      	adds	r2, r7, #4
 800383e:	f107 0310 	add.w	r3, r7, #16
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 ff67 	bl	8004718 <xTaskCheckForTimeOut>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d123      	bne.n	8003898 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003852:	f000 fa3a 	bl	8003cca <prvIsQueueEmpty>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	3324      	adds	r3, #36	; 0x24
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fe8d 	bl	8004584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800386a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386c:	f000 f9db 	bl	8003c26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003870:	f000 fcc2 	bl	80041f8 <xTaskResumeAll>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d189      	bne.n	800378e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <xQueueReceive+0x1bc>)
 800387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	e780      	b.n	800378e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800388c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800388e:	f000 f9ca 	bl	8003c26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003892:	f000 fcb1 	bl	80041f8 <xTaskResumeAll>
 8003896:	e77a      	b.n	800378e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800389a:	f000 f9c4 	bl	8003c26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800389e:	f000 fcab 	bl	80041f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a4:	f000 fa11 	bl	8003cca <prvIsQueueEmpty>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f43f af6f 	beq.w	800378e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3730      	adds	r7, #48	; 0x30
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08e      	sub	sp, #56	; 0x38
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	623b      	str	r3, [r7, #32]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	61fb      	str	r3, [r7, #28]
}
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003910:	f001 f858 	bl	80049c4 <xTaskGetSchedulerState>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <xQueueSemaphoreTake+0x60>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueSemaphoreTake+0x64>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <xQueueSemaphoreTake+0x66>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	61bb      	str	r3, [r7, #24]
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003940:	f001 fe2c 	bl	800559c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d024      	beq.n	800399a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	1e5a      	subs	r2, r3, #1
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003960:	f001 f9b0 	bl	8004cc4 <pvTaskIncrementMutexHeldCount>
 8003964:	4602      	mov	r2, r0
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00f      	beq.n	8003992 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	3310      	adds	r3, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fe54 	bl	8004624 <xTaskRemoveFromEventList>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <xQueueSemaphoreTake+0x214>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003992:	f001 fe33 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 8003996:	2301      	movs	r3, #1
 8003998:	e097      	b.n	8003aca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	617b      	str	r3, [r7, #20]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80039bc:	f001 fe1e 	bl	80055fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e082      	b.n	8003aca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fe8c 	bl	80046ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d8:	f001 fe10 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039dc:	f000 fbfe 	bl	80041dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039e0:	f001 fddc 	bl	800559c <vPortEnterCritical>
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d103      	bne.n	80039fa <xQueueSemaphoreTake+0x13a>
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d103      	bne.n	8003a10 <xQueueSemaphoreTake+0x150>
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a10:	f001 fdf4 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a14:	463a      	mov	r2, r7
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fe7b 	bl	8004718 <xTaskCheckForTimeOut>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d132      	bne.n	8003a8e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a2a:	f000 f94e 	bl	8003cca <prvIsQueueEmpty>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d026      	beq.n	8003a82 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003a3c:	f001 fdae 	bl	800559c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 ffdb 	bl	8004a00 <xTaskPriorityInherit>
 8003a4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003a4c:	f001 fdd6 	bl	80055fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	3324      	adds	r3, #36	; 0x24
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fd93 	bl	8004584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a60:	f000 f8e1 	bl	8003c26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a64:	f000 fbc8 	bl	80041f8 <xTaskResumeAll>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f47f af68 	bne.w	8003940 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <xQueueSemaphoreTake+0x214>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	e75e      	b.n	8003940 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a84:	f000 f8cf 	bl	8003c26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a88:	f000 fbb6 	bl	80041f8 <xTaskResumeAll>
 8003a8c:	e758      	b.n	8003940 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a90:	f000 f8c9 	bl	8003c26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a94:	f000 fbb0 	bl	80041f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a9a:	f000 f916 	bl	8003cca <prvIsQueueEmpty>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f43f af4d 	beq.w	8003940 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003aac:	f001 fd76 	bl	800559c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ab2:	f000 f811 	bl	8003ad8 <prvGetDisinheritPriorityAfterTimeout>
 8003ab6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f87a 	bl	8004bb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ac4:	f001 fd9a 	bl	80055fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3738      	adds	r7, #56	; 0x38
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e001      	b.n	8003afa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003afa:	68fb      	ldr	r3, [r7, #12]
	}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d14d      	bne.n	8003bc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 ffd3 	bl	8004adc <xTaskPriorityDisinherit>
 8003b36:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e043      	b.n	8003bc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d119      	bne.n	8003b7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6898      	ldr	r0, [r3, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	f002 f827 	bl	8005ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	441a      	add	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d32b      	bcc.n	8003bc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	e026      	b.n	8003bc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68d8      	ldr	r0, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	461a      	mov	r2, r3
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	f002 f80d 	bl	8005ba4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	425b      	negs	r3, r3
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d207      	bcs.n	8003bb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	425b      	negs	r3, r3
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d105      	bne.n	8003bc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bd0:	697b      	ldr	r3, [r7, #20]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d303      	bcc.n	8003c0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68d9      	ldr	r1, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	461a      	mov	r2, r3
 8003c18:	6838      	ldr	r0, [r7, #0]
 8003c1a:	f001 ffc3 	bl	8005ba4 <memcpy>
	}
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c2e:	f001 fcb5 	bl	800559c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	e011      	b.n	8003c60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fceb 	bl	8004624 <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c54:	f000 fdc2 	bl	80047dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dce9      	bgt.n	8003c3c <prvUnlockQueue+0x16>
 8003c68:	e000      	b.n	8003c6c <prvUnlockQueue+0x46>
					break;
 8003c6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 fcc2 	bl	80055fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c78:	f001 fc90 	bl	800559c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c84:	e011      	b.n	8003caa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d012      	beq.n	8003cb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3310      	adds	r3, #16
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fcc6 	bl	8004624 <xTaskRemoveFromEventList>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c9e:	f000 fd9d 	bl	80047dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ca2:	7bbb      	ldrb	r3, [r7, #14]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	dce9      	bgt.n	8003c86 <prvUnlockQueue+0x60>
 8003cb2:	e000      	b.n	8003cb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	22ff      	movs	r2, #255	; 0xff
 8003cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cbe:	f001 fc9d 	bl	80055fc <vPortExitCritical>
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd2:	f001 fc63 	bl	800559c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e001      	b.n	8003ce8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ce8:	f001 fc88 	bl	80055fc <vPortExitCritical>

	return xReturn;
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cfe:	f001 fc4d 	bl	800559c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d102      	bne.n	8003d14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e001      	b.n	8003d18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d18:	f001 fc70 	bl	80055fc <vPortExitCritical>

	return xReturn;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e014      	b.n	8003d62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d38:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <vQueueAddToRegistry+0x4c>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d44:	490b      	ldr	r1, [pc, #44]	; (8003d74 <vQueueAddToRegistry+0x4c>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <vQueueAddToRegistry+0x4c>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d5a:	e006      	b.n	8003d6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b07      	cmp	r3, #7
 8003d66:	d9e7      	bls.n	8003d38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	200007bc 	.word	0x200007bc

08003d78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d88:	f001 fc08 	bl	800559c <vPortEnterCritical>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d103      	bne.n	8003da2 <vQueueWaitForMessageRestricted+0x2a>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d103      	bne.n	8003db8 <vQueueWaitForMessageRestricted+0x40>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db8:	f001 fc20 	bl	80055fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3324      	adds	r3, #36	; 0x24
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fbfd 	bl	80045cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff27 	bl	8003c26 <prvUnlockQueue>
	}
 8003dd8:	bf00      	nop
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	; 0x38
 8003de4:	af04      	add	r7, sp, #16
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	623b      	str	r3, [r7, #32]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e26:	235c      	movs	r3, #92	; 0x5c
 8003e28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b5c      	cmp	r3, #92	; 0x5c
 8003e2e:	d00a      	beq.n	8003e46 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	61bb      	str	r3, [r7, #24]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01e      	beq.n	8003e8a <xTaskCreateStatic+0xaa>
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01b      	beq.n	8003e8a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e64:	2300      	movs	r3, #0
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	9302      	str	r3, [sp, #8]
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f850 	bl	8003f22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e84:	f000 f8d4 	bl	8004030 <prvAddNewTaskToReadyList>
 8003e88:	e001      	b.n	8003e8e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e8e:	697b      	ldr	r3, [r7, #20]
	}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fc75 	bl	800579c <pvPortMalloc>
 8003eb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003eba:	205c      	movs	r0, #92	; 0x5c
 8003ebc:	f001 fc6e 	bl	800579c <pvPortMalloc>
 8003ec0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ece:	e005      	b.n	8003edc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	f001 fd27 	bl	8005924 <vPortFree>
 8003ed6:	e001      	b.n	8003edc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d017      	beq.n	8003f12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f80e 	bl	8003f22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f06:	69f8      	ldr	r0, [r7, #28]
 8003f08:	f000 f892 	bl	8004030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e002      	b.n	8003f18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f18:	69bb      	ldr	r3, [r7, #24]
	}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b088      	sub	sp, #32
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	21a5      	movs	r1, #165	; 0xa5
 8003f3c:	f001 fe06 	bl	8005b4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f023 0307 	bic.w	r3, r3, #7
 8003f58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	617b      	str	r3, [r7, #20]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e012      	b.n	8003fa6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	7819      	ldrb	r1, [r3, #0]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3334      	adds	r3, #52	; 0x34
 8003f90:	460a      	mov	r2, r1
 8003f92:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d006      	beq.n	8003fae <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d9e9      	bls.n	8003f80 <prvInitialiseNewTask+0x5e>
 8003fac:	e000      	b.n	8003fb0 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003fae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b37      	cmp	r3, #55	; 0x37
 8003fbc:	d901      	bls.n	8003fc2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fbe:	2337      	movs	r3, #55	; 0x37
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fcc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe ff72 	bl	8002ec2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe ff6d 	bl	8002ec2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2200      	movs	r2, #0
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	69b8      	ldr	r0, [r7, #24]
 8004012:	f001 f9d1 	bl	80053b8 <pxPortInitialiseStack>
 8004016:	4602      	mov	r2, r0
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004028:	bf00      	nop
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004038:	f001 fab0 	bl	800559c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 8004044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800404e:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d110      	bne.n	800407e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800405c:	f000 fbe2 	bl	8004824 <prvInitialiseTaskLists>
 8004060:	e00d      	b.n	800407e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <prvAddNewTaskToReadyList+0xcc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	d802      	bhi.n	800407e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004078:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 8004086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <prvAddNewTaskToReadyList+0xd4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <prvAddNewTaskToReadyList+0x74>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <prvAddNewTaskToReadyList+0xd4>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a15      	ldr	r2, [pc, #84]	; (8004108 <prvAddNewTaskToReadyList+0xd8>)
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe ff0d 	bl	8002eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040c0:	f001 fa9c 	bl	80055fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <prvAddNewTaskToReadyList+0xcc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d207      	bcs.n	80040ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <prvAddNewTaskToReadyList+0xdc>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000cd0 	.word	0x20000cd0
 80040f8:	200007fc 	.word	0x200007fc
 80040fc:	20000cdc 	.word	0x20000cdc
 8004100:	20000cec 	.word	0x20000cec
 8004104:	20000cd8 	.word	0x20000cd8
 8004108:	20000800 	.word	0x20000800
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800411e:	463a      	mov	r2, r7
 8004120:	1d39      	adds	r1, r7, #4
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fe7a 	bl	8002e20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2300      	movs	r3, #0
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	460a      	mov	r2, r1
 800413e:	4921      	ldr	r1, [pc, #132]	; (80041c4 <vTaskStartScheduler+0xb4>)
 8004140:	4821      	ldr	r0, [pc, #132]	; (80041c8 <vTaskStartScheduler+0xb8>)
 8004142:	f7ff fe4d 	bl	8003de0 <xTaskCreateStatic>
 8004146:	4603      	mov	r3, r0
 8004148:	4a20      	ldr	r2, [pc, #128]	; (80041cc <vTaskStartScheduler+0xbc>)
 800414a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <vTaskStartScheduler+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004154:	2301      	movs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e001      	b.n	800415e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004164:	f000 fe16 	bl	8004d94 <xTimerCreateTimerTask>
 8004168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d116      	bne.n	800419e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
}
 8004182:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <vTaskStartScheduler+0xc0>)
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <vTaskStartScheduler+0xc4>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <vTaskStartScheduler+0xc8>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004198:	f001 f98e 	bl	80054b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800419c:	e00e      	b.n	80041bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d10a      	bne.n	80041bc <vTaskStartScheduler+0xac>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	60fb      	str	r3, [r7, #12]
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <vTaskStartScheduler+0xaa>
}
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	08005c28 	.word	0x08005c28
 80041c8:	080047f5 	.word	0x080047f5
 80041cc:	20000cf4 	.word	0x20000cf4
 80041d0:	20000cf0 	.word	0x20000cf0
 80041d4:	20000cdc 	.word	0x20000cdc
 80041d8:	20000cd4 	.word	0x20000cd4

080041dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <vTaskSuspendAll+0x18>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a03      	ldr	r2, [pc, #12]	; (80041f4 <vTaskSuspendAll+0x18>)
 80041e8:	6013      	str	r3, [r2, #0]
}
 80041ea:	bf00      	nop
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000cf8 	.word	0x20000cf8

080041f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <xTaskResumeAll+0x118>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <xTaskResumeAll+0x2c>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	603b      	str	r3, [r7, #0]
}
 8004220:	bf00      	nop
 8004222:	e7fe      	b.n	8004222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004224:	f001 f9ba 	bl	800559c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004228:	4b39      	ldr	r3, [pc, #228]	; (8004310 <xTaskResumeAll+0x118>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	4a38      	ldr	r2, [pc, #224]	; (8004310 <xTaskResumeAll+0x118>)
 8004230:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004232:	4b37      	ldr	r3, [pc, #220]	; (8004310 <xTaskResumeAll+0x118>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d162      	bne.n	8004300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <xTaskResumeAll+0x11c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d05e      	beq.n	8004300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004242:	e02f      	b.n	80042a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004244:	4b34      	ldr	r3, [pc, #208]	; (8004318 <xTaskResumeAll+0x120>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3318      	adds	r3, #24
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fe9d 	bl	8002f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3304      	adds	r3, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fe98 	bl	8002f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4b2d      	ldr	r3, [pc, #180]	; (800431c <xTaskResumeAll+0x124>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d903      	bls.n	8004274 <xTaskResumeAll+0x7c>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4a2a      	ldr	r2, [pc, #168]	; (800431c <xTaskResumeAll+0x124>)
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4a27      	ldr	r2, [pc, #156]	; (8004320 <xTaskResumeAll+0x128>)
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f7fe fe25 	bl	8002eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4b23      	ldr	r3, [pc, #140]	; (8004324 <xTaskResumeAll+0x12c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800429e:	4b22      	ldr	r3, [pc, #136]	; (8004328 <xTaskResumeAll+0x130>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a4:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <xTaskResumeAll+0x120>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1cb      	bne.n	8004244 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042b2:	f000 fb55 	bl	8004960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <xTaskResumeAll+0x134>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042c2:	f000 f845 	bl	8004350 <xTaskIncrementTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042cc:	4b16      	ldr	r3, [pc, #88]	; (8004328 <xTaskResumeAll+0x130>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f1      	bne.n	80042c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <xTaskResumeAll+0x134>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <xTaskResumeAll+0x130>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <xTaskResumeAll+0x138>)
 80042f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004300:	f001 f97c 	bl	80055fc <vPortExitCritical>

	return xAlreadyYielded;
 8004304:	68bb      	ldr	r3, [r7, #8]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000cf8 	.word	0x20000cf8
 8004314:	20000cd0 	.word	0x20000cd0
 8004318:	20000c90 	.word	0x20000c90
 800431c:	20000cd8 	.word	0x20000cd8
 8004320:	20000800 	.word	0x20000800
 8004324:	200007fc 	.word	0x200007fc
 8004328:	20000ce4 	.word	0x20000ce4
 800432c:	20000ce0 	.word	0x20000ce0
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <xTaskGetTickCount+0x18>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004340:	687b      	ldr	r3, [r7, #4]
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	20000cd4 	.word	0x20000cd4

08004350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800435a:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <xTaskIncrementTick+0x150>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 808e 	bne.w	8004480 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004364:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <xTaskIncrementTick+0x154>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800436c:	4a4d      	ldr	r2, [pc, #308]	; (80044a4 <xTaskIncrementTick+0x154>)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d120      	bne.n	80043ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004378:	4b4b      	ldr	r3, [pc, #300]	; (80044a8 <xTaskIncrementTick+0x158>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <xTaskIncrementTick+0x48>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	603b      	str	r3, [r7, #0]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <xTaskIncrementTick+0x46>
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <xTaskIncrementTick+0x158>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <xTaskIncrementTick+0x15c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a41      	ldr	r2, [pc, #260]	; (80044a8 <xTaskIncrementTick+0x158>)
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4a41      	ldr	r2, [pc, #260]	; (80044ac <xTaskIncrementTick+0x15c>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <xTaskIncrementTick+0x160>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a3f      	ldr	r2, [pc, #252]	; (80044b0 <xTaskIncrementTick+0x160>)
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	f000 fad3 	bl	8004960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <xTaskIncrementTick+0x164>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d34e      	bcc.n	8004462 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c4:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <xTaskIncrementTick+0x158>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <xTaskIncrementTick+0x82>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <xTaskIncrementTick+0x84>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d8:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <xTaskIncrementTick+0x164>)
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	601a      	str	r2, [r3, #0]
					break;
 80043e0:	e03f      	b.n	8004462 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <xTaskIncrementTick+0x158>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d203      	bcs.n	8004402 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043fa:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <xTaskIncrementTick+0x164>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6013      	str	r3, [r2, #0]
						break;
 8004400:	e02f      	b.n	8004462 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3304      	adds	r3, #4
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fdc2 	bl	8002f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3318      	adds	r3, #24
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fdb9 	bl	8002f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <xTaskIncrementTick+0x168>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d903      	bls.n	8004432 <xTaskIncrementTick+0xe2>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <xTaskIncrementTick+0x168>)
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <xTaskIncrementTick+0x16c>)
 8004440:	441a      	add	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3304      	adds	r3, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f7fe fd46 	bl	8002eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <xTaskIncrementTick+0x170>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	429a      	cmp	r2, r3
 800445a:	d3b3      	bcc.n	80043c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800445c:	2301      	movs	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004460:	e7b0      	b.n	80043c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <xTaskIncrementTick+0x170>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004468:	4914      	ldr	r1, [pc, #80]	; (80044bc <xTaskIncrementTick+0x16c>)
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d907      	bls.n	800448a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e004      	b.n	800448a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <xTaskIncrementTick+0x174>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <xTaskIncrementTick+0x174>)
 8004488:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <xTaskIncrementTick+0x178>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004496:	697b      	ldr	r3, [r7, #20]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000cf8 	.word	0x20000cf8
 80044a4:	20000cd4 	.word	0x20000cd4
 80044a8:	20000c88 	.word	0x20000c88
 80044ac:	20000c8c 	.word	0x20000c8c
 80044b0:	20000ce8 	.word	0x20000ce8
 80044b4:	20000cf0 	.word	0x20000cf0
 80044b8:	20000cd8 	.word	0x20000cd8
 80044bc:	20000800 	.word	0x20000800
 80044c0:	200007fc 	.word	0x200007fc
 80044c4:	20000ce0 	.word	0x20000ce0
 80044c8:	20000ce4 	.word	0x20000ce4

080044cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044d2:	4b27      	ldr	r3, [pc, #156]	; (8004570 <vTaskSwitchContext+0xa4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <vTaskSwitchContext+0xa8>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044e0:	e041      	b.n	8004566 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <vTaskSwitchContext+0xa8>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044e8:	4b23      	ldr	r3, [pc, #140]	; (8004578 <vTaskSwitchContext+0xac>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e010      	b.n	8004512 <vTaskSwitchContext+0x46>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <vTaskSwitchContext+0x40>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	607b      	str	r3, [r7, #4]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <vTaskSwitchContext+0x3e>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b01      	subs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	491a      	ldr	r1, [pc, #104]	; (800457c <vTaskSwitchContext+0xb0>)
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0e4      	beq.n	80044f0 <vTaskSwitchContext+0x24>
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <vTaskSwitchContext+0xb0>)
 8004532:	4413      	add	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3308      	adds	r3, #8
 8004548:	429a      	cmp	r2, r3
 800454a:	d104      	bne.n	8004556 <vTaskSwitchContext+0x8a>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <vTaskSwitchContext+0xb4>)
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4a05      	ldr	r2, [pc, #20]	; (8004578 <vTaskSwitchContext+0xac>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6013      	str	r3, [r2, #0]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	20000cf8 	.word	0x20000cf8
 8004574:	20000ce4 	.word	0x20000ce4
 8004578:	20000cd8 	.word	0x20000cd8
 800457c:	20000800 	.word	0x20000800
 8004580:	200007fc 	.word	0x200007fc

08004584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <vTaskPlaceOnEventList+0x44>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3318      	adds	r3, #24
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fe fcb4 	bl	8002f20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045b8:	2101      	movs	r1, #1
 80045ba:	6838      	ldr	r0, [r7, #0]
 80045bc:	f000 fb96 	bl	8004cec <prvAddCurrentTaskToDelayedList>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200007fc 	.word	0x200007fc

080045cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	617b      	str	r3, [r7, #20]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <vTaskPlaceOnEventListRestricted+0x54>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7fe fc6c 	bl	8002eda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
 800460c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	68b8      	ldr	r0, [r7, #8]
 8004612:	f000 fb6b 	bl	8004cec <prvAddCurrentTaskToDelayedList>
	}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200007fc 	.word	0x200007fc

08004624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	60fb      	str	r3, [r7, #12]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3318      	adds	r3, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe fc9b 	bl	8002f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <xTaskRemoveFromEventList+0xb0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11d      	bne.n	800469e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3304      	adds	r3, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fc92 	bl	8002f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <xTaskRemoveFromEventList+0xb4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d903      	bls.n	8004680 <xTaskRemoveFromEventList+0x5c>
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <xTaskRemoveFromEventList+0xb4>)
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <xTaskRemoveFromEventList+0xb8>)
 800468e:	441a      	add	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	3304      	adds	r3, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4610      	mov	r0, r2
 8004698:	f7fe fc1f 	bl	8002eda <vListInsertEnd>
 800469c:	e005      	b.n	80046aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3318      	adds	r3, #24
 80046a2:	4619      	mov	r1, r3
 80046a4:	480e      	ldr	r0, [pc, #56]	; (80046e0 <xTaskRemoveFromEventList+0xbc>)
 80046a6:	f7fe fc18 	bl	8002eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <xTaskRemoveFromEventList+0xc0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d905      	bls.n	80046c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <xTaskRemoveFromEventList+0xc4>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e001      	b.n	80046c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046c8:	697b      	ldr	r3, [r7, #20]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000cf8 	.word	0x20000cf8
 80046d8:	20000cd8 	.word	0x20000cd8
 80046dc:	20000800 	.word	0x20000800
 80046e0:	20000c90 	.word	0x20000c90
 80046e4:	200007fc 	.word	0x200007fc
 80046e8:	20000ce4 	.word	0x20000ce4

080046ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <vTaskInternalSetTimeOutState+0x24>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <vTaskInternalSetTimeOutState+0x28>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	605a      	str	r2, [r3, #4]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000ce8 	.word	0x20000ce8
 8004714:	20000cd4 	.word	0x20000cd4

08004718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	613b      	str	r3, [r7, #16]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800475a:	f000 ff1f 	bl	800559c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <xTaskCheckForTimeOut+0xbc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d102      	bne.n	800477e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e023      	b.n	80047c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <xTaskCheckForTimeOut+0xc0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d007      	beq.n	800479a <xTaskCheckForTimeOut+0x82>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e015      	b.n	80047c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d20b      	bcs.n	80047bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff9b 	bl	80046ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	e004      	b.n	80047c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047c6:	f000 ff19 	bl	80055fc <vPortExitCritical>

	return xReturn;
 80047ca:	69fb      	ldr	r3, [r7, #28]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000cd4 	.word	0x20000cd4
 80047d8:	20000ce8 	.word	0x20000ce8

080047dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <vTaskMissedYield+0x14>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000ce4 	.word	0x20000ce4

080047f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047fc:	f000 f852 	bl	80048a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <prvIdleTask+0x28>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d9f9      	bls.n	80047fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <prvIdleTask+0x2c>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004818:	e7f0      	b.n	80047fc <prvIdleTask+0x8>
 800481a:	bf00      	nop
 800481c:	20000800 	.word	0x20000800
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	e00c      	b.n	800484a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <prvInitialiseTaskLists+0x60>)
 800483c:	4413      	add	r3, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fb20 	bl	8002e84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b37      	cmp	r3, #55	; 0x37
 800484e:	d9ef      	bls.n	8004830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004850:	480d      	ldr	r0, [pc, #52]	; (8004888 <prvInitialiseTaskLists+0x64>)
 8004852:	f7fe fb17 	bl	8002e84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004856:	480d      	ldr	r0, [pc, #52]	; (800488c <prvInitialiseTaskLists+0x68>)
 8004858:	f7fe fb14 	bl	8002e84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800485c:	480c      	ldr	r0, [pc, #48]	; (8004890 <prvInitialiseTaskLists+0x6c>)
 800485e:	f7fe fb11 	bl	8002e84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004862:	480c      	ldr	r0, [pc, #48]	; (8004894 <prvInitialiseTaskLists+0x70>)
 8004864:	f7fe fb0e 	bl	8002e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004868:	480b      	ldr	r0, [pc, #44]	; (8004898 <prvInitialiseTaskLists+0x74>)
 800486a:	f7fe fb0b 	bl	8002e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvInitialiseTaskLists+0x78>)
 8004870:	4a05      	ldr	r2, [pc, #20]	; (8004888 <prvInitialiseTaskLists+0x64>)
 8004872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <prvInitialiseTaskLists+0x7c>)
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <prvInitialiseTaskLists+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000800 	.word	0x20000800
 8004888:	20000c60 	.word	0x20000c60
 800488c:	20000c74 	.word	0x20000c74
 8004890:	20000c90 	.word	0x20000c90
 8004894:	20000ca4 	.word	0x20000ca4
 8004898:	20000cbc 	.word	0x20000cbc
 800489c:	20000c88 	.word	0x20000c88
 80048a0:	20000c8c 	.word	0x20000c8c

080048a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048aa:	e019      	b.n	80048e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048ac:	f000 fe76 	bl	800559c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <prvCheckTasksWaitingTermination+0x50>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fb67 	bl	8002f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <prvCheckTasksWaitingTermination+0x58>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <prvCheckTasksWaitingTermination+0x58>)
 80048d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048d6:	f000 fe91 	bl	80055fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f810 	bl	8004900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <prvCheckTasksWaitingTermination+0x58>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e1      	bne.n	80048ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000ca4 	.word	0x20000ca4
 80048f8:	20000cd0 	.word	0x20000cd0
 80048fc:	20000cb8 	.word	0x20000cb8

08004900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	4618      	mov	r0, r3
 8004918:	f001 f804 	bl	8005924 <vPortFree>
				vPortFree( pxTCB );
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f001 f801 	bl	8005924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004922:	e018      	b.n	8004956 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800492a:	2b01      	cmp	r3, #1
 800492c:	d103      	bne.n	8004936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fff8 	bl	8005924 <vPortFree>
	}
 8004934:	e00f      	b.n	8004956 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800493c:	2b02      	cmp	r3, #2
 800493e:	d00a      	beq.n	8004956 <prvDeleteTCB+0x56>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <prvDeleteTCB+0x54>
	}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <prvResetNextTaskUnblockTime+0x40>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <prvResetNextTaskUnblockTime+0x14>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <prvResetNextTaskUnblockTime+0x16>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <prvResetNextTaskUnblockTime+0x44>)
 800497c:	f04f 32ff 	mov.w	r2, #4294967295
 8004980:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004982:	e008      	b.n	8004996 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <prvResetNextTaskUnblockTime+0x40>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <prvResetNextTaskUnblockTime+0x44>)
 8004994:	6013      	str	r3, [r2, #0]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	20000c88 	.word	0x20000c88
 80049a4:	20000cf0 	.word	0x20000cf0

080049a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <xTaskGetCurrentTaskHandle+0x18>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80049b4:	687b      	ldr	r3, [r7, #4]
	}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	200007fc 	.word	0x200007fc

080049c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <xTaskGetSchedulerState+0x34>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049d2:	2301      	movs	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	e008      	b.n	80049ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <xTaskGetSchedulerState+0x38>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049e0:	2302      	movs	r3, #2
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	e001      	b.n	80049ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ea:	687b      	ldr	r3, [r7, #4]
	}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000cdc 	.word	0x20000cdc
 80049fc:	20000cf8 	.word	0x20000cf8

08004a00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d056      	beq.n	8004ac4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <xTaskPriorityInherit+0xd0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d246      	bcs.n	8004ab2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	db06      	blt.n	8004a3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2c:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <xTaskPriorityInherit+0xd0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6959      	ldr	r1, [r3, #20]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <xTaskPriorityInherit+0xd4>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4299      	cmp	r1, r3
 8004a50:	d101      	bne.n	8004a56 <xTaskPriorityInherit+0x56>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xTaskPriorityInherit+0x58>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d022      	beq.n	8004aa2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fa95 	bl	8002f90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <xTaskPriorityInherit+0xd0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <xTaskPriorityInherit+0xd8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d903      	bls.n	8004a84 <xTaskPriorityInherit+0x84>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <xTaskPriorityInherit+0xd8>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <xTaskPriorityInherit+0xd4>)
 8004a92:	441a      	add	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fa1d 	bl	8002eda <vListInsertEnd>
 8004aa0:	e004      	b.n	8004aac <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <xTaskPriorityInherit+0xd0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e008      	b.n	8004ac4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <xTaskPriorityInherit+0xd0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d201      	bcs.n	8004ac4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
	}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200007fc 	.word	0x200007fc
 8004ad4:	20000800 	.word	0x20000800
 8004ad8:	20000cd8 	.word	0x20000cd8

08004adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d056      	beq.n	8004ba0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <xTaskPriorityDisinherit+0xd0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d00a      	beq.n	8004b12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60bb      	str	r3, [r7, #8]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d02c      	beq.n	8004ba0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d128      	bne.n	8004ba0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fa1c 	bl	8002f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <xTaskPriorityDisinherit+0xd4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d903      	bls.n	8004b80 <xTaskPriorityDisinherit+0xa4>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <xTaskPriorityDisinherit+0xd4>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <xTaskPriorityDisinherit+0xd8>)
 8004b8e:	441a      	add	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe f99f 	bl	8002eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ba0:	697b      	ldr	r3, [r7, #20]
	}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200007fc 	.word	0x200007fc
 8004bb0:	20000cd8 	.word	0x20000cd8
 8004bb4:	20000800 	.word	0x20000800

08004bb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d06f      	beq.n	8004cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d902      	bls.n	8004bfe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e002      	b.n	8004c04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d050      	beq.n	8004cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d14b      	bne.n	8004cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004c18:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10a      	bne.n	8004c38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db04      	blt.n	8004c56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	6959      	ldr	r1, [r3, #20]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c66:	4413      	add	r3, r2
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	d101      	bne.n	8004c70 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01c      	beq.n	8004cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe f988 	bl	8002f90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d903      	bls.n	8004c94 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4a06      	ldr	r2, [pc, #24]	; (8004cbc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004ca2:	441a      	add	r2, r3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f7fe f915 	bl	8002eda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cb0:	bf00      	nop
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200007fc 	.word	0x200007fc
 8004cbc:	20000800 	.word	0x20000800
 8004cc0:	20000cd8 	.word	0x20000cd8

08004cc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd6:	3201      	adds	r2, #1
 8004cd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004cda:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
	}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	200007fc 	.word	0x200007fc

08004cec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cfc:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f944 	bl	8002f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d10a      	bne.n	8004d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4819      	ldr	r0, [pc, #100]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d20:	f7fe f8db 	bl	8002eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d24:	e026      	b.n	8004d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d2e:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d209      	bcs.n	8004d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fe f8e8 	bl	8002f20 <vListInsert>
}
 8004d50:	e010      	b.n	8004d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f7fe f8de 	bl	8002f20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d64:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d202      	bcs.n	8004d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000cd4 	.word	0x20000cd4
 8004d80:	200007fc 	.word	0x200007fc
 8004d84:	20000cbc 	.word	0x20000cbc
 8004d88:	20000c8c 	.word	0x20000c8c
 8004d8c:	20000c88 	.word	0x20000c88
 8004d90:	20000cf0 	.word	0x20000cf0

08004d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d9e:	f000 facb 	bl	8005338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <xTimerCreateTimerTask+0x80>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d021      	beq.n	8004dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004db2:	1d3a      	adds	r2, r7, #4
 8004db4:	f107 0108 	add.w	r1, r7, #8
 8004db8:	f107 030c 	add.w	r3, r7, #12
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe f847 	bl	8002e50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	9202      	str	r2, [sp, #8]
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	2302      	movs	r3, #2
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	4910      	ldr	r1, [pc, #64]	; (8004e18 <xTimerCreateTimerTask+0x84>)
 8004dd6:	4811      	ldr	r0, [pc, #68]	; (8004e1c <xTimerCreateTimerTask+0x88>)
 8004dd8:	f7ff f802 	bl	8003de0 <xTaskCreateStatic>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <xTimerCreateTimerTask+0x8c>)
 8004de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004de2:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <xTimerCreateTimerTask+0x8c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dea:	2301      	movs	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	613b      	str	r3, [r7, #16]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e0a:	697b      	ldr	r3, [r7, #20]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000d2c 	.word	0x20000d2c
 8004e18:	08005c30 	.word	0x08005c30
 8004e1c:	08004f41 	.word	0x08004f41
 8004e20:	20000d30 	.word	0x20000d30

08004e24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	623b      	str	r3, [r7, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <xTimerGenericCommand+0x98>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02a      	beq.n	8004eb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	dc18      	bgt.n	8004e9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e6c:	f7ff fdaa 	bl	80049c4 <xTaskGetSchedulerState>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d109      	bne.n	8004e8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e76:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <xTimerGenericCommand+0x98>)
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	f107 0110 	add.w	r1, r7, #16
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e82:	f7fe faa7 	bl	80033d4 <xQueueGenericSend>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24
 8004e88:	e012      	b.n	8004eb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <xTimerGenericCommand+0x98>)
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	f107 0110 	add.w	r1, r7, #16
 8004e92:	2300      	movs	r3, #0
 8004e94:	2200      	movs	r2, #0
 8004e96:	f7fe fa9d 	bl	80033d4 <xQueueGenericSend>
 8004e9a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e9c:	e008      	b.n	8004eb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <xTimerGenericCommand+0x98>)
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	f107 0110 	add.w	r1, r7, #16
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	f7fe fb91 	bl	80035d0 <xQueueGenericSendFromISR>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3728      	adds	r7, #40	; 0x28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000d2c 	.word	0x20000d2c

08004ec0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eca:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <prvProcessExpiredTimer+0x7c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe f859 	bl	8002f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d122      	bne.n	8004f2c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	18d1      	adds	r1, r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	6978      	ldr	r0, [r7, #20]
 8004ef4:	f000 f8c8 	bl	8005088 <prvInsertTimerInActiveList>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	2100      	movs	r1, #0
 8004f08:	6978      	ldr	r0, [r7, #20]
 8004f0a:	f7ff ff8b 	bl	8004e24 <xTimerGenericCommand>
 8004f0e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60fb      	str	r3, [r7, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	6978      	ldr	r0, [r7, #20]
 8004f32:	4798      	blx	r3
}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000d24 	.word	0x20000d24

08004f40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f48:	f107 0308 	add.w	r3, r7, #8
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 f857 	bl	8005000 <prvGetNextExpireTime>
 8004f52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4619      	mov	r1, r3
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f803 	bl	8004f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f5e:	f000 f8d5 	bl	800510c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f62:	e7f1      	b.n	8004f48 <prvTimerTask+0x8>

08004f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f6e:	f7ff f935 	bl	80041dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f72:	f107 0308 	add.w	r3, r7, #8
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f866 	bl	8005048 <prvSampleTimeNow>
 8004f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d130      	bne.n	8004fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <prvProcessTimerOrBlockTask+0x3c>
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d806      	bhi.n	8004fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f92:	f7ff f931 	bl	80041f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ff91 	bl	8004ec0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f9e:	e024      	b.n	8004fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <prvProcessTimerOrBlockTask+0x90>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <prvProcessTimerOrBlockTask+0x94>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f7fe fed7 	bl	8003d78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fca:	f7ff f915 	bl	80041f8 <xTaskResumeAll>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <prvProcessTimerOrBlockTask+0x98>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
}
 8004fe4:	e001      	b.n	8004fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fe6:	f7ff f907 	bl	80041f8 <xTaskResumeAll>
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000d28 	.word	0x20000d28
 8004ff8:	20000d2c 	.word	0x20000d2c
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <prvGetNextExpireTime+0x44>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <prvGetNextExpireTime+0x44>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e001      	b.n	8005036 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000d24 	.word	0x20000d24

08005048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005050:	f7ff f970 	bl	8004334 <xTaskGetTickCount>
 8005054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <prvSampleTimeNow+0x3c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	429a      	cmp	r2, r3
 800505e:	d205      	bcs.n	800506c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005060:	f000 f908 	bl	8005274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	e002      	b.n	8005072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005072:	4a04      	ldr	r2, [pc, #16]	; (8005084 <prvSampleTimeNow+0x3c>)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000d34 	.word	0x20000d34

08005088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d812      	bhi.n	80050d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	e01b      	b.n	80050fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <prvInsertTimerInActiveList+0x7c>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fd ff27 	bl	8002f20 <vListInsert>
 80050d2:	e012      	b.n	80050fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d206      	bcs.n	80050ea <prvInsertTimerInActiveList+0x62>
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e007      	b.n	80050fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <prvInsertTimerInActiveList+0x80>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f7fd ff13 	bl	8002f20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050fa:	697b      	ldr	r3, [r7, #20]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000d28 	.word	0x20000d28
 8005108:	20000d24 	.word	0x20000d24

0800510c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08e      	sub	sp, #56	; 0x38
 8005110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005112:	e09d      	b.n	8005250 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da18      	bge.n	800514c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	3304      	adds	r3, #4
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	61fb      	str	r3, [r7, #28]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005142:	6850      	ldr	r0, [r2, #4]
 8005144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005146:	6892      	ldr	r2, [r2, #8]
 8005148:	4611      	mov	r1, r2
 800514a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	db7e      	blt.n	8005250 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	3304      	adds	r3, #4
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd ff14 	bl	8002f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005168:	463b      	mov	r3, r7
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ff6c 	bl	8005048 <prvSampleTimeNow>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b09      	cmp	r3, #9
 8005176:	d86a      	bhi.n	800524e <prvProcessReceivedCommands+0x142>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <prvProcessReceivedCommands+0x74>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051a9 	.word	0x080051a9
 800518c:	08005251 	.word	0x08005251
 8005190:	08005205 	.word	0x08005205
 8005194:	0800523d 	.word	0x0800523d
 8005198:	080051a9 	.word	0x080051a9
 800519c:	080051a9 	.word	0x080051a9
 80051a0:	08005251 	.word	0x08005251
 80051a4:	08005205 	.word	0x08005205
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	18d1      	adds	r1, r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b6:	f7ff ff67 	bl	8005088 <prvInsertTimerInActiveList>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d047      	beq.n	8005250 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d13f      	bne.n	8005250 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	441a      	add	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	2300      	movs	r3, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e2:	f7ff fe1f 	bl	8004e24 <xTimerGenericCommand>
 80051e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d130      	bne.n	8005250 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	61bb      	str	r3, [r7, #24]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	617b      	str	r3, [r7, #20]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	18d1      	adds	r1, r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005236:	f7ff ff27 	bl	8005088 <prvInsertTimerInActiveList>
					break;
 800523a:	e009      	b.n	8005250 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005248:	f000 fb6c 	bl	8005924 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800524c:	e000      	b.n	8005250 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800524e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <prvProcessReceivedCommands+0x164>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	1d39      	adds	r1, r7, #4
 8005256:	2200      	movs	r2, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fa51 	bl	8003700 <xQueueReceive>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f af57 	bne.w	8005114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3730      	adds	r7, #48	; 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000d2c 	.word	0x20000d2c

08005274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800527a:	e045      	b.n	8005308 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800527c:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <prvSwitchTimerLists+0xbc>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005286:	4b2a      	ldr	r3, [pc, #168]	; (8005330 <prvSwitchTimerLists+0xbc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3304      	adds	r3, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd fe7b 	bl	8002f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d12e      	bne.n	8005308 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d90e      	bls.n	80052da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052c8:	4b19      	ldr	r3, [pc, #100]	; (8005330 <prvSwitchTimerLists+0xbc>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f7fd fe24 	bl	8002f20 <vListInsert>
 80052d8:	e016      	b.n	8005308 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052da:	2300      	movs	r3, #0
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	2100      	movs	r1, #0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fd9d 	bl	8004e24 <xTimerGenericCommand>
 80052ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <prvSwitchTimerLists+0x94>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	603b      	str	r3, [r7, #0]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <prvSwitchTimerLists+0xbc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1b4      	bne.n	800527c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <prvSwitchTimerLists+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <prvSwitchTimerLists+0xc0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a04      	ldr	r2, [pc, #16]	; (8005330 <prvSwitchTimerLists+0xbc>)
 800531e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <prvSwitchTimerLists+0xc0>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6013      	str	r3, [r2, #0]
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000d24 	.word	0x20000d24
 8005334:	20000d28 	.word	0x20000d28

08005338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800533e:	f000 f92d 	bl	800559c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d120      	bne.n	800538c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800534a:	4814      	ldr	r0, [pc, #80]	; (800539c <prvCheckForValidListAndQueue+0x64>)
 800534c:	f7fd fd9a 	bl	8002e84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005350:	4813      	ldr	r0, [pc, #76]	; (80053a0 <prvCheckForValidListAndQueue+0x68>)
 8005352:	f7fd fd97 	bl	8002e84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <prvCheckForValidListAndQueue+0x6c>)
 8005358:	4a10      	ldr	r2, [pc, #64]	; (800539c <prvCheckForValidListAndQueue+0x64>)
 800535a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <prvCheckForValidListAndQueue+0x70>)
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <prvCheckForValidListAndQueue+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005362:	2300      	movs	r3, #0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <prvCheckForValidListAndQueue+0x74>)
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <prvCheckForValidListAndQueue+0x78>)
 800536a:	2110      	movs	r1, #16
 800536c:	200a      	movs	r0, #10
 800536e:	f7fd fea1 	bl	80030b4 <xQueueGenericCreateStatic>
 8005372:	4603      	mov	r3, r0
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005378:	4b07      	ldr	r3, [pc, #28]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	490b      	ldr	r1, [pc, #44]	; (80053b4 <prvCheckForValidListAndQueue+0x7c>)
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fcce 	bl	8003d28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800538c:	f000 f936 	bl	80055fc <vPortExitCritical>
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000d2c 	.word	0x20000d2c
 800539c:	20000cfc 	.word	0x20000cfc
 80053a0:	20000d10 	.word	0x20000d10
 80053a4:	20000d24 	.word	0x20000d24
 80053a8:	20000d28 	.word	0x20000d28
 80053ac:	20000dd8 	.word	0x20000dd8
 80053b0:	20000d38 	.word	0x20000d38
 80053b4:	08005c38 	.word	0x08005c38

080053b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b04      	subs	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b04      	subs	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3b04      	subs	r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053e8:	4a08      	ldr	r2, [pc, #32]	; (800540c <pxPortInitialiseStack+0x54>)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3b14      	subs	r3, #20
 80053f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b20      	subs	r3, #32
 80053fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	08005411 	.word	0x08005411

08005410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005416:	2300      	movs	r3, #0
 8005418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <prvTaskExitError+0x54>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d00a      	beq.n	800543a <prvTaskExitError+0x2a>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60fb      	str	r3, [r7, #12]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <prvTaskExitError+0x28>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60bb      	str	r3, [r7, #8]
}
 800544c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800544e:	bf00      	nop
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0fc      	beq.n	8005450 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005456:	bf00      	nop
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c
	...

08005470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <pxCurrentTCBConst2>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800547a:	f380 8809 	msr	PSP, r0
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	f04e 0e0d 	orr.w	lr, lr, #13
 800548e:	4770      	bx	lr

08005490 <pxCurrentTCBConst2>:
 8005490:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005498:	4806      	ldr	r0, [pc, #24]	; (80054b4 <prvPortStartFirstTask+0x1c>)
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f380 8808 	msr	MSP, r0
 80054a2:	b662      	cpsie	i
 80054a4:	b661      	cpsie	f
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	df00      	svc	0
 80054b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054b2:	bf00      	nop
 80054b4:	e000ed08 	.word	0xe000ed08

080054b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054be:	4b32      	ldr	r3, [pc, #200]	; (8005588 <xPortStartScheduler+0xd0>)
 80054c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	22ff      	movs	r2, #255	; 0xff
 80054ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	4b2a      	ldr	r3, [pc, #168]	; (800558c <xPortStartScheduler+0xd4>)
 80054e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054e6:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <xPortStartScheduler+0xd8>)
 80054e8:	2207      	movs	r2, #7
 80054ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ec:	e009      	b.n	8005502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80054ee:	4b28      	ldr	r3, [pc, #160]	; (8005590 <xPortStartScheduler+0xd8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <xPortStartScheduler+0xd8>)
 80054f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d0ef      	beq.n	80054ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <xPortStartScheduler+0xd8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1c3 0307 	rsb	r3, r3, #7
 8005516:	2b04      	cmp	r3, #4
 8005518:	d00a      	beq.n	8005530 <xPortStartScheduler+0x78>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	60bb      	str	r3, [r7, #8]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <xPortStartScheduler+0xd8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	4a16      	ldr	r2, [pc, #88]	; (8005590 <xPortStartScheduler+0xd8>)
 8005538:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <xPortStartScheduler+0xd8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <xPortStartScheduler+0xd8>)
 8005544:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800554e:	4b11      	ldr	r3, [pc, #68]	; (8005594 <xPortStartScheduler+0xdc>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a10      	ldr	r2, [pc, #64]	; (8005594 <xPortStartScheduler+0xdc>)
 8005554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800555a:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <xPortStartScheduler+0xdc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <xPortStartScheduler+0xdc>)
 8005560:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005564:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005566:	f000 f8b9 	bl	80056dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <xPortStartScheduler+0xe0>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005570:	f7ff ff92 	bl	8005498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005574:	f7fe ffaa 	bl	80044cc <vTaskSwitchContext>
	prvTaskExitError();
 8005578:	f7ff ff4a 	bl	8005410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	e000e400 	.word	0xe000e400
 800558c:	20000e28 	.word	0x20000e28
 8005590:	20000e2c 	.word	0x20000e2c
 8005594:	e000ed20 	.word	0xe000ed20
 8005598:	2000000c 	.word	0x2000000c

0800559c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	607b      	str	r3, [r7, #4]
}
 80055b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055b6:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <vPortEnterCritical+0x58>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <vPortEnterCritical+0x58>)
 80055be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <vPortEnterCritical+0x58>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10f      	bne.n	80055e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <vPortEnterCritical+0x5c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	603b      	str	r3, [r7, #0]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortEnterCritical+0x4a>
	}
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000000c 	.word	0x2000000c
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <vPortExitCritical+0x4c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <vPortExitCritical+0x24>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	607b      	str	r3, [r7, #4]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <vPortExitCritical+0x4c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3b01      	subs	r3, #1
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <vPortExitCritical+0x4c>)
 8005628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <vPortExitCritical+0x4c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <vPortExitCritical+0x42>
 8005632:	2300      	movs	r3, #0
 8005634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f383 8811 	msr	BASEPRI, r3
}
 800563c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	2000000c 	.word	0x2000000c
 800564c:	00000000 	.word	0x00000000

08005650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005650:	f3ef 8009 	mrs	r0, PSP
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <pxCurrentTCBConst>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005660:	6010      	str	r0, [r2, #0]
 8005662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800566a:	f380 8811 	msr	BASEPRI, r0
 800566e:	f7fe ff2d 	bl	80044cc <vTaskSwitchContext>
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8811 	msr	BASEPRI, r0
 800567a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005686:	f380 8809 	msr	PSP, r0
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	4770      	bx	lr

08005690 <pxCurrentTCBConst>:
 8005690:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7fe fe4d 	bl	8004350 <xTaskIncrementTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <xPortSysTickHandler+0x40>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <vPortSetupTimerInterrupt+0x30>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <vPortSetupTimerInterrupt+0x38>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <vPortSetupTimerInterrupt+0x3c>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a08      	ldr	r2, [pc, #32]	; (800571c <vPortSetupTimerInterrupt+0x40>)
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056fe:	4b03      	ldr	r3, [pc, #12]	; (800570c <vPortSetupTimerInterrupt+0x30>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr
 800570c:	e000e010 	.word	0xe000e010
 8005710:	e000e018 	.word	0xe000e018
 8005714:	20000000 	.word	0x20000000
 8005718:	10624dd3 	.word	0x10624dd3
 800571c:	e000e014 	.word	0xe000e014

08005720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d914      	bls.n	800575c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <vPortValidateInterruptPriority+0x6c>)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <vPortValidateInterruptPriority+0x70>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	7afa      	ldrb	r2, [r7, #11]
 8005742:	429a      	cmp	r2, r3
 8005744:	d20a      	bcs.n	800575c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	607b      	str	r3, [r7, #4]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <vPortValidateInterruptPriority+0x74>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <vPortValidateInterruptPriority+0x78>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d90a      	bls.n	8005782 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	603b      	str	r3, [r7, #0]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <vPortValidateInterruptPriority+0x60>
	}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	e000e3f0 	.word	0xe000e3f0
 8005790:	20000e28 	.word	0x20000e28
 8005794:	e000ed0c 	.word	0xe000ed0c
 8005798:	20000e2c 	.word	0x20000e2c

0800579c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057a8:	f7fe fd18 	bl	80041dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ac:	4b58      	ldr	r3, [pc, #352]	; (8005910 <pvPortMalloc+0x174>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057b4:	f000 f910 	bl	80059d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b8:	4b56      	ldr	r3, [pc, #344]	; (8005914 <pvPortMalloc+0x178>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 808e 	bne.w	80058e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01d      	beq.n	8005808 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057cc:	2208      	movs	r2, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d014      	beq.n	8005808 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	3308      	adds	r3, #8
 80057e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <pvPortMalloc+0x6c>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d069      	beq.n	80058e2 <pvPortMalloc+0x146>
 800580e:	4b42      	ldr	r3, [pc, #264]	; (8005918 <pvPortMalloc+0x17c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d864      	bhi.n	80058e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005818:	4b40      	ldr	r3, [pc, #256]	; (800591c <pvPortMalloc+0x180>)
 800581a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800581c:	4b3f      	ldr	r3, [pc, #252]	; (800591c <pvPortMalloc+0x180>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005822:	e004      	b.n	800582e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <pvPortMalloc+0xa4>
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f1      	bne.n	8005824 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <pvPortMalloc+0x174>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	429a      	cmp	r2, r3
 8005848:	d04b      	beq.n	80058e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2208      	movs	r2, #8
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	2308      	movs	r3, #8
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	429a      	cmp	r2, r3
 800586a:	d91f      	bls.n	80058ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <pvPortMalloc+0xf8>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	613b      	str	r3, [r7, #16]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058a6:	69b8      	ldr	r0, [r7, #24]
 80058a8:	f000 f8f8 	bl	8005a9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <pvPortMalloc+0x17c>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	4a18      	ldr	r2, [pc, #96]	; (8005918 <pvPortMalloc+0x17c>)
 80058b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <pvPortMalloc+0x17c>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b18      	ldr	r3, [pc, #96]	; (8005920 <pvPortMalloc+0x184>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d203      	bcs.n	80058ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <pvPortMalloc+0x17c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a15      	ldr	r2, [pc, #84]	; (8005920 <pvPortMalloc+0x184>)
 80058cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <pvPortMalloc+0x178>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058e2:	f7fe fc89 	bl	80041f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <pvPortMalloc+0x16a>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <pvPortMalloc+0x168>
	return pvReturn;
 8005906:	69fb      	ldr	r3, [r7, #28]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001a38 	.word	0x20001a38
 8005914:	20001a44 	.word	0x20001a44
 8005918:	20001a3c 	.word	0x20001a3c
 800591c:	20001a30 	.word	0x20001a30
 8005920:	20001a40 	.word	0x20001a40

08005924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d048      	beq.n	80059c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005936:	2308      	movs	r3, #8
 8005938:	425b      	negs	r3, r3
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <vPortFree+0xac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <vPortFree+0x44>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60fb      	str	r3, [r7, #12]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <vPortFree+0x62>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	60bb      	str	r3, [r7, #8]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <vPortFree+0xac>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d115      	bne.n	80059c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <vPortFree+0xac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059ac:	f7fe fc16 	bl	80041dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <vPortFree+0xb0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <vPortFree+0xb0>)
 80059bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059be:	6938      	ldr	r0, [r7, #16]
 80059c0:	f000 f86c 	bl	8005a9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059c4:	f7fe fc18 	bl	80041f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059c8:	bf00      	nop
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20001a44 	.word	0x20001a44
 80059d4:	20001a3c 	.word	0x20001a3c

080059d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <prvHeapInit+0xac>)
 80059e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3307      	adds	r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <prvHeapInit+0xac>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a10:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <prvHeapInit+0xb0>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <prvHeapInit+0xb0>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a24:	2208      	movs	r2, #8
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0307 	bic.w	r3, r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <prvHeapInit+0xb4>)
 8005a38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <prvHeapInit+0xb4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a42:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <prvHeapInit+0xb4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <prvHeapInit+0xb4>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <prvHeapInit+0xb8>)
 8005a66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <prvHeapInit+0xbc>)
 8005a6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a70:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <prvHeapInit+0xc0>)
 8005a72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a76:	601a      	str	r2, [r3, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000e30 	.word	0x20000e30
 8005a88:	20001a30 	.word	0x20001a30
 8005a8c:	20001a38 	.word	0x20001a38
 8005a90:	20001a40 	.word	0x20001a40
 8005a94:	20001a3c 	.word	0x20001a3c
 8005a98:	20001a44 	.word	0x20001a44

08005a9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aa4:	4b27      	ldr	r3, [pc, #156]	; (8005b44 <prvInsertBlockIntoFreeList+0xa8>)
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e002      	b.n	8005ab0 <prvInsertBlockIntoFreeList+0x14>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d8f7      	bhi.n	8005aaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d108      	bne.n	8005ade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	441a      	add	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d118      	bne.n	8005b24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <prvInsertBlockIntoFreeList+0xac>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d00d      	beq.n	8005b1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e008      	b.n	8005b2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <prvInsertBlockIntoFreeList+0xac>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e003      	b.n	8005b2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d002      	beq.n	8005b3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	20001a30 	.word	0x20001a30
 8005b48:	20001a38 	.word	0x20001a38

08005b4c <memset>:
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4402      	add	r2, r0
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d100      	bne.n	8005b56 <memset+0xa>
 8005b54:	4770      	bx	lr
 8005b56:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5a:	e7f9      	b.n	8005b50 <memset+0x4>

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	2600      	movs	r6, #0
 8005b60:	4d0c      	ldr	r5, [pc, #48]	; (8005b94 <__libc_init_array+0x38>)
 8005b62:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	f000 f828 	bl	8005bc0 <_init>
 8005b70:	2600      	movs	r6, #0
 8005b72:	4d0a      	ldr	r5, [pc, #40]	; (8005b9c <__libc_init_array+0x40>)
 8005b74:	4c0a      	ldr	r4, [pc, #40]	; (8005ba0 <__libc_init_array+0x44>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	08005cfc 	.word	0x08005cfc
 8005b98:	08005cfc 	.word	0x08005cfc
 8005b9c:	08005cfc 	.word	0x08005cfc
 8005ba0:	08005d00 	.word	0x08005d00

08005ba4 <memcpy>:
 8005ba4:	440a      	add	r2, r1
 8005ba6:	4291      	cmp	r1, r2
 8005ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bac:	d100      	bne.n	8005bb0 <memcpy+0xc>
 8005bae:	4770      	bx	lr
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bbc:	d1f9      	bne.n	8005bb2 <memcpy+0xe>
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <_init>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr

08005bcc <_fini>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr
