
Node 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800537c  0800537c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800537c  0800537c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a34  20000010  08005394  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a44  08005394  00021a44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b8a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dad  00000000  00000000  00032c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  000359b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c36  00000000  00000000  00036998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003146  00000000  00000000  000375ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125ea  00000000  00000000  0003a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092ad7  00000000  00000000  0004ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004158  00000000  00000000  000df7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e3930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005260 	.word	0x08005260

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005260 	.word	0x08005260

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* Initialize the hardware and system clock */
  HAL_Init();
 8000164:	f000 fb5a 	bl	800081c <HAL_Init>
  SystemClock_Config();
 8000168:	f000 f838 	bl	80001dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8f8 	bl	8000360 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f884 	bl	800027c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f926 	bl	80003c4 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000178:	f000 f8be 	bl	80002f8 <MX_CAN_Init>

  /* Initialize the RTOS kernel */
  osKernelInitialize();
 800017c:	f002 fbc2 	bl	8002904 <osKernelInitialize>

  /* Create the thread(s) */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8000180:	4a0d      	ldr	r2, [pc, #52]	; (80001b8 <main+0x58>)
 8000182:	2100      	movs	r1, #0
 8000184:	480d      	ldr	r0, [pc, #52]	; (80001bc <main+0x5c>)
 8000186:	f002 fc23 	bl	80029d0 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <main+0x60>)
 800018e:	6013      	str	r3, [r2, #0]
  wateringTaskHandle = osThreadNew(StartWateringTask, NULL, &wateringTask_attributes);
 8000190:	4a0c      	ldr	r2, [pc, #48]	; (80001c4 <main+0x64>)
 8000192:	2100      	movs	r1, #0
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <main+0x68>)
 8000196:	f002 fc1b 	bl	80029d0 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0b      	ldr	r2, [pc, #44]	; (80001cc <main+0x6c>)
 800019e:	6013      	str	r3, [r2, #0]
  canTaskHandle = osThreadNew(StartCanTask, NULL, &canTask_attributes);
 80001a0:	4a0b      	ldr	r2, [pc, #44]	; (80001d0 <main+0x70>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	480b      	ldr	r0, [pc, #44]	; (80001d4 <main+0x74>)
 80001a6:	f002 fc13 	bl	80029d0 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <main+0x78>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80001b0:	f002 fbda 	bl	8002968 <osKernelStart>

  /* Infinite loop to keep the main function alive */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <main+0x54>
 80001b6:	bf00      	nop
 80001b8:	080052d0 	.word	0x080052d0
 80001bc:	08000419 	.word	0x08000419
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	080052f4 	.word	0x080052f4
 80001c8:	08000499 	.word	0x08000499
 80001cc:	200000f0 	.word	0x200000f0
 80001d0:	08005318 	.word	0x08005318
 80001d4:	080004d1 	.word	0x080004d1
 80001d8:	200000f4 	.word	0x200000f4

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f004 fffe 	bl	80051ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /* Configure the main internal regulator output voltage */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020c:	2302      	movs	r3, #2
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000214:	2310      	movs	r3, #16
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000218:	2300      	movs	r3, #0
 800021a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000220:	4618      	mov	r0, r3
 8000222:	f001 fc23 	bl	8001a6c <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800022c:	f000 f982 	bl	8000534 <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000230:	230f      	movs	r3, #15
 8000232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fe90 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000256:	f000 f96d 	bl	8000534 <Error_Handler>
  }

  /* Configure the ADC peripheral clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f002 f811 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000270:	f000 f960 	bl	8000534 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3750      	adds	r7, #80	; 0x50
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_ADC1_Init+0x74>)
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <MX_ADC1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_ADC1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fb35 	bl	8000928 <HAL_ADC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f936 	bl	8000534 <Error_Handler>
  }

  /* Configure for the selected ADC regular channel to be converted */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002da:	f000 fde9 	bl	8000eb0 <HAL_ADC_ConfigChannel>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e4:	f000 f926 	bl	8000534 <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	40012400 	.word	0x40012400

080002f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 80002fc:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_CAN_Init+0x60>)
 80002fe:	4a17      	ldr	r2, [pc, #92]	; (800035c <MX_CAN_Init+0x64>)
 8000300:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_CAN_Init+0x60>)
 8000304:	2210      	movs	r2, #16
 8000306:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000308:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_CAN_Init+0x60>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_CAN_Init+0x60>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_CAN_Init+0x60>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_CAN_Init+0x60>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <MX_CAN_Init+0x60>)
 8000322:	2200      	movs	r2, #0
 8000324:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_CAN_Init+0x60>)
 8000328:	2200      	movs	r2, #0
 800032a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_CAN_Init+0x60>)
 800032e:	2200      	movs	r2, #0
 8000330:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_CAN_Init+0x60>)
 8000334:	2200      	movs	r2, #0
 8000336:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_CAN_Init+0x60>)
 800033a:	2200      	movs	r2, #0
 800033c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_CAN_Init+0x60>)
 8000340:	2200      	movs	r2, #0
 8000342:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_CAN_Init+0x60>)
 8000346:	f000 ff46 	bl	80011d6 <HAL_CAN_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000350:	f000 f8f0 	bl	8000534 <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200000a4 	.word	0x200000a4
 800035c:	40006400 	.word	0x40006400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_GPIO_Init+0x5c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <MX_GPIO_Init+0x5c>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_GPIO_Init+0x5c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2102      	movs	r1, #2
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <MX_GPIO_Init+0x60>)
 8000392:	f001 fb53 	bl	8001a3c <HAL_GPIO_WritePin>

  /* Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000396:	2302      	movs	r3, #2
 8000398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a6:	f107 0308 	add.w	r3, r7, #8
 80003aa:	4619      	mov	r1, r3
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_GPIO_Init+0x60>)
 80003ae:	f001 f9c1 	bl	8001734 <HAL_GPIO_Init>
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010800 	.word	0x40010800

080003c4 <MX_USART1_UART_Init>:
  * @brief USART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART1_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003fc:	f002 f8b2 	bl	8002564 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f895 	bl	8000534 <Error_Handler>
  }

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000005c 	.word	0x2000005c
 8000414:	40013800 	.word	0x40013800

08000418 <StartSensorTask>:
  * @brief  Function implementing the sensorTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartSensorTask(void *argument)
{
 8000418:	b5b0      	push	{r4, r5, r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Start the ADC conversion */
    HAL_ADC_Start(&hadc1);
 8000420:	4819      	ldr	r0, [pc, #100]	; (8000488 <StartSensorTask+0x70>)
 8000422:	f000 fb59 	bl	8000ad8 <HAL_ADC_Start>
    /* Poll for ADC conversion completion */
    if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000426:	f04f 31ff 	mov.w	r1, #4294967295
 800042a:	4817      	ldr	r0, [pc, #92]	; (8000488 <StartSensorTask+0x70>)
 800042c:	f000 fc2e 	bl	8000c8c <HAL_ADC_PollForConversion>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d107      	bne.n	8000446 <StartSensorTask+0x2e>
      /* Get the ADC converted value */
      moistureLevel = HAL_ADC_GetValue(&hadc1);
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <StartSensorTask+0x70>)
 8000438:	f000 fd2e 	bl	8000e98 <HAL_ADC_GetValue>
 800043c:	4603      	mov	r3, r0
 800043e:	b29a      	uxth	r2, r3
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <StartSensorTask+0x74>)
 8000442:	801a      	strh	r2, [r3, #0]
 8000444:	e017      	b.n	8000476 <StartSensorTask+0x5e>
    }
    else{
    	char error_msg[] = "ADC conversion failed!\r\n";
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <StartSensorTask+0x78>)
 8000448:	f107 040c 	add.w	r4, r7, #12
 800044c:	461d      	mov	r5, r3
 800044e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000452:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000456:	c403      	stmia	r4!, {r0, r1}
 8000458:	7022      	strb	r2, [r4, #0]
    	HAL_UART_Transmit(&huart1, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff fe76 	bl	8000150 <strlen>
 8000464:	4603      	mov	r3, r0
 8000466:	b29a      	uxth	r2, r3
 8000468:	f107 010c 	add.w	r1, r7, #12
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	4808      	ldr	r0, [pc, #32]	; (8000494 <StartSensorTask+0x7c>)
 8000472:	f002 f8c7 	bl	8002604 <HAL_UART_Transmit>
    }
    /* Stop the ADC conversion */
    HAL_ADC_Stop(&hadc1);
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <StartSensorTask+0x70>)
 8000478:	f000 fbdc 	bl	8000c34 <HAL_ADC_Stop>
    /* Delay for 1 second */
    HAL_Delay(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000480:	f000 fa2e 	bl	80008e0 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000484:	e7cc      	b.n	8000420 <StartSensorTask+0x8>
 8000486:	bf00      	nop
 8000488:	2000002c 	.word	0x2000002c
 800048c:	200000ea 	.word	0x200000ea
 8000490:	0800529c 	.word	0x0800529c
 8000494:	2000005c 	.word	0x2000005c

08000498 <StartWateringTask>:
  * @brief Function implementing the wateringTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartWateringTask(void *argument)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Check if moisture level is below threshold */
    if(moistureLevel < 30){
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <StartWateringTask+0x30>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	2b1d      	cmp	r3, #29
 80004a6:	d805      	bhi.n	80004b4 <StartWateringTask+0x1c>
      /* Turn on the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2102      	movs	r1, #2
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <StartWateringTask+0x34>)
 80004ae:	f001 fac5 	bl	8001a3c <HAL_GPIO_WritePin>
 80004b2:	e004      	b.n	80004be <StartWateringTask+0x26>
    } else {
      /* Turn off the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2102      	movs	r1, #2
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <StartWateringTask+0x34>)
 80004ba:	f001 fabf 	bl	8001a3c <HAL_GPIO_WritePin>
    }
    /* Delay for 1 second */
    HAL_Delay(1000);
 80004be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c2:	f000 fa0d 	bl	80008e0 <HAL_Delay>
    if(moistureLevel < 30){
 80004c6:	e7eb      	b.n	80004a0 <StartWateringTask+0x8>
 80004c8:	200000ea 	.word	0x200000ea
 80004cc:	40010800 	.word	0x40010800

080004d0 <StartCanTask>:
  * @brief Function implementing the canTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartCanTask(void *argument)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Set up CAN message header */
  TxHeader.DLC = 2;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <StartCanTask+0x50>)
 80004da:	2202      	movs	r2, #2
 80004dc:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <StartCanTask+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <StartCanTask+0x50>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x0A; // Unique ID for Node 2
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <StartCanTask+0x50>)
 80004ec:	220a      	movs	r2, #10
 80004ee:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  while(1){
    /* Prepare CAN data */
    TxData[0] = moistureLevel & 0xFF;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <StartCanTask+0x54>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <StartCanTask+0x58>)
 80004f8:	701a      	strb	r2, [r3, #0]
    TxData[1] = (moistureLevel >> 8) & 0xFF;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <StartCanTask+0x54>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	0a1b      	lsrs	r3, r3, #8
 8000500:	b29b      	uxth	r3, r3
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <StartCanTask+0x58>)
 8000506:	705a      	strb	r2, [r3, #1]
    /* Transmit CAN message */
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <StartCanTask+0x5c>)
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <StartCanTask+0x58>)
 800050c:	4904      	ldr	r1, [pc, #16]	; (8000520 <StartCanTask+0x50>)
 800050e:	4808      	ldr	r0, [pc, #32]	; (8000530 <StartCanTask+0x60>)
 8000510:	f000 ff5c 	bl	80013cc <HAL_CAN_AddTxMessage>
    /* Delay for 1 second */
    HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 f9e2 	bl	80008e0 <HAL_Delay>
    TxData[0] = moistureLevel & 0xFF;
 800051c:	e7e8      	b.n	80004f0 <StartCanTask+0x20>
 800051e:	bf00      	nop
 8000520:	200000cc 	.word	0x200000cc
 8000524:	200000ea 	.word	0x200000ea
 8000528:	200000e8 	.word	0x200000e8
 800052c:	200000e4 	.word	0x200000e4
 8000530:	200000a4 	.word	0x200000a4

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* Disable interrupts and enter an infinite loop */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_MspInit+0x68>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <HAL_MspInit+0x68>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_MspInit+0x68>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_MspInit+0x68>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <HAL_MspInit+0x68>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x68>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	210f      	movs	r1, #15
 800057a:	f06f 0001 	mvn.w	r0, #1
 800057e:	f001 f8b0 	bl	80016e2 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_MspInit+0x6c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_MspInit+0x6c>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010000 	.word	0x40010000

080005b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <HAL_ADC_MspInit+0x6c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d121      	bne.n	8000614 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000604:	2303      	movs	r3, #3
 8000606:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_ADC_MspInit+0x74>)
 8000610:	f001 f890 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40012400 	.word	0x40012400
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800

08000628 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <HAL_CAN_MspInit+0xb0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d143      	bne.n	80006d0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a23      	ldr	r2, [pc, #140]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <HAL_CAN_MspInit+0xb8>)
 800068e:	f001 f851 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <HAL_CAN_MspInit+0xb8>)
 80006a8:	f001 f844 	bl	8001734 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_CAN_MspInit+0xbc>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_CAN_MspInit+0xbc>)
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40006400 	.word	0x40006400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40010000 	.word	0x40010000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <HAL_UART_MspInit+0x8c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d131      	bne.n	800076c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_UART_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <HAL_UART_MspInit+0x90>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_UART_MspInit+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_UART_MspInit+0x90>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <HAL_UART_MspInit+0x90>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_UART_MspInit+0x90>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4619      	mov	r1, r3
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <HAL_UART_MspInit+0x94>)
 800074e:	f000 fff1 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <HAL_UART_MspInit+0x94>)
 8000768:	f000 ffe4 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ae:	f000 f87b 	bl	80008a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007b2:	f003 fd61 	bl	8004278 <xTaskGetSchedulerState>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d001      	beq.n	80007c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007bc:	f004 fabc 	bl	8004d38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d0:	f7ff fff8 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d6:	490c      	ldr	r1, [pc, #48]	; (8000808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <LoopFillZerobss+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007ec:	4c09      	ldr	r4, [pc, #36]	; (8000814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f004 fcff 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fcaf 	bl	8000160 <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800080c:	08005384 	.word	0x08005384
  ldr r2, =_sbss
 8000810:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000814:	20001a44 	.word	0x20001a44

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 ff4d 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fe82 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 ff57 	bl	800171a <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 ff2d 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200000f8 	.word	0x200000f8

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200000f8 	.word	0x200000f8

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff0 	bl	80008cc <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffe0 	bl	80008cc <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000930:	2300      	movs	r3, #0
 8000932:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e0be      	b.n	8000ac8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fe22 	bl	80005b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fbf1 	bl	8001154 <ADC_ConversionStop_Disable>
 8000972:	4603      	mov	r3, r0
 8000974:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	2b00      	cmp	r3, #0
 8000980:	f040 8099 	bne.w	8000ab6 <HAL_ADC_Init+0x18e>
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f040 8095 	bne.w	8000ab6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000994:	f023 0302 	bic.w	r3, r3, #2
 8000998:	f043 0202 	orr.w	r2, r3, #2
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7b1b      	ldrb	r3, [r3, #12]
 80009ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c0:	d003      	beq.n	80009ca <HAL_ADC_Init+0xa2>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d102      	bne.n	80009d0 <HAL_ADC_Init+0xa8>
 80009ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ce:	e000      	b.n	80009d2 <HAL_ADC_Init+0xaa>
 80009d0:	2300      	movs	r3, #0
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7d1b      	ldrb	r3, [r3, #20]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d119      	bne.n	8000a14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7b1b      	ldrb	r3, [r3, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d109      	bne.n	80009fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	035a      	lsls	r2, r3, #13
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	e00b      	b.n	8000a14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	f043 0220 	orr.w	r2, r3, #32
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f043 0201 	orr.w	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <HAL_ADC_Init+0x1a8>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a44:	d003      	beq.n	8000a4e <HAL_ADC_Init+0x126>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d104      	bne.n	8000a58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	051b      	lsls	r3, r3, #20
 8000a56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_ADC_Init+0x1ac>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d10b      	bne.n	8000a94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	f023 0303 	bic.w	r3, r3, #3
 8000a8a:	f043 0201 	orr.w	r2, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a92:	e018      	b.n	8000ac6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f023 0312 	bic.w	r3, r3, #18
 8000a9c:	f043 0210 	orr.w	r2, r3, #16
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	f043 0201 	orr.w	r2, r3, #1
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab4:	e007      	b.n	8000ac6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ad4:	ff1f0efe 	.word	0xff1f0efe

08000ad8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d101      	bne.n	8000af2 <HAL_ADC_Start+0x1a>
 8000aee:	2302      	movs	r3, #2
 8000af0:	e098      	b.n	8000c24 <HAL_ADC_Start+0x14c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2201      	movs	r2, #1
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 fad0 	bl	80010a0 <ADC_Enable>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 8087 	bne.w	8000c1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b14:	f023 0301 	bic.w	r3, r3, #1
 8000b18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <HAL_ADC_Start+0x154>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d105      	bne.n	8000b36 <HAL_ADC_Start+0x5e>
 8000b2a:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <HAL_ADC_Start+0x158>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d115      	bne.n	8000b62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d026      	beq.n	8000b9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b60:	e01d      	b.n	8000b9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <HAL_ADC_Start+0x158>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d004      	beq.n	8000b82 <HAL_ADC_Start+0xaa>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2b      	ldr	r2, [pc, #172]	; (8000c2c <HAL_ADC_Start+0x154>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d10d      	bne.n	8000b9e <HAL_ADC_Start+0xc6>
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <HAL_ADC_Start+0x158>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d006      	beq.n	8000bb8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	f023 0206 	bic.w	r2, r3, #6
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb6:	e002      	b.n	8000bbe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f06f 0202 	mvn.w	r2, #2
 8000bce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bde:	d113      	bne.n	8000c08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <HAL_ADC_Start+0x154>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d105      	bne.n	8000bf6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_ADC_Start+0x158>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d108      	bne.n	8000c08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	e00c      	b.n	8000c22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	e003      	b.n	8000c22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40012800 	.word	0x40012800
 8000c30:	40012400 	.word	0x40012400

08000c34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Stop+0x1a>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e01a      	b.n	8000c84 <HAL_ADC_Stop+0x50>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fa7c 	bl	8001154 <ADC_ConversionStop_Disable>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ca2:	f7ff fe13 	bl	80008cc <HAL_GetTick>
 8000ca6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00b      	beq.n	8000cce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f043 0220 	orr.w	r2, r3, #32
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0d3      	b.n	8000e76 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d131      	bne.n	8000d40 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d12a      	bne.n	8000d40 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000cea:	e021      	b.n	8000d30 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf2:	d01d      	beq.n	8000d30 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d007      	beq.n	8000d0a <HAL_ADC_PollForConversion+0x7e>
 8000cfa:	f7ff fde7 	bl	80008cc <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d212      	bcs.n	8000d30 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10b      	bne.n	8000d30 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f043 0204 	orr.w	r2, r3, #4
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e0a2      	b.n	8000e76 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0d6      	beq.n	8000cec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d3e:	e070      	b.n	8000e22 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_ADC_PollForConversion+0x1f4>)
 8000d42:	681c      	ldr	r4, [r3, #0]
 8000d44:	2002      	movs	r0, #2
 8000d46:	f001 fb57 	bl	80023f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6919      	ldr	r1, [r3, #16]
 8000d56:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <HAL_ADC_PollForConversion+0x1f8>)
 8000d58:	400b      	ands	r3, r1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d118      	bne.n	8000d90 <HAL_ADC_PollForConversion+0x104>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68d9      	ldr	r1, [r3, #12]
 8000d64:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <HAL_ADC_PollForConversion+0x1fc>)
 8000d66:	400b      	ands	r3, r1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d111      	bne.n	8000d90 <HAL_ADC_PollForConversion+0x104>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6919      	ldr	r1, [r3, #16]
 8000d72:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <HAL_ADC_PollForConversion+0x200>)
 8000d74:	400b      	ands	r3, r1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <HAL_ADC_PollForConversion+0x100>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68d9      	ldr	r1, [r3, #12]
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_ADC_PollForConversion+0x204>)
 8000d82:	400b      	ands	r3, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_ADC_PollForConversion+0x100>
 8000d88:	2314      	movs	r3, #20
 8000d8a:	e020      	b.n	8000dce <HAL_ADC_PollForConversion+0x142>
 8000d8c:	2329      	movs	r3, #41	; 0x29
 8000d8e:	e01e      	b.n	8000dce <HAL_ADC_PollForConversion+0x142>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6919      	ldr	r1, [r3, #16]
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <HAL_ADC_PollForConversion+0x200>)
 8000d98:	400b      	ands	r3, r1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_ADC_PollForConversion+0x120>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68d9      	ldr	r1, [r3, #12]
 8000da4:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <HAL_ADC_PollForConversion+0x204>)
 8000da6:	400b      	ands	r3, r1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00d      	beq.n	8000dc8 <HAL_ADC_PollForConversion+0x13c>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6919      	ldr	r1, [r3, #16]
 8000db2:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <HAL_ADC_PollForConversion+0x208>)
 8000db4:	400b      	ands	r3, r1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d108      	bne.n	8000dcc <HAL_ADC_PollForConversion+0x140>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68d9      	ldr	r1, [r3, #12]
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <HAL_ADC_PollForConversion+0x208>)
 8000dc2:	400b      	ands	r3, r1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d101      	bne.n	8000dcc <HAL_ADC_PollForConversion+0x140>
 8000dc8:	2354      	movs	r3, #84	; 0x54
 8000dca:	e000      	b.n	8000dce <HAL_ADC_PollForConversion+0x142>
 8000dcc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000dd4:	e021      	b.n	8000e1a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d01a      	beq.n	8000e14 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d007      	beq.n	8000df4 <HAL_ADC_PollForConversion+0x168>
 8000de4:	f7ff fd72 	bl	80008cc <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d20f      	bcs.n	8000e14 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d90b      	bls.n	8000e14 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	f043 0204 	orr.w	r2, r3, #4
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e030      	b.n	8000e76 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d8d9      	bhi.n	8000dd6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f06f 0212 	mvn.w	r2, #18
 8000e2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e46:	d115      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d105      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000
 8000e84:	24924924 	.word	0x24924924
 8000e88:	00924924 	.word	0x00924924
 8000e8c:	12492492 	.word	0x12492492
 8000e90:	00492492 	.word	0x00492492
 8000e94:	00249249 	.word	0x00249249

08000e98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0x20>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e0dc      	b.n	800108a <HAL_ADC_ConfigChannel+0x1da>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d81c      	bhi.n	8000f1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	3b05      	subs	r3, #5
 8000ef2:	221f      	movs	r2, #31
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4019      	ands	r1, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b05      	subs	r3, #5
 8000f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34
 8000f18:	e03c      	b.n	8000f94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d81c      	bhi.n	8000f5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3b23      	subs	r3, #35	; 0x23
 8000f34:	221f      	movs	r2, #31
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	4019      	ands	r1, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3b23      	subs	r3, #35	; 0x23
 8000f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5a:	e01b      	b.n	8000f94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3b41      	subs	r3, #65	; 0x41
 8000f6e:	221f      	movs	r2, #31
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4019      	ands	r1, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	3b41      	subs	r3, #65	; 0x41
 8000f88:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b09      	cmp	r3, #9
 8000f9a:	d91c      	bls.n	8000fd6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68d9      	ldr	r1, [r3, #12]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	3b1e      	subs	r3, #30
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4019      	ands	r1, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3b1e      	subs	r3, #30
 8000fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	e019      	b.n	800100a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6919      	ldr	r1, [r3, #16]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4019      	ands	r1, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6898      	ldr	r0, [r3, #8]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d003      	beq.n	800101a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001016:	2b11      	cmp	r3, #17
 8001018:	d132      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_ADC_ConfigChannel+0x1e4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d125      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d126      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001040:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b10      	cmp	r3, #16
 8001048:	d11a      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_ConfigChannel+0x1e8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <HAL_ADC_ConfigChannel+0x1ec>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	0c9a      	lsrs	r2, r3, #18
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001060:	e002      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3b01      	subs	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f9      	bne.n	8001062 <HAL_ADC_ConfigChannel+0x1b2>
 800106e:	e007      	b.n	8001080 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f043 0220 	orr.w	r2, r3, #32
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40012400 	.word	0x40012400
 8001098:	20000000 	.word	0x20000000
 800109c:	431bde83 	.word	0x431bde83

080010a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d040      	beq.n	8001140 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0201 	orr.w	r2, r2, #1
 80010cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <ADC_Enable+0xac>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <ADC_Enable+0xb0>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9b      	lsrs	r3, r3, #18
 80010da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010dc:	e002      	b.n	80010e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f9      	bne.n	80010de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010ea:	f7ff fbef 	bl	80008cc <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010f0:	e01f      	b.n	8001132 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010f2:	f7ff fbeb 	bl	80008cc <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d918      	bls.n	8001132 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b01      	cmp	r3, #1
 800110c:	d011      	beq.n	8001132 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f043 0210 	orr.w	r2, r3, #16
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e007      	b.n	8001142 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b01      	cmp	r3, #1
 800113e:	d1d8      	bne.n	80010f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83

08001154 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d12e      	bne.n	80011cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800117e:	f7ff fba5 	bl	80008cc <HAL_GetTick>
 8001182:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001184:	e01b      	b.n	80011be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001186:	f7ff fba1 	bl	80008cc <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d914      	bls.n	80011be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10d      	bne.n	80011be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e007      	b.n	80011ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d0dc      	beq.n	8001186 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0ed      	b.n	80013c4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fa17 	bl	8000628 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0201 	orr.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120a:	f7ff fb5f 	bl	80008cc <HAL_GetTick>
 800120e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001210:	e012      	b.n	8001238 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001212:	f7ff fb5b 	bl	80008cc <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b0a      	cmp	r3, #10
 800121e:	d90b      	bls.n	8001238 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2205      	movs	r2, #5
 8001230:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0c5      	b.n	80013c4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0e5      	beq.n	8001212 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0202 	bic.w	r2, r2, #2
 8001254:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001256:	f7ff fb39 	bl	80008cc <HAL_GetTick>
 800125a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800125c:	e012      	b.n	8001284 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800125e:	f7ff fb35 	bl	80008cc <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b0a      	cmp	r3, #10
 800126a:	d90b      	bls.n	8001284 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2205      	movs	r2, #5
 800127c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e09f      	b.n	80013c4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1e5      	bne.n	800125e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7e1b      	ldrb	r3, [r3, #24]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e007      	b.n	80012bc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e5b      	ldrb	r3, [r3, #25]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e007      	b.n	80012e6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e9b      	ldrb	r3, [r3, #26]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e007      	b.n	8001310 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0220 	bic.w	r2, r2, #32
 800130e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7edb      	ldrb	r3, [r3, #27]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0210 	bic.w	r2, r2, #16
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e007      	b.n	800133a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0210 	orr.w	r2, r2, #16
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7f1b      	ldrb	r3, [r3, #28]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d108      	bne.n	8001354 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0208 	orr.w	r2, r2, #8
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e007      	b.n	8001364 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7f5b      	ldrb	r3, [r3, #29]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0204 	orr.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e007      	b.n	800138e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0204 	bic.w	r2, r2, #4
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	ea42 0103 	orr.w	r1, r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d003      	beq.n	80013f8 <HAL_CAN_AddTxMessage+0x2c>
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	f040 80ad 	bne.w	8001552 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8095 	beq.w	8001542 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	0e1b      	lsrs	r3, r3, #24
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001422:	2201      	movs	r2, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10d      	bne.n	8001450 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	6809      	ldr	r1, [r1, #0]
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3318      	adds	r3, #24
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00f      	b.n	8001470 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800145a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001464:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3318      	adds	r3, #24
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	440b      	add	r3, r1
 800146e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6819      	ldr	r1, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3318      	adds	r3, #24
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	440b      	add	r3, r1
 8001480:	3304      	adds	r3, #4
 8001482:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	7d1b      	ldrb	r3, [r3, #20]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d111      	bne.n	80014b0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3318      	adds	r3, #24
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	3304      	adds	r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	6811      	ldr	r1, [r2, #0]
 80014a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3318      	adds	r3, #24
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	440b      	add	r3, r1
 80014ac:	3304      	adds	r3, #4
 80014ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3307      	adds	r3, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	061a      	lsls	r2, r3, #24
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3306      	adds	r3, #6
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3305      	adds	r3, #5
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	4313      	orrs	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	3204      	adds	r2, #4
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	4610      	mov	r0, r2
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	6811      	ldr	r1, [r2, #0]
 80014d8:	ea43 0200 	orr.w	r2, r3, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	440b      	add	r3, r1
 80014e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3303      	adds	r3, #3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	061a      	lsls	r2, r3, #24
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3302      	adds	r3, #2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4313      	orrs	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	4610      	mov	r0, r2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	ea43 0200 	orr.w	r2, r3, r0
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	440b      	add	r3, r1
 8001518:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800151c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3318      	adds	r3, #24
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	6811      	ldr	r1, [r2, #0]
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e00e      	b.n	8001560 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e006      	b.n	8001560 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3724      	adds	r7, #36	; 0x24
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff90 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff49 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff5e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff90 	bl	8001624 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5f 	bl	80015d0 <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffb0 	bl	8001688 <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b08b      	sub	sp, #44	; 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e169      	b.n	8001a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001748:	2201      	movs	r2, #1
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8158 	bne.w	8001a16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a9a      	ldr	r2, [pc, #616]	; (80019d4 <HAL_GPIO_Init+0x2a0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d05e      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 8001770:	4a98      	ldr	r2, [pc, #608]	; (80019d4 <HAL_GPIO_Init+0x2a0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d875      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 8001776:	4a98      	ldr	r2, [pc, #608]	; (80019d8 <HAL_GPIO_Init+0x2a4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d058      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 800177c:	4a96      	ldr	r2, [pc, #600]	; (80019d8 <HAL_GPIO_Init+0x2a4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d86f      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 8001782:	4a96      	ldr	r2, [pc, #600]	; (80019dc <HAL_GPIO_Init+0x2a8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d052      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 8001788:	4a94      	ldr	r2, [pc, #592]	; (80019dc <HAL_GPIO_Init+0x2a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d869      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 800178e:	4a94      	ldr	r2, [pc, #592]	; (80019e0 <HAL_GPIO_Init+0x2ac>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04c      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 8001794:	4a92      	ldr	r2, [pc, #584]	; (80019e0 <HAL_GPIO_Init+0x2ac>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d863      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 800179a:	4a92      	ldr	r2, [pc, #584]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d046      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 80017a0:	4a90      	ldr	r2, [pc, #576]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d85d      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d82a      	bhi.n	8001800 <HAL_GPIO_Init+0xcc>
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d859      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <HAL_GPIO_Init+0x80>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	0800182f 	.word	0x0800182f
 80017b8:	08001809 	.word	0x08001809
 80017bc:	0800181b 	.word	0x0800181b
 80017c0:	0800185d 	.word	0x0800185d
 80017c4:	08001863 	.word	0x08001863
 80017c8:	08001863 	.word	0x08001863
 80017cc:	08001863 	.word	0x08001863
 80017d0:	08001863 	.word	0x08001863
 80017d4:	08001863 	.word	0x08001863
 80017d8:	08001863 	.word	0x08001863
 80017dc:	08001863 	.word	0x08001863
 80017e0:	08001863 	.word	0x08001863
 80017e4:	08001863 	.word	0x08001863
 80017e8:	08001863 	.word	0x08001863
 80017ec:	08001863 	.word	0x08001863
 80017f0:	08001863 	.word	0x08001863
 80017f4:	08001863 	.word	0x08001863
 80017f8:	08001811 	.word	0x08001811
 80017fc:	08001825 	.word	0x08001825
 8001800:	4a79      	ldr	r2, [pc, #484]	; (80019e8 <HAL_GPIO_Init+0x2b4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001806:	e02c      	b.n	8001862 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e029      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	3304      	adds	r3, #4
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e024      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	3308      	adds	r3, #8
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e01f      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	330c      	adds	r3, #12
 800182a:	623b      	str	r3, [r7, #32]
          break;
 800182c:	e01a      	b.n	8001864 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001836:	2304      	movs	r3, #4
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e013      	b.n	8001864 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	611a      	str	r2, [r3, #16]
          break;
 800184e:	e009      	b.n	8001864 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	615a      	str	r2, [r3, #20]
          break;
 800185a:	e003      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x130>
          break;
 8001862:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d801      	bhi.n	800186e <HAL_GPIO_Init+0x13a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	e001      	b.n	8001872 <HAL_GPIO_Init+0x13e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3304      	adds	r3, #4
 8001872:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d802      	bhi.n	8001880 <HAL_GPIO_Init+0x14c>
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x152>
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	3b08      	subs	r3, #8
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	210f      	movs	r1, #15
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	6a39      	ldr	r1, [r7, #32]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	431a      	orrs	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80b1 	beq.w	8001a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_GPIO_Init+0x2b8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <HAL_GPIO_Init+0x2b8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018cc:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_GPIO_Init+0x2bc>)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a40      	ldr	r2, [pc, #256]	; (80019f4 <HAL_GPIO_Init+0x2c0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d013      	beq.n	8001920 <HAL_GPIO_Init+0x1ec>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3f      	ldr	r2, [pc, #252]	; (80019f8 <HAL_GPIO_Init+0x2c4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00d      	beq.n	800191c <HAL_GPIO_Init+0x1e8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_GPIO_Init+0x2c8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0x1e4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_GPIO_Init+0x2cc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d101      	bne.n	8001914 <HAL_GPIO_Init+0x1e0>
 8001910:	2303      	movs	r3, #3
 8001912:	e006      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 8001914:	2304      	movs	r3, #4
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 8001918:	2302      	movs	r3, #2
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 8001920:	2300      	movs	r3, #0
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001932:	492f      	ldr	r1, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x2bc>)
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	492c      	ldr	r1, [pc, #176]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800195a:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4928      	ldr	r1, [pc, #160]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4922      	ldr	r1, [pc, #136]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	491e      	ldr	r1, [pc, #120]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800198c:	4013      	ands	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4918      	ldr	r1, [pc, #96]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4914      	ldr	r1, [pc, #80]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d021      	beq.n	8001a08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e021      	b.n	8001a16 <HAL_GPIO_Init+0x2e2>
 80019d2:	bf00      	nop
 80019d4:	10320000 	.word	0x10320000
 80019d8:	10310000 	.word	0x10310000
 80019dc:	10220000 	.word	0x10220000
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10120000 	.word	0x10120000
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40011000 	.word	0x40011000
 8001a00:	40011400 	.word	0x40011400
 8001a04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_GPIO_Init+0x304>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4909      	ldr	r1, [pc, #36]	; (8001a38 <HAL_GPIO_Init+0x304>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	3301      	adds	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f47f ae8e 	bne.w	8001748 <HAL_GPIO_Init+0x14>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	372c      	adds	r7, #44	; 0x2c
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e272      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8087 	beq.w	8001b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d112      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d10b      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d06c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x12c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d168      	bne.n	8001b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e24c      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76>
 8001ad4:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7f      	ldr	r2, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e02e      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0xbc>
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7fe fec0 	bl	80008cc <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7fe febc 	bl	80008cc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e200      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe4>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe feac 	bl	80008cc <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7fe fea8 	bl	80008cc <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1ec      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x10c>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1c0      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7fe fe61 	bl	80008cc <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7fe fe5d 	bl	80008cc <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1a1      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4927      	ldr	r1, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe fe40 	bl	80008cc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe fe3c 	bl	80008cc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e180      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe fe20 	bl	80008cc <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7fe fe1c 	bl	80008cc <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e160      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 face 	bl	8002250 <RCC_Delay>
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7fe fe06 	bl	80008cc <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7fe fe02 	bl	80008cc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e146      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	42420000 	.word	0x42420000
 8001ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e9      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a6 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7fe fdc3 	bl	80008cc <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7fe fdbf 	bl	80008cc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	; 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e103      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x312>
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001d86:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x356>
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fd73 	bl	80008cc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe fd6f 	bl	80008cc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0b1      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x37e>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fd5d 	bl	80008cc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe fd59 	bl	80008cc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e09b      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d061      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d146      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fd2d 	bl	80008cc <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fd29 	bl	80008cc <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e06d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4921      	ldr	r1, [pc, #132]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a19      	ldr	r1, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe fcfd 	bl	80008cc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe fcf9 	bl	80008cc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e03d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46a>
 8001ef4:	e035      	b.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fce6 	bl	80008cc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7fe fce2 	bl	80008cc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e026      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x498>
 8001f22:	e01e      	b.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e019      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x500>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d0      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4965      	ldr	r1, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d040      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e073      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7fe fc34 	bl	80008cc <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe fc30 	bl	80008cc <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e053      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d210      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fb92 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	0800533c 	.word	0x0800533c
 800213c:	20000000 	.word	0x20000000
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x30>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x36>
 8002172:	e027      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002176:	613b      	str	r3, [r7, #16]
      break;
 8002178:	e027      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0c5b      	lsrs	r3, r3, #17
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e004      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	613b      	str	r3, [r7, #16]
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	613b      	str	r3, [r7, #16]
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	693b      	ldr	r3, [r7, #16]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	08005354 	.word	0x08005354
 80021e4:	08005364 	.word	0x08005364
 80021e8:	003d0900 	.word	0x003d0900

080021ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b02      	ldr	r3, [pc, #8]	; (80021fc <HAL_RCC_GetHCLKFreq+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000000 	.word	0x20000000

08002200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002204:	f7ff fff2 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	0800534c 	.word	0x0800534c

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800222c:	f7ff ffde 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4903      	ldr	r1, [pc, #12]	; (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	0800534c 	.word	0x0800534c

08002250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <RCC_Delay+0x34>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <RCC_Delay+0x38>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a5b      	lsrs	r3, r3, #9
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800226c:	bf00      	nop
  }
  while (Delay --);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	60fa      	str	r2, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f9      	bne.n	800226c <RCC_Delay+0x1c>
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	20000000 	.word	0x20000000
 8002288:	10624dd3 	.word	0x10624dd3

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d07d      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	61d3      	str	r3, [r2, #28]
 80022c4:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d118      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ec:	f7fe faee 	bl	80008cc <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	e008      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7fe faea 	bl	80008cc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e06d      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02e      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d027      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233a:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fab9 	bl	80008cc <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe fab5 	bl	80008cc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e036      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ee      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4917      	ldr	r1, [pc, #92]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	4313      	orrs	r3, r2
 8002390:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	490b      	ldr	r1, [pc, #44]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420440 	.word	0x42420440

080023f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b10      	cmp	r3, #16
 800241e:	f200 808a 	bhi.w	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d045      	beq.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d075      	beq.n	800251a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800242e:	e082      	b.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d07b      	beq.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0c5b      	lsrs	r3, r3, #17
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fbb2 f2f3 	udiv	r2, r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	e004      	b.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249c:	d102      	bne.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	61bb      	str	r3, [r7, #24]
      break;
 80024a2:	e04a      	b.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
      break;
 80024b2:	e042      	b.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c4:	d108      	bne.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e01f      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e2:	d109      	bne.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024f0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e00f      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002502:	d11c      	bne.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002510:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002514:	61bb      	str	r3, [r7, #24]
      break;
 8002516:	e012      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002518:	e011      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800251a:	f7ff fe85 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0b9b      	lsrs	r3, r3, #14
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	3301      	adds	r3, #1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	61bb      	str	r3, [r7, #24]
      break;
 8002534:	e004      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800253e:	bf00      	nop
    }
  }
  return (frequency);
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	08005368 	.word	0x08005368
 8002554:	08005378 	.word	0x08005378
 8002558:	007a1200 	.word	0x007a1200
 800255c:	003d0900 	.word	0x003d0900
 8002560:	aaaaaaab 	.word	0xaaaaaaab

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e042      	b.n	80025fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe f8ac 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f91d 	bl	80027e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b20      	cmp	r3, #32
 8002622:	d16d      	bne.n	8002700 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_UART_Transmit+0x2c>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e066      	b.n	8002702 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fe f943 	bl	80008cc <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d108      	bne.n	8002670 <HAL_UART_Transmit+0x6c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e003      	b.n	8002678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002678:	e02a      	b.n	80026d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f840 	bl	800270a <UART_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e036      	b.n	8002702 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3302      	adds	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e007      	b.n	80026c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1cf      	bne.n	800267a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f810 	bl	800270a <UART_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e006      	b.n	8002702 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b090      	sub	sp, #64	; 0x40
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271a:	e050      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d04c      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x30>
 800272a:	f7fe f8cf 	bl	80008cc <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002736:	429a      	cmp	r2, r3
 8002738:	d241      	bcs.n	80027be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275a:	637a      	str	r2, [r7, #52]	; 0x34
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e5      	bne.n	800273a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3314      	adds	r3, #20
 8002774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	613b      	str	r3, [r7, #16]
   return(result);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800278e:	623a      	str	r2, [r7, #32]
 8002790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	69f9      	ldr	r1, [r7, #28]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	61bb      	str	r3, [r7, #24]
   return(result);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e00f      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d09f      	beq.n	800271c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3740      	adds	r7, #64	; 0x40
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002822:	f023 030c 	bic.w	r3, r3, #12
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	430b      	orrs	r3, r1
 800282e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <UART_SetConfig+0x114>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002850:	f7ff fcea 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	e002      	b.n	800285e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002858:	f7ff fcd2 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 800285c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	009a      	lsls	r2, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <UART_SetConfig+0x118>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	0119      	lsls	r1, r3, #4
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009a      	lsls	r2, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fbb2 f2f3 	udiv	r2, r2, r3
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <UART_SetConfig+0x118>)
 8002896:	fba3 0302 	umull	r0, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2064      	movs	r0, #100	; 0x64
 800289e:	fb00 f303 	mul.w	r3, r0, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	3332      	adds	r3, #50	; 0x32
 80028a8:	4a15      	ldr	r2, [pc, #84]	; (8002900 <UART_SetConfig+0x118>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	4419      	add	r1, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <UART_SetConfig+0x118>)
 80028ce:	fba3 0302 	umull	r0, r3, r3, r2
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2064      	movs	r0, #100	; 0x64
 80028d6:	fb00 f303 	mul.w	r3, r0, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3332      	adds	r3, #50	; 0x32
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <UART_SetConfig+0x118>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 020f 	and.w	r2, r3, #15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	440a      	add	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40013800 	.word	0x40013800
 8002900:	51eb851f 	.word	0x51eb851f

08002904 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800290a:	f3ef 8305 	mrs	r3, IPSR
 800290e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002916:	f3ef 8310 	mrs	r3, PRIMASK
 800291a:	607b      	str	r3, [r7, #4]
  return(result);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <osKernelInitialize+0x32>
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <osKernelInitialize+0x60>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d109      	bne.n	800293e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800292a:	f3ef 8311 	mrs	r3, BASEPRI
 800292e:	603b      	str	r3, [r7, #0]
  return(result);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002936:	f06f 0305 	mvn.w	r3, #5
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e00c      	b.n	8002958 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <osKernelInitialize+0x60>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <osKernelInitialize+0x60>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e002      	b.n	8002958 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	200000fc 	.word	0x200000fc

08002968 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800296e:	f3ef 8305 	mrs	r3, IPSR
 8002972:	60bb      	str	r3, [r7, #8]
  return(result);
 8002974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297a:	f3ef 8310 	mrs	r3, PRIMASK
 800297e:	607b      	str	r3, [r7, #4]
  return(result);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <osKernelStart+0x32>
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <osKernelStart+0x64>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d109      	bne.n	80029a2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800298e:	f3ef 8311 	mrs	r3, BASEPRI
 8002992:	603b      	str	r3, [r7, #0]
  return(result);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800299a:	f06f 0305 	mvn.w	r3, #5
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e00e      	b.n	80029c0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <osKernelStart+0x64>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <osKernelStart+0x64>)
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80029b0:	f001 f816 	bl	80039e0 <vTaskStartScheduler>
      stat = osOK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e002      	b.n	80029c0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029c0:	68fb      	ldr	r3, [r7, #12]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200000fc 	.word	0x200000fc

080029d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b092      	sub	sp, #72	; 0x48
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e0:	f3ef 8305 	mrs	r3, IPSR
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 8094 	bne.w	8002b16 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ee:	f3ef 8310 	mrs	r3, PRIMASK
 80029f2:	623b      	str	r3, [r7, #32]
  return(result);
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 808d 	bne.w	8002b16 <osThreadNew+0x146>
 80029fc:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <osThreadNew+0x150>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d106      	bne.n	8002a12 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a04:	f3ef 8311 	mrs	r3, BASEPRI
 8002a08:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 8082 	bne.w	8002b16 <osThreadNew+0x146>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d07e      	beq.n	8002b16 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a1c:	2318      	movs	r3, #24
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a20:	2300      	movs	r3, #0
 8002a22:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a24:	f107 031b 	add.w	r3, r7, #27
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d045      	beq.n	8002ac2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <osThreadNew+0x74>
        name = attr->name;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <osThreadNew+0x9a>
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	2b38      	cmp	r3, #56	; 0x38
 8002a5c:	d805      	bhi.n	8002a6a <osThreadNew+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <osThreadNew+0x9e>
        return (NULL);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e054      	b.n	8002b18 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00e      	beq.n	8002aa4 <osThreadNew+0xd4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b5b      	cmp	r3, #91	; 0x5b
 8002a8c:	d90a      	bls.n	8002aa4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <osThreadNew+0xd4>
        mem = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa2:	e010      	b.n	8002ac6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10c      	bne.n	8002ac6 <osThreadNew+0xf6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <osThreadNew+0xf6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <osThreadNew+0xf6>
          mem = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac0:	e001      	b.n	8002ac6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d110      	bne.n	8002aee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ad4:	9202      	str	r2, [sp, #8]
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fde4 	bl	80036b0 <xTaskCreateStatic>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e013      	b.n	8002b16 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d110      	bne.n	8002b16 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fe2e 	bl	8003768 <xTaskCreate>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <osThreadNew+0x146>
          hTask = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b16:	697b      	ldr	r3, [r7, #20]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200000fc 	.word	0x200000fc

08002b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <vApplicationGetIdleTaskMemory+0x28>)
 8002b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000100 	.word	0x20000100
 8002b50:	2000015c 	.word	0x2000015c

08002b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <vApplicationGetTimerTaskMemory+0x30>)
 8002b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000035c 	.word	0x2000035c
 8002b84:	200003b8 	.word	0x200003b8

08002b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f103 0208 	add.w	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0208 	add.w	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 0208 	add.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d103      	bne.n	8002c44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e00c      	b.n	8002c5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3308      	adds	r3, #8
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e002      	b.n	8002c52 <vListInsert+0x2e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d2f6      	bcs.n	8002c4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6852      	ldr	r2, [r2, #4]
 8002cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d103      	bne.n	8002cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
	...

08002ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d12:	f001 ff93 	bl	8004c3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	441a      	add	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	3b01      	subs	r3, #1
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	441a      	add	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	22ff      	movs	r2, #255	; 0xff
 8002d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d114      	bne.n	8002d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01a      	beq.n	8002da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3310      	adds	r3, #16
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 f8bd 	bl	8003ef4 <xTaskRemoveFromEventList>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <xQueueGenericReset+0xcc>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	e009      	b.n	8002da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3310      	adds	r3, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fef6 	bl	8002b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3324      	adds	r3, #36	; 0x24
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fef1 	bl	8002b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002da6:	f001 ff79 	bl	8004c9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	e000ed04 	.word	0xe000ed04

08002db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <xQueueGenericCreateStatic+0x52>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <xQueueGenericCreateStatic+0x56>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <xQueueGenericCreateStatic+0x58>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	623b      	str	r3, [r7, #32]
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <xQueueGenericCreateStatic+0x7e>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <xQueueGenericCreateStatic+0x82>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <xQueueGenericCreateStatic+0x84>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	61fb      	str	r3, [r7, #28]
}
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e56:	2350      	movs	r3, #80	; 0x50
 8002e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b50      	cmp	r3, #80	; 0x50
 8002e5e:	d00a      	beq.n	8002e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	61bb      	str	r3, [r7, #24]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f805 	bl	8002ea6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e002      	b.n	8002ec8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	69b8      	ldr	r0, [r7, #24]
 8002ed8:	f7ff ff06 	bl	8002ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <xQueueGenericSend+0x32>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <xQueueGenericSend+0x40>
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <xQueueGenericSend+0x44>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <xQueueGenericSend+0x46>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <xQueueGenericSend+0x60>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d103      	bne.n	8002f5a <xQueueGenericSend+0x6e>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <xQueueGenericSend+0x72>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <xQueueGenericSend+0x74>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xQueueGenericSend+0x8e>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	623b      	str	r3, [r7, #32]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f7a:	f001 f97d 	bl	8004278 <xTaskGetSchedulerState>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <xQueueGenericSend+0x9e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <xQueueGenericSend+0xa2>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <xQueueGenericSend+0xa4>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericSend+0xbe>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	61fb      	str	r3, [r7, #28]
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002faa:	f001 fe47 	bl	8004c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <xQueueGenericSend+0xd4>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d129      	bne.n	8003014 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc6:	f000 fa07 	bl	80033d8 <prvCopyDataToQueue>
 8002fca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	3324      	adds	r3, #36	; 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 ff8b 	bl	8003ef4 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <xQueueGenericSend+0x1f8>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	e00a      	b.n	800300c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <xQueueGenericSend+0x1f8>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800300c:	f001 fe46 	bl	8004c9c <vPortExitCritical>
				return pdPASS;
 8003010:	2301      	movs	r3, #1
 8003012:	e063      	b.n	80030dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800301a:	f001 fe3f 	bl	8004c9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800301e:	2300      	movs	r3, #0
 8003020:	e05c      	b.n	80030dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	4618      	mov	r0, r3
 800302e:	f000 ffc5 	bl	8003fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003032:	2301      	movs	r3, #1
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003036:	f001 fe31 	bl	8004c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800303a:	f000 fd37 	bl	8003aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800303e:	f001 fdfd 	bl	8004c3c <vPortEnterCritical>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003048:	b25b      	sxtb	r3, r3
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d103      	bne.n	8003058 <xQueueGenericSend+0x16c>
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305e:	b25b      	sxtb	r3, r3
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d103      	bne.n	800306e <xQueueGenericSend+0x182>
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800306e:	f001 fe15 	bl	8004c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003072:	1d3a      	adds	r2, r7, #4
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f000 ffb4 	bl	8003fe8 <xTaskCheckForTimeOut>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d124      	bne.n	80030d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003088:	f000 fa9e 	bl	80035c8 <prvIsQueueFull>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	3310      	adds	r3, #16
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 feda 	bl	8003e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a2:	f000 fa29 	bl	80034f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030a6:	f000 fd0f 	bl	8003ac8 <xTaskResumeAll>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f47f af7c 	bne.w	8002faa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <xQueueGenericSend+0x1f8>)
 80030b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	e772      	b.n	8002faa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c6:	f000 fa17 	bl	80034f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ca:	f000 fcfd 	bl	8003ac8 <xTaskResumeAll>
 80030ce:	e76c      	b.n	8002faa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d2:	f000 fa11 	bl	80034f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030d6:	f000 fcf7 	bl	8003ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030da:	2300      	movs	r3, #0
		}
	}
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3738      	adds	r7, #56	; 0x38
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <xQueueGenericSendFromISR+0x3c>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <xQueueGenericSendFromISR+0x40>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <xQueueGenericSendFromISR+0x42>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	623b      	str	r3, [r7, #32]
}
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d103      	bne.n	8003152 <xQueueGenericSendFromISR+0x6a>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <xQueueGenericSendFromISR+0x6e>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <xQueueGenericSendFromISR+0x70>
 8003156:	2300      	movs	r3, #0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	61fb      	str	r3, [r7, #28]
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003172:	f001 fe25 	bl	8004dc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003176:	f3ef 8211 	mrs	r2, BASEPRI
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	61ba      	str	r2, [r7, #24]
 800318c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800318e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <xQueueGenericSendFromISR+0xbc>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d12c      	bne.n	80031fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b4:	f000 f910 	bl	80033d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d112      	bne.n	80031e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	3324      	adds	r3, #36	; 0x24
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fe90 	bl	8003ef4 <xTaskRemoveFromEventList>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00e      	beq.n	80031f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e007      	b.n	80031f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	b25a      	sxtb	r2, r3
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031f8:	2301      	movs	r3, #1
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80031fc:	e001      	b.n	8003202 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800320c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003210:	4618      	mov	r0, r3
 8003212:	3738      	adds	r7, #56	; 0x38
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <xQueueReceive+0x30>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	623b      	str	r3, [r7, #32]
}
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <xQueueReceive+0x3e>
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <xQueueReceive+0x42>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <xQueueReceive+0x44>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueReceive+0x5e>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	61fb      	str	r3, [r7, #28]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003276:	f000 ffff 	bl	8004278 <xTaskGetSchedulerState>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <xQueueReceive+0x6e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <xQueueReceive+0x72>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <xQueueReceive+0x74>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <xQueueReceive+0x8e>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	61bb      	str	r3, [r7, #24]
}
 80032a2:	bf00      	nop
 80032a4:	e7fe      	b.n	80032a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032a6:	f001 fcc9 	bl	8004c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01f      	beq.n	80032f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ba:	f000 f8f7 	bl	80034ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00f      	beq.n	80032ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	3310      	adds	r3, #16
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fe0e 	bl	8003ef4 <xTaskRemoveFromEventList>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <xQueueReceive+0x1bc>)
 80032e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032ee:	f001 fcd5 	bl	8004c9c <vPortExitCritical>
				return pdPASS;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e069      	b.n	80033ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d103      	bne.n	8003304 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032fc:	f001 fcce 	bl	8004c9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003300:	2300      	movs	r3, #0
 8003302:	e062      	b.n	80033ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800330a:	f107 0310 	add.w	r3, r7, #16
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fe54 	bl	8003fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003314:	2301      	movs	r3, #1
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003318:	f001 fcc0 	bl	8004c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800331c:	f000 fbc6 	bl	8003aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003320:	f001 fc8c 	bl	8004c3c <vPortEnterCritical>
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800332a:	b25b      	sxtb	r3, r3
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d103      	bne.n	800333a <xQueueReceive+0x122>
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003340:	b25b      	sxtb	r3, r3
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d103      	bne.n	8003350 <xQueueReceive+0x138>
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003350:	f001 fca4 	bl	8004c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003354:	1d3a      	adds	r2, r7, #4
 8003356:	f107 0310 	add.w	r3, r7, #16
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fe43 	bl	8003fe8 <xTaskCheckForTimeOut>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d123      	bne.n	80033b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800336a:	f000 f917 	bl	800359c <prvIsQueueEmpty>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	3324      	adds	r3, #36	; 0x24
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd69 	bl	8003e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003384:	f000 f8b8 	bl	80034f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003388:	f000 fb9e 	bl	8003ac8 <xTaskResumeAll>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d189      	bne.n	80032a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <xQueueReceive+0x1bc>)
 8003394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	e780      	b.n	80032a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a6:	f000 f8a7 	bl	80034f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033aa:	f000 fb8d 	bl	8003ac8 <xTaskResumeAll>
 80033ae:	e77a      	b.n	80032a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b2:	f000 f8a1 	bl	80034f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033b6:	f000 fb87 	bl	8003ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033bc:	f000 f8ee 	bl	800359c <prvIsQueueEmpty>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f43f af6f 	beq.w	80032a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d14d      	bne.n	800349a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 ff56 	bl	80042b4 <xTaskPriorityDisinherit>
 8003408:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	e043      	b.n	800349a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d119      	bne.n	800344c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6898      	ldr	r0, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	461a      	mov	r2, r3
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	f001 ff0e 	bl	8005244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	441a      	add	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d32b      	bcc.n	800349a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e026      	b.n	800349a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68d8      	ldr	r0, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	461a      	mov	r2, r3
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	f001 fef4 	bl	8005244 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	425b      	negs	r3, r3
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d207      	bcs.n	8003488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	425b      	negs	r3, r3
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d105      	bne.n	800349a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	3b01      	subs	r3, #1
 8003498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034a2:	697b      	ldr	r3, [r7, #20]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	441a      	add	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d303      	bcc.n	80034e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68d9      	ldr	r1, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	461a      	mov	r2, r3
 80034ea:	6838      	ldr	r0, [r7, #0]
 80034ec:	f001 feaa 	bl	8005244 <memcpy>
	}
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003500:	f001 fb9c 	bl	8004c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800350a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800350c:	e011      	b.n	8003532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3324      	adds	r3, #36	; 0x24
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fcea 	bl	8003ef4 <xTaskRemoveFromEventList>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003526:	f000 fdc1 	bl	80040ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	3b01      	subs	r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dce9      	bgt.n	800350e <prvUnlockQueue+0x16>
 800353a:	e000      	b.n	800353e <prvUnlockQueue+0x46>
					break;
 800353c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003546:	f001 fba9 	bl	8004c9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800354a:	f001 fb77 	bl	8004c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003556:	e011      	b.n	800357c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3310      	adds	r3, #16
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fcc5 	bl	8003ef4 <xTaskRemoveFromEventList>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003570:	f000 fd9c 	bl	80040ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	3b01      	subs	r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800357c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003580:	2b00      	cmp	r3, #0
 8003582:	dce9      	bgt.n	8003558 <prvUnlockQueue+0x60>
 8003584:	e000      	b.n	8003588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003590:	f001 fb84 	bl	8004c9c <vPortExitCritical>
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035a4:	f001 fb4a 	bl	8004c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e001      	b.n	80035ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ba:	f001 fb6f 	bl	8004c9c <vPortExitCritical>

	return xReturn;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035d0:	f001 fb34 	bl	8004c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d102      	bne.n	80035e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e001      	b.n	80035ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ea:	f001 fb57 	bl	8004c9c <vPortExitCritical>

	return xReturn;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	e014      	b.n	8003632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003608:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <vQueueAddToRegistry+0x4c>)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003614:	490b      	ldr	r1, [pc, #44]	; (8003644 <vQueueAddToRegistry+0x4c>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <vQueueAddToRegistry+0x4c>)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800362a:	e006      	b.n	800363a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3301      	adds	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b07      	cmp	r3, #7
 8003636:	d9e7      	bls.n	8003608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	200007b8 	.word	0x200007b8

08003648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003658:	f001 faf0 	bl	8004c3c <vPortEnterCritical>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d103      	bne.n	8003672 <vQueueWaitForMessageRestricted+0x2a>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003678:	b25b      	sxtb	r3, r3
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d103      	bne.n	8003688 <vQueueWaitForMessageRestricted+0x40>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003688:	f001 fb08 	bl	8004c9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3324      	adds	r3, #36	; 0x24
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fbfd 	bl	8003e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff28 	bl	80034f8 <prvUnlockQueue>
	}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xTaskCreateStatic+0x2a>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	623b      	str	r3, [r7, #32]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61fb      	str	r3, [r7, #28]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036f6:	235c      	movs	r3, #92	; 0x5c
 80036f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b5c      	cmp	r3, #92	; 0x5c
 80036fe:	d00a      	beq.n	8003716 <xTaskCreateStatic+0x66>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61bb      	str	r3, [r7, #24]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01e      	beq.n	800375a <xTaskCreateStatic+0xaa>
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01b      	beq.n	800375a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003734:	2300      	movs	r3, #0
 8003736:	9303      	str	r3, [sp, #12]
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	9302      	str	r3, [sp, #8]
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f850 	bl	80037f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003754:	f000 f8d4 	bl	8003900 <prvAddNewTaskToReadyList>
 8003758:	e001      	b.n	800375e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800375e:	697b      	ldr	r3, [r7, #20]
	}
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08c      	sub	sp, #48	; 0x30
 800376c:	af04      	add	r7, sp, #16
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fb5d 	bl	8004e3c <pvPortMalloc>
 8003782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00e      	beq.n	80037a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800378a:	205c      	movs	r0, #92	; 0x5c
 800378c:	f001 fb56 	bl	8004e3c <pvPortMalloc>
 8003790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
 800379e:	e005      	b.n	80037ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037a0:	6978      	ldr	r0, [r7, #20]
 80037a2:	f001 fc0f 	bl	8004fc4 <vPortFree>
 80037a6:	e001      	b.n	80037ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d017      	beq.n	80037e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	2300      	movs	r3, #0
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f80e 	bl	80037f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d6:	69f8      	ldr	r0, [r7, #28]
 80037d8:	f000 f892 	bl	8003900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037dc:	2301      	movs	r3, #1
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e002      	b.n	80037e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037e8:	69bb      	ldr	r3, [r7, #24]
	}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	461a      	mov	r2, r3
 800380a:	21a5      	movs	r1, #165	; 0xa5
 800380c:	f001 fcee 	bl	80051ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800381a:	3b01      	subs	r3, #1
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f023 0307 	bic.w	r3, r3, #7
 8003828:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	617b      	str	r3, [r7, #20]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e012      	b.n	8003876 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	7819      	ldrb	r1, [r3, #0]
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	3334      	adds	r3, #52	; 0x34
 8003860:	460a      	mov	r2, r1
 8003862:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d006      	beq.n	800387e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d9e9      	bls.n	8003850 <prvInitialiseNewTask+0x5e>
 800387c:	e000      	b.n	8003880 <prvInitialiseNewTask+0x8e>
		{
			break;
 800387e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	2b37      	cmp	r3, #55	; 0x37
 800388c:	d901      	bls.n	8003892 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800388e:	2337      	movs	r3, #55	; 0x37
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f98c 	bl	8002bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	3318      	adds	r3, #24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f987 	bl	8002bc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	69b8      	ldr	r0, [r7, #24]
 80038e2:	f001 f8bb 	bl	8004a5c <pxPortInitialiseStack>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f8:	bf00      	nop
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003908:	f001 f998 	bl	8004c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <prvAddNewTaskToReadyList+0xc4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <prvAddNewTaskToReadyList+0xc4>)
 8003914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800391e:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <prvAddNewTaskToReadyList+0xc4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d110      	bne.n	800394e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800392c:	f000 fbe2 	bl	80040f4 <prvInitialiseTaskLists>
 8003930:	e00d      	b.n	800394e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <prvAddNewTaskToReadyList+0xcc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d802      	bhi.n	800394e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <prvAddNewTaskToReadyList+0xd0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <prvAddNewTaskToReadyList+0xd0>)
 8003956:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <prvAddNewTaskToReadyList+0xd0>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <prvAddNewTaskToReadyList+0xd4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d903      	bls.n	8003974 <prvAddNewTaskToReadyList+0x74>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <prvAddNewTaskToReadyList+0xd4>)
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <prvAddNewTaskToReadyList+0xd8>)
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7ff f927 	bl	8002bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003990:	f001 f984 	bl	8004c9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <prvAddNewTaskToReadyList+0xcc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d207      	bcs.n	80039ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <prvAddNewTaskToReadyList+0xdc>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000ccc 	.word	0x20000ccc
 80039c8:	200007f8 	.word	0x200007f8
 80039cc:	20000cd8 	.word	0x20000cd8
 80039d0:	20000ce8 	.word	0x20000ce8
 80039d4:	20000cd4 	.word	0x20000cd4
 80039d8:	200007fc 	.word	0x200007fc
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ee:	463a      	mov	r2, r7
 80039f0:	1d39      	adds	r1, r7, #4
 80039f2:	f107 0308 	add.w	r3, r7, #8
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f894 	bl	8002b24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	9202      	str	r2, [sp, #8]
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2300      	movs	r3, #0
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	4921      	ldr	r1, [pc, #132]	; (8003a94 <vTaskStartScheduler+0xb4>)
 8003a10:	4821      	ldr	r0, [pc, #132]	; (8003a98 <vTaskStartScheduler+0xb8>)
 8003a12:	f7ff fe4d 	bl	80036b0 <xTaskCreateStatic>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <vTaskStartScheduler+0xbc>)
 8003a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <vTaskStartScheduler+0xbc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e001      	b.n	8003a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d102      	bne.n	8003a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a34:	f000 fd00 	bl	8004438 <xTimerCreateTimerTask>
 8003a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d116      	bne.n	8003a6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	613b      	str	r3, [r7, #16]
}
 8003a52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <vTaskStartScheduler+0xc0>)
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <vTaskStartScheduler+0xc4>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <vTaskStartScheduler+0xc8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a68:	f001 f876 	bl	8004b58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a6c:	e00e      	b.n	8003a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d10a      	bne.n	8003a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60fb      	str	r3, [r7, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <vTaskStartScheduler+0xaa>
}
 8003a8c:	bf00      	nop
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	080052b8 	.word	0x080052b8
 8003a98:	080040c5 	.word	0x080040c5
 8003a9c:	20000cf0 	.word	0x20000cf0
 8003aa0:	20000cec 	.word	0x20000cec
 8003aa4:	20000cd8 	.word	0x20000cd8
 8003aa8:	20000cd0 	.word	0x20000cd0

08003aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <vTaskSuspendAll+0x18>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <vTaskSuspendAll+0x18>)
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000cf4 	.word	0x20000cf4

08003ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <xTaskResumeAll+0x118>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	603b      	str	r3, [r7, #0]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003af4:	f001 f8a2 	bl	8004c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003af8:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <xTaskResumeAll+0x118>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	4a38      	ldr	r2, [pc, #224]	; (8003be0 <xTaskResumeAll+0x118>)
 8003b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <xTaskResumeAll+0x118>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d162      	bne.n	8003bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b0a:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <xTaskResumeAll+0x11c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d05e      	beq.n	8003bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b12:	e02f      	b.n	8003b74 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b14:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <xTaskResumeAll+0x120>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff f8b7 	bl	8002c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff f8b2 	bl	8002c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <xTaskResumeAll+0x124>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d903      	bls.n	8003b44 <xTaskResumeAll+0x7c>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <xTaskResumeAll+0x124>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <xTaskResumeAll+0x128>)
 8003b52:	441a      	add	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7ff f83f 	bl	8002bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <xTaskResumeAll+0x12c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b6e:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <xTaskResumeAll+0x130>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <xTaskResumeAll+0x120>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1cb      	bne.n	8003b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b82:	f000 fb55 	bl	8004230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <xTaskResumeAll+0x134>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d010      	beq.n	8003bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b92:	f000 f845 	bl	8003c20 <xTaskIncrementTick>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b9c:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <xTaskResumeAll+0x130>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f1      	bne.n	8003b92 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <xTaskResumeAll+0x134>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <xTaskResumeAll+0x130>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <xTaskResumeAll+0x138>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bd0:	f001 f864 	bl	8004c9c <vPortExitCritical>

	return xAlreadyYielded;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000cf4 	.word	0x20000cf4
 8003be4:	20000ccc 	.word	0x20000ccc
 8003be8:	20000c8c 	.word	0x20000c8c
 8003bec:	20000cd4 	.word	0x20000cd4
 8003bf0:	200007fc 	.word	0x200007fc
 8003bf4:	200007f8 	.word	0x200007f8
 8003bf8:	20000ce0 	.word	0x20000ce0
 8003bfc:	20000cdc 	.word	0x20000cdc
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c0a:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <xTaskGetTickCount+0x18>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c10:	687b      	ldr	r3, [r7, #4]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	20000cd0 	.word	0x20000cd0

08003c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2a:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <xTaskIncrementTick+0x150>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 808e 	bne.w	8003d50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c34:	4b4f      	ldr	r3, [pc, #316]	; (8003d74 <xTaskIncrementTick+0x154>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c3c:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <xTaskIncrementTick+0x154>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d120      	bne.n	8003c8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	603b      	str	r3, [r7, #0]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <xTaskIncrementTick+0x46>
 8003c68:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <xTaskIncrementTick+0x15c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <xTaskIncrementTick+0x15c>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <xTaskIncrementTick+0x160>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <xTaskIncrementTick+0x160>)
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	f000 fad3 	bl	8004230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <xTaskIncrementTick+0x164>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d34e      	bcc.n	8003d32 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c94:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <xTaskIncrementTick+0x82>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xTaskIncrementTick+0x84>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca8:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <xTaskIncrementTick+0x164>)
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	601a      	str	r2, [r3, #0]
					break;
 8003cb0:	e03f      	b.n	8003d32 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d203      	bcs.n	8003cd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cca:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <xTaskIncrementTick+0x164>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]
						break;
 8003cd0:	e02f      	b.n	8003d32 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ffdc 	bl	8002c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe ffd3 	bl	8002c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <xTaskIncrementTick+0x168>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d903      	bls.n	8003d02 <xTaskIncrementTick+0xe2>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <xTaskIncrementTick+0x168>)
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <xTaskIncrementTick+0x16c>)
 8003d10:	441a      	add	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f7fe ff60 	bl	8002bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <xTaskIncrementTick+0x170>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3b3      	bcc.n	8003c94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d30:	e7b0      	b.n	8003c94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <xTaskIncrementTick+0x170>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4914      	ldr	r1, [pc, #80]	; (8003d8c <xTaskIncrementTick+0x16c>)
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d907      	bls.n	8003d5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e004      	b.n	8003d5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <xTaskIncrementTick+0x174>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <xTaskIncrementTick+0x174>)
 8003d58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <xTaskIncrementTick+0x178>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d66:	697b      	ldr	r3, [r7, #20]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000cf4 	.word	0x20000cf4
 8003d74:	20000cd0 	.word	0x20000cd0
 8003d78:	20000c84 	.word	0x20000c84
 8003d7c:	20000c88 	.word	0x20000c88
 8003d80:	20000ce4 	.word	0x20000ce4
 8003d84:	20000cec 	.word	0x20000cec
 8003d88:	20000cd4 	.word	0x20000cd4
 8003d8c:	200007fc 	.word	0x200007fc
 8003d90:	200007f8 	.word	0x200007f8
 8003d94:	20000cdc 	.word	0x20000cdc
 8003d98:	20000ce0 	.word	0x20000ce0

08003d9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <vTaskSwitchContext+0xa4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <vTaskSwitchContext+0xa8>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003db0:	e041      	b.n	8003e36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <vTaskSwitchContext+0xa8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <vTaskSwitchContext+0xac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e010      	b.n	8003de2 <vTaskSwitchContext+0x46>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <vTaskSwitchContext+0x40>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	607b      	str	r3, [r7, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <vTaskSwitchContext+0x3e>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	491a      	ldr	r1, [pc, #104]	; (8003e4c <vTaskSwitchContext+0xb0>)
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0e4      	beq.n	8003dc0 <vTaskSwitchContext+0x24>
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <vTaskSwitchContext+0xb0>)
 8003e02:	4413      	add	r3, r2
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3308      	adds	r3, #8
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d104      	bne.n	8003e26 <vTaskSwitchContext+0x8a>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <vTaskSwitchContext+0xb4>)
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <vTaskSwitchContext+0xac>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6013      	str	r3, [r2, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	20000cf4 	.word	0x20000cf4
 8003e44:	20000ce0 	.word	0x20000ce0
 8003e48:	20000cd4 	.word	0x20000cd4
 8003e4c:	200007fc 	.word	0x200007fc
 8003e50:	200007f8 	.word	0x200007f8

08003e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60fb      	str	r3, [r7, #12]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <vTaskPlaceOnEventList+0x44>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fece 	bl	8002c24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e88:	2101      	movs	r1, #1
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	f000 fa80 	bl	8004390 <prvAddCurrentTaskToDelayedList>
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	200007f8 	.word	0x200007f8

08003e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	617b      	str	r3, [r7, #20]
}
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3318      	adds	r3, #24
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7fe fe86 	bl	8002bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f000 fa55 	bl	8004390 <prvAddCurrentTaskToDelayedList>
	}
 8003ee6:	bf00      	nop
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200007f8 	.word	0x200007f8

08003ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60fb      	str	r3, [r7, #12]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	3318      	adds	r3, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe feb5 	bl	8002c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <xTaskRemoveFromEventList+0xb0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11d      	bne.n	8003f6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe feac 	bl	8002c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <xTaskRemoveFromEventList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <xTaskRemoveFromEventList+0x5c>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <xTaskRemoveFromEventList+0xb4>)
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <xTaskRemoveFromEventList+0xb8>)
 8003f5e:	441a      	add	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7fe fe39 	bl	8002bde <vListInsertEnd>
 8003f6c:	e005      	b.n	8003f7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	3318      	adds	r3, #24
 8003f72:	4619      	mov	r1, r3
 8003f74:	480e      	ldr	r0, [pc, #56]	; (8003fb0 <xTaskRemoveFromEventList+0xbc>)
 8003f76:	f7fe fe32 	bl	8002bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <xTaskRemoveFromEventList+0xc0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d905      	bls.n	8003f94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <xTaskRemoveFromEventList+0xc4>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e001      	b.n	8003f98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003f98:	697b      	ldr	r3, [r7, #20]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000cf4 	.word	0x20000cf4
 8003fa8:	20000cd4 	.word	0x20000cd4
 8003fac:	200007fc 	.word	0x200007fc
 8003fb0:	20000c8c 	.word	0x20000c8c
 8003fb4:	200007f8 	.word	0x200007f8
 8003fb8:	20000ce0 	.word	0x20000ce0

08003fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <vTaskInternalSetTimeOutState+0x24>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <vTaskInternalSetTimeOutState+0x28>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000ce4 	.word	0x20000ce4
 8003fe4:	20000cd0 	.word	0x20000cd0

08003fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	613b      	str	r3, [r7, #16]
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800402a:	f000 fe07 	bl	8004c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <xTaskCheckForTimeOut+0xbc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d102      	bne.n	800404e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	e023      	b.n	8004096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <xTaskCheckForTimeOut+0xc0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d007      	beq.n	800406a <xTaskCheckForTimeOut+0x82>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	e015      	b.n	8004096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d20b      	bcs.n	800408c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad2      	subs	r2, r2, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff9b 	bl	8003fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e004      	b.n	8004096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004092:	2301      	movs	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004096:	f000 fe01 	bl	8004c9c <vPortExitCritical>

	return xReturn;
 800409a:	69fb      	ldr	r3, [r7, #28]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000cd0 	.word	0x20000cd0
 80040a8:	20000ce4 	.word	0x20000ce4

080040ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <vTaskMissedYield+0x14>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000ce0 	.word	0x20000ce0

080040c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040cc:	f000 f852 	bl	8004174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <prvIdleTask+0x28>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d9f9      	bls.n	80040cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <prvIdleTask+0x2c>)
 80040da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040e8:	e7f0      	b.n	80040cc <prvIdleTask+0x8>
 80040ea:	bf00      	nop
 80040ec:	200007fc 	.word	0x200007fc
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	e00c      	b.n	800411a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a12      	ldr	r2, [pc, #72]	; (8004154 <prvInitialiseTaskLists+0x60>)
 800410c:	4413      	add	r3, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fd3a 	bl	8002b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3301      	adds	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b37      	cmp	r3, #55	; 0x37
 800411e:	d9ef      	bls.n	8004100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004120:	480d      	ldr	r0, [pc, #52]	; (8004158 <prvInitialiseTaskLists+0x64>)
 8004122:	f7fe fd31 	bl	8002b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004126:	480d      	ldr	r0, [pc, #52]	; (800415c <prvInitialiseTaskLists+0x68>)
 8004128:	f7fe fd2e 	bl	8002b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800412c:	480c      	ldr	r0, [pc, #48]	; (8004160 <prvInitialiseTaskLists+0x6c>)
 800412e:	f7fe fd2b 	bl	8002b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004132:	480c      	ldr	r0, [pc, #48]	; (8004164 <prvInitialiseTaskLists+0x70>)
 8004134:	f7fe fd28 	bl	8002b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004138:	480b      	ldr	r0, [pc, #44]	; (8004168 <prvInitialiseTaskLists+0x74>)
 800413a:	f7fe fd25 	bl	8002b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <prvInitialiseTaskLists+0x78>)
 8004140:	4a05      	ldr	r2, [pc, #20]	; (8004158 <prvInitialiseTaskLists+0x64>)
 8004142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvInitialiseTaskLists+0x7c>)
 8004146:	4a05      	ldr	r2, [pc, #20]	; (800415c <prvInitialiseTaskLists+0x68>)
 8004148:	601a      	str	r2, [r3, #0]
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200007fc 	.word	0x200007fc
 8004158:	20000c5c 	.word	0x20000c5c
 800415c:	20000c70 	.word	0x20000c70
 8004160:	20000c8c 	.word	0x20000c8c
 8004164:	20000ca0 	.word	0x20000ca0
 8004168:	20000cb8 	.word	0x20000cb8
 800416c:	20000c84 	.word	0x20000c84
 8004170:	20000c88 	.word	0x20000c88

08004174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800417a:	e019      	b.n	80041b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800417c:	f000 fd5e 	bl	8004c3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <prvCheckTasksWaitingTermination+0x50>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fd81 	bl	8002c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <prvCheckTasksWaitingTermination+0x54>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3b01      	subs	r3, #1
 8004198:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <prvCheckTasksWaitingTermination+0x54>)
 800419a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <prvCheckTasksWaitingTermination+0x58>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <prvCheckTasksWaitingTermination+0x58>)
 80041a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041a6:	f000 fd79 	bl	8004c9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f810 	bl	80041d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <prvCheckTasksWaitingTermination+0x58>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e1      	bne.n	800417c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000ca0 	.word	0x20000ca0
 80041c8:	20000ccc 	.word	0x20000ccc
 80041cc:	20000cb4 	.word	0x20000cb4

080041d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d108      	bne.n	80041f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 feec 	bl	8004fc4 <vPortFree>
				vPortFree( pxTCB );
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fee9 	bl	8004fc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041f2:	e018      	b.n	8004226 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d103      	bne.n	8004206 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fee0 	bl	8004fc4 <vPortFree>
	}
 8004204:	e00f      	b.n	8004226 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800420c:	2b02      	cmp	r3, #2
 800420e:	d00a      	beq.n	8004226 <prvDeleteTCB+0x56>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	60fb      	str	r3, [r7, #12]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <prvDeleteTCB+0x54>
	}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <prvResetNextTaskUnblockTime+0x40>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <prvResetNextTaskUnblockTime+0x14>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <prvResetNextTaskUnblockTime+0x16>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <prvResetNextTaskUnblockTime+0x44>)
 800424c:	f04f 32ff 	mov.w	r2, #4294967295
 8004250:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004252:	e008      	b.n	8004266 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <prvResetNextTaskUnblockTime+0x40>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <prvResetNextTaskUnblockTime+0x44>)
 8004264:	6013      	str	r3, [r2, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	20000c84 	.word	0x20000c84
 8004274:	20000cec 	.word	0x20000cec

08004278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <xTaskGetSchedulerState+0x34>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004286:	2301      	movs	r3, #1
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	e008      	b.n	800429e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <xTaskGetSchedulerState+0x38>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004294:	2302      	movs	r3, #2
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	e001      	b.n	800429e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800429e:	687b      	ldr	r3, [r7, #4]
	}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000cd8 	.word	0x20000cd8
 80042b0:	20000cf4 	.word	0x20000cf4

080042b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d056      	beq.n	8004378 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042ca:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <xTaskPriorityDisinherit+0xd0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d00a      	beq.n	80042ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60fb      	str	r3, [r7, #12]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	1e5a      	subs	r2, r3, #1
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	429a      	cmp	r2, r3
 800431c:	d02c      	beq.n	8004378 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	d128      	bne.n	8004378 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3304      	adds	r3, #4
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fcb2 	bl	8002c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <xTaskPriorityDisinherit+0xd4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d903      	bls.n	8004358 <xTaskPriorityDisinherit+0xa4>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <xTaskPriorityDisinherit+0xd4>)
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4a09      	ldr	r2, [pc, #36]	; (800438c <xTaskPriorityDisinherit+0xd8>)
 8004366:	441a      	add	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f7fe fc35 	bl	8002bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004378:	697b      	ldr	r3, [r7, #20]
	}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200007f8 	.word	0x200007f8
 8004388:	20000cd4 	.word	0x20000cd4
 800438c:	200007fc 	.word	0x200007fc

08004390 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <prvAddCurrentTaskToDelayedList+0x90>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fc74 	bl	8002c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d10a      	bne.n	80043ca <prvAddCurrentTaskToDelayedList+0x3a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4819      	ldr	r0, [pc, #100]	; (8004428 <prvAddCurrentTaskToDelayedList+0x98>)
 80043c4:	f7fe fc0b 	bl	8002bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043c8:	e026      	b.n	8004418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d209      	bcs.n	80043f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <prvAddCurrentTaskToDelayedList+0x9c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7fe fc18 	bl	8002c24 <vListInsert>
}
 80043f4:	e010      	b.n	8004418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f6:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7fe fc0e 	bl	8002c24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d202      	bcs.n	8004418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004412:	4a08      	ldr	r2, [pc, #32]	; (8004434 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000cd0 	.word	0x20000cd0
 8004424:	200007f8 	.word	0x200007f8
 8004428:	20000cb8 	.word	0x20000cb8
 800442c:	20000c88 	.word	0x20000c88
 8004430:	20000c84 	.word	0x20000c84
 8004434:	20000cec 	.word	0x20000cec

08004438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004442:	f000 facb 	bl	80049dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <xTimerCreateTimerTask+0x80>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004456:	1d3a      	adds	r2, r7, #4
 8004458:	f107 0108 	add.w	r1, r7, #8
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fb77 	bl	8002b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	9202      	str	r2, [sp, #8]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	2302      	movs	r3, #2
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	460a      	mov	r2, r1
 8004478:	4910      	ldr	r1, [pc, #64]	; (80044bc <xTimerCreateTimerTask+0x84>)
 800447a:	4811      	ldr	r0, [pc, #68]	; (80044c0 <xTimerCreateTimerTask+0x88>)
 800447c:	f7ff f918 	bl	80036b0 <xTaskCreateStatic>
 8004480:	4603      	mov	r3, r0
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <xTimerCreateTimerTask+0x8c>)
 8004484:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <xTimerCreateTimerTask+0x8c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800448e:	2301      	movs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	613b      	str	r3, [r7, #16]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044ae:	697b      	ldr	r3, [r7, #20]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000d28 	.word	0x20000d28
 80044bc:	080052c0 	.word	0x080052c0
 80044c0:	080045e5 	.word	0x080045e5
 80044c4:	20000d2c 	.word	0x20000d2c

080044c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	623b      	str	r3, [r7, #32]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <xTimerGenericCommand+0x98>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02a      	beq.n	8004554 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	dc18      	bgt.n	8004542 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004510:	f7ff feb2 	bl	8004278 <xTaskGetSchedulerState>
 8004514:	4603      	mov	r3, r0
 8004516:	2b02      	cmp	r3, #2
 8004518:	d109      	bne.n	800452e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <xTimerGenericCommand+0x98>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f107 0110 	add.w	r1, r7, #16
 8004522:	2300      	movs	r3, #0
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	f7fe fce1 	bl	8002eec <xQueueGenericSend>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24
 800452c:	e012      	b.n	8004554 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <xTimerGenericCommand+0x98>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f107 0110 	add.w	r1, r7, #16
 8004536:	2300      	movs	r3, #0
 8004538:	2200      	movs	r2, #0
 800453a:	f7fe fcd7 	bl	8002eec <xQueueGenericSend>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24
 8004540:	e008      	b.n	8004554 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <xTimerGenericCommand+0x98>)
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	f107 0110 	add.w	r1, r7, #16
 800454a:	2300      	movs	r3, #0
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	f7fe fdcb 	bl	80030e8 <xQueueGenericSendFromISR>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004556:	4618      	mov	r0, r3
 8004558:	3728      	adds	r7, #40	; 0x28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000d28 	.word	0x20000d28

08004564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <prvProcessExpiredTimer+0x7c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fb89 	bl	8002c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d122      	bne.n	80045d0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	18d1      	adds	r1, r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	6978      	ldr	r0, [r7, #20]
 8004598:	f000 f8c8 	bl	800472c <prvInsertTimerInActiveList>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	2100      	movs	r1, #0
 80045ac:	6978      	ldr	r0, [r7, #20]
 80045ae:	f7ff ff8b 	bl	80044c8 <xTimerGenericCommand>
 80045b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60fb      	str	r3, [r7, #12]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	6978      	ldr	r0, [r7, #20]
 80045d6:	4798      	blx	r3
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000d20 	.word	0x20000d20

080045e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f857 	bl	80046a4 <prvGetNextExpireTime>
 80045f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f803 	bl	8004608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004602:	f000 f8d5 	bl	80047b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004606:	e7f1      	b.n	80045ec <prvTimerTask+0x8>

08004608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004612:	f7ff fa4b 	bl	8003aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f866 	bl	80046ec <prvSampleTimeNow>
 8004620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d130      	bne.n	800468a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x3c>
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	429a      	cmp	r2, r3
 8004634:	d806      	bhi.n	8004644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004636:	f7ff fa47 	bl	8003ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff91 	bl	8004564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004642:	e024      	b.n	800468e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <prvProcessTimerOrBlockTask+0x90>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <prvProcessTimerOrBlockTask+0x94>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f7fe ffed 	bl	8003648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800466e:	f7ff fa2b 	bl	8003ac8 <xTaskResumeAll>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <prvProcessTimerOrBlockTask+0x98>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
}
 8004688:	e001      	b.n	800468e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800468a:	f7ff fa1d 	bl	8003ac8 <xTaskResumeAll>
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000d24 	.word	0x20000d24
 800469c:	20000d28 	.word	0x20000d28
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <prvGetNextExpireTime+0x44>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvGetNextExpireTime+0x44>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e001      	b.n	80046da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046da:	68fb      	ldr	r3, [r7, #12]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000d20 	.word	0x20000d20

080046ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046f4:	f7ff fa86 	bl	8003c04 <xTaskGetTickCount>
 80046f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvSampleTimeNow+0x3c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d205      	bcs.n	8004710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004704:	f000 f908 	bl	8004918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e002      	b.n	8004716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004716:	4a04      	ldr	r2, [pc, #16]	; (8004728 <prvSampleTimeNow+0x3c>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800471c:	68fb      	ldr	r3, [r7, #12]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000d30 	.word	0x20000d30

0800472c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d812      	bhi.n	8004778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e01b      	b.n	800479e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <prvInsertTimerInActiveList+0x7c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fe fa57 	bl	8002c24 <vListInsert>
 8004776:	e012      	b.n	800479e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d206      	bcs.n	800478e <prvInsertTimerInActiveList+0x62>
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e007      	b.n	800479e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <prvInsertTimerInActiveList+0x80>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe fa43 	bl	8002c24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000d24 	.word	0x20000d24
 80047ac:	20000d20 	.word	0x20000d20

080047b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	; 0x38
 80047b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047b6:	e09d      	b.n	80048f4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da18      	bge.n	80047f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	3304      	adds	r3, #4
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	61fb      	str	r3, [r7, #28]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e6:	6850      	ldr	r0, [r2, #4]
 80047e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ea:	6892      	ldr	r2, [r2, #8]
 80047ec:	4611      	mov	r1, r2
 80047ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db7e      	blt.n	80048f4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fa44 	bl	8002c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800480c:	463b      	mov	r3, r7
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff ff6c 	bl	80046ec <prvSampleTimeNow>
 8004814:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b09      	cmp	r3, #9
 800481a:	d86a      	bhi.n	80048f2 <prvProcessReceivedCommands+0x142>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <prvProcessReceivedCommands+0x74>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	0800484d 	.word	0x0800484d
 8004828:	0800484d 	.word	0x0800484d
 800482c:	0800484d 	.word	0x0800484d
 8004830:	080048f5 	.word	0x080048f5
 8004834:	080048a9 	.word	0x080048a9
 8004838:	080048e1 	.word	0x080048e1
 800483c:	0800484d 	.word	0x0800484d
 8004840:	0800484d 	.word	0x0800484d
 8004844:	080048f5 	.word	0x080048f5
 8004848:	080048a9 	.word	0x080048a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	18d1      	adds	r1, r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485a:	f7ff ff67 	bl	800472c <prvInsertTimerInActiveList>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d047      	beq.n	80048f4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d13f      	bne.n	80048f4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	441a      	add	r2, r3
 800487c:	2300      	movs	r3, #0
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2300      	movs	r3, #0
 8004882:	2100      	movs	r1, #0
 8004884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004886:	f7ff fe1f 	bl	80044c8 <xTimerGenericCommand>
 800488a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d130      	bne.n	80048f4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61bb      	str	r3, [r7, #24]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	617b      	str	r3, [r7, #20]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	18d1      	adds	r1, r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048da:	f7ff ff27 	bl	800472c <prvInsertTimerInActiveList>
					break;
 80048de:	e009      	b.n	80048f4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80048ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ec:	f000 fb6a 	bl	8004fc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048f0:	e000      	b.n	80048f4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80048f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <prvProcessReceivedCommands+0x164>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	1d39      	adds	r1, r7, #4
 80048fa:	2200      	movs	r2, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fc8b 	bl	8003218 <xQueueReceive>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	f47f af57 	bne.w	80047b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	3730      	adds	r7, #48	; 0x30
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000d28 	.word	0x20000d28

08004918 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800491e:	e045      	b.n	80049ac <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <prvSwitchTimerLists+0xbc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <prvSwitchTimerLists+0xbc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe f9ab 	bl	8002c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12e      	bne.n	80049ac <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d90e      	bls.n	800497e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <prvSwitchTimerLists+0xbc>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f7fe f954 	bl	8002c24 <vListInsert>
 800497c:	e016      	b.n	80049ac <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	2100      	movs	r1, #0
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fd9d 	bl	80044c8 <xTimerGenericCommand>
 800498e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <prvSwitchTimerLists+0x94>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	603b      	str	r3, [r7, #0]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <prvSwitchTimerLists+0xbc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1b4      	bne.n	8004920 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <prvSwitchTimerLists+0xbc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <prvSwitchTimerLists+0xc0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <prvSwitchTimerLists+0xbc>)
 80049c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <prvSwitchTimerLists+0xc0>)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6013      	str	r3, [r2, #0]
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000d20 	.word	0x20000d20
 80049d8:	20000d24 	.word	0x20000d24

080049dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049e2:	f000 f92b 	bl	8004c3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d120      	bne.n	8004a30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049ee:	4814      	ldr	r0, [pc, #80]	; (8004a40 <prvCheckForValidListAndQueue+0x64>)
 80049f0:	f7fe f8ca 	bl	8002b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049f4:	4813      	ldr	r0, [pc, #76]	; (8004a44 <prvCheckForValidListAndQueue+0x68>)
 80049f6:	f7fe f8c7 	bl	8002b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <prvCheckForValidListAndQueue+0x6c>)
 80049fc:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <prvCheckForValidListAndQueue+0x64>)
 80049fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <prvCheckForValidListAndQueue+0x70>)
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <prvCheckForValidListAndQueue+0x68>)
 8004a04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a06:	2300      	movs	r3, #0
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <prvCheckForValidListAndQueue+0x74>)
 8004a0c:	4a11      	ldr	r2, [pc, #68]	; (8004a54 <prvCheckForValidListAndQueue+0x78>)
 8004a0e:	2110      	movs	r1, #16
 8004a10:	200a      	movs	r0, #10
 8004a12:	f7fe f9d1 	bl	8002db8 <xQueueGenericCreateStatic>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 8004a1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	490b      	ldr	r1, [pc, #44]	; (8004a58 <prvCheckForValidListAndQueue+0x7c>)
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fde4 	bl	80035f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a30:	f000 f934 	bl	8004c9c <vPortExitCritical>
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000d28 	.word	0x20000d28
 8004a40:	20000cf8 	.word	0x20000cf8
 8004a44:	20000d0c 	.word	0x20000d0c
 8004a48:	20000d20 	.word	0x20000d20
 8004a4c:	20000d24 	.word	0x20000d24
 8004a50:	20000dd4 	.word	0x20000dd4
 8004a54:	20000d34 	.word	0x20000d34
 8004a58:	080052c8 	.word	0x080052c8

08004a5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b04      	subs	r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b04      	subs	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <pxPortInitialiseStack+0x54>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b14      	subs	r3, #20
 8004a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3b20      	subs	r3, #32
 8004aa2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	08004ab5 	.word	0x08004ab5

08004ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <prvTaskExitError+0x54>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d00a      	beq.n	8004ade <prvTaskExitError+0x2a>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60fb      	str	r3, [r7, #12]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <prvTaskExitError+0x28>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	60bb      	str	r3, [r7, #8]
}
 8004af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004af2:	bf00      	nop
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0fc      	beq.n	8004af4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004afa:	bf00      	nop
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	2000000c 	.word	0x2000000c
 8004b0c:	00000000 	.word	0x00000000

08004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <pxCurrentTCBConst2>)
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b1a:	f380 8809 	msr	PSP, r0
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b2e:	4770      	bx	lr

08004b30 <pxCurrentTCBConst2>:
 8004b30:	200007f8 	.word	0x200007f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004b38:	4806      	ldr	r0, [pc, #24]	; (8004b54 <prvPortStartFirstTask+0x1c>)
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f380 8808 	msr	MSP, r0
 8004b42:	b662      	cpsie	i
 8004b44:	b661      	cpsie	f
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	df00      	svc	0
 8004b50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b52:	bf00      	nop
 8004b54:	e000ed08 	.word	0xe000ed08

08004b58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b5e:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <xPortStartScheduler+0xd0>)
 8004b60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <xPortStartScheduler+0xd4>)
 8004b84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004b88:	2207      	movs	r2, #7
 8004b8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b8c:	e009      	b.n	8004ba2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	4a26      	ldr	r2, [pc, #152]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004b96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d0ef      	beq.n	8004b8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1c3 0307 	rsb	r3, r3, #7
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d00a      	beq.n	8004bd0 <xPortStartScheduler+0x78>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	60bb      	str	r3, [r7, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004bd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004be2:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <xPortStartScheduler+0xd8>)
 8004be4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <xPortStartScheduler+0xdc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <xPortStartScheduler+0xdc>)
 8004bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <xPortStartScheduler+0xdc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <xPortStartScheduler+0xdc>)
 8004c00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c06:	f000 f8b9 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <xPortStartScheduler+0xe0>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c10:	f7ff ff92 	bl	8004b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c14:	f7ff f8c2 	bl	8003d9c <vTaskSwitchContext>
	prvTaskExitError();
 8004c18:	f7ff ff4c 	bl	8004ab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	e000e400 	.word	0xe000e400
 8004c2c:	20000e24 	.word	0x20000e24
 8004c30:	20000e28 	.word	0x20000e28
 8004c34:	e000ed20 	.word	0xe000ed20
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	607b      	str	r3, [r7, #4]
}
 8004c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <vPortEnterCritical+0x58>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <vPortEnterCritical+0x58>)
 8004c5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <vPortEnterCritical+0x58>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10f      	bne.n	8004c88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <vPortEnterCritical+0x5c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	603b      	str	r3, [r7, #0]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vPortEnterCritical+0x4a>
	}
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <vPortExitCritical+0x4c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <vPortExitCritical+0x24>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	607b      	str	r3, [r7, #4]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <vPortExitCritical+0x4c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <vPortExitCritical+0x4c>)
 8004cc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <vPortExitCritical+0x4c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <vPortExitCritical+0x42>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f383 8811 	msr	BASEPRI, r3
}
 8004cdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	00000000 	.word	0x00000000

08004cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cf0:	f3ef 8009 	mrs	r0, PSP
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <pxCurrentTCBConst>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d00:	6010      	str	r0, [r2, #0]
 8004d02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d0a:	f380 8811 	msr	BASEPRI, r0
 8004d0e:	f7ff f845 	bl	8003d9c <vTaskSwitchContext>
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f380 8811 	msr	BASEPRI, r0
 8004d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d26:	f380 8809 	msr	PSP, r0
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	4770      	bx	lr

08004d30 <pxCurrentTCBConst>:
 8004d30:	200007f8 	.word	0x200007f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7fe ff65 	bl	8003c20 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <xPortSysTickHandler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <vPortSetupTimerInterrupt+0x30>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b03      	ldr	r3, [pc, #12]	; (8004dac <vPortSetupTimerInterrupt+0x30>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	e000e010 	.word	0xe000e010
 8004db0:	e000e018 	.word	0xe000e018
 8004db4:	20000000 	.word	0x20000000
 8004db8:	10624dd3 	.word	0x10624dd3
 8004dbc:	e000e014 	.word	0xe000e014

08004dc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dc6:	f3ef 8305 	mrs	r3, IPSR
 8004dca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	d914      	bls.n	8004dfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dd2:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <vPortValidateInterruptPriority+0x6c>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <vPortValidateInterruptPriority+0x70>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	7afa      	ldrb	r2, [r7, #11]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d20a      	bcs.n	8004dfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	607b      	str	r3, [r7, #4]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <vPortValidateInterruptPriority+0x74>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <vPortValidateInterruptPriority+0x78>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d90a      	bls.n	8004e22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	603b      	str	r3, [r7, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <vPortValidateInterruptPriority+0x60>
	}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	e000e3f0 	.word	0xe000e3f0
 8004e30:	20000e24 	.word	0x20000e24
 8004e34:	e000ed0c 	.word	0xe000ed0c
 8004e38:	20000e28 	.word	0x20000e28

08004e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e48:	f7fe fe30 	bl	8003aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e4c:	4b58      	ldr	r3, [pc, #352]	; (8004fb0 <pvPortMalloc+0x174>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e54:	f000 f910 	bl	8005078 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e58:	4b56      	ldr	r3, [pc, #344]	; (8004fb4 <pvPortMalloc+0x178>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f040 808e 	bne.w	8004f82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01d      	beq.n	8004ea8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d014      	beq.n	8004ea8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	3308      	adds	r3, #8
 8004e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <pvPortMalloc+0x6c>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	617b      	str	r3, [r7, #20]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d069      	beq.n	8004f82 <pvPortMalloc+0x146>
 8004eae:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <pvPortMalloc+0x17c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d864      	bhi.n	8004f82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004eb8:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <pvPortMalloc+0x180>)
 8004eba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <pvPortMalloc+0x180>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ec2:	e004      	b.n	8004ece <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d903      	bls.n	8004ee0 <pvPortMalloc+0xa4>
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f1      	bne.n	8004ec4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ee0:	4b33      	ldr	r3, [pc, #204]	; (8004fb0 <pvPortMalloc+0x174>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d04b      	beq.n	8004f82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2208      	movs	r2, #8
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	2308      	movs	r3, #8
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d91f      	bls.n	8004f4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <pvPortMalloc+0xf8>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	613b      	str	r3, [r7, #16]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f46:	69b8      	ldr	r0, [r7, #24]
 8004f48:	f000 f8f8 	bl	800513c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <pvPortMalloc+0x17c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <pvPortMalloc+0x17c>)
 8004f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f5a:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <pvPortMalloc+0x17c>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <pvPortMalloc+0x184>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d203      	bcs.n	8004f6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <pvPortMalloc+0x17c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <pvPortMalloc+0x184>)
 8004f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <pvPortMalloc+0x178>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f82:	f7fe fda1 	bl	8003ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <pvPortMalloc+0x16a>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <pvPortMalloc+0x168>
	return pvReturn;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20001a34 	.word	0x20001a34
 8004fb4:	20001a40 	.word	0x20001a40
 8004fb8:	20001a38 	.word	0x20001a38
 8004fbc:	20001a2c 	.word	0x20001a2c
 8004fc0:	20001a3c 	.word	0x20001a3c

08004fc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d048      	beq.n	8005068 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	425b      	negs	r3, r3
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	4b21      	ldr	r3, [pc, #132]	; (8005070 <vPortFree+0xac>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <vPortFree+0x44>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60fb      	str	r3, [r7, #12]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <vPortFree+0x62>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60bb      	str	r3, [r7, #8]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <vPortFree+0xac>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d019      	beq.n	8005068 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d115      	bne.n	8005068 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortFree+0xac>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800504c:	f7fe fd2e 	bl	8003aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <vPortFree+0xb0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4413      	add	r3, r2
 800505a:	4a06      	ldr	r2, [pc, #24]	; (8005074 <vPortFree+0xb0>)
 800505c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800505e:	6938      	ldr	r0, [r7, #16]
 8005060:	f000 f86c 	bl	800513c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005064:	f7fe fd30 	bl	8003ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005068:	bf00      	nop
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20001a40 	.word	0x20001a40
 8005074:	20001a38 	.word	0x20001a38

08005078 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800507e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005082:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <prvHeapInit+0xac>)
 8005086:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3307      	adds	r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <prvHeapInit+0xac>)
 80050a8:	4413      	add	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050b0:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <prvHeapInit+0xb0>)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <prvHeapInit+0xb0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050c4:	2208      	movs	r2, #8
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0307 	bic.w	r3, r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a15      	ldr	r2, [pc, #84]	; (800512c <prvHeapInit+0xb4>)
 80050d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <prvHeapInit+0xb4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <prvHeapInit+0xb4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	1ad2      	subs	r2, r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <prvHeapInit+0xb4>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <prvHeapInit+0xb8>)
 8005106:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a09      	ldr	r2, [pc, #36]	; (8005134 <prvHeapInit+0xbc>)
 800510e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <prvHeapInit+0xc0>)
 8005112:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005116:	601a      	str	r2, [r3, #0]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000e2c 	.word	0x20000e2c
 8005128:	20001a2c 	.word	0x20001a2c
 800512c:	20001a34 	.word	0x20001a34
 8005130:	20001a3c 	.word	0x20001a3c
 8005134:	20001a38 	.word	0x20001a38
 8005138:	20001a40 	.word	0x20001a40

0800513c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005144:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <prvInsertBlockIntoFreeList+0xa8>)
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e002      	b.n	8005150 <prvInsertBlockIntoFreeList+0x14>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d8f7      	bhi.n	800514a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4413      	add	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d108      	bne.n	800517e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	441a      	add	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d118      	bne.n	80051c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <prvInsertBlockIntoFreeList+0xac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d00d      	beq.n	80051ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	441a      	add	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e008      	b.n	80051cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvInsertBlockIntoFreeList+0xac>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e003      	b.n	80051cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d002      	beq.n	80051da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	20001a2c 	.word	0x20001a2c
 80051e8:	20001a34 	.word	0x20001a34

080051ec <memset>:
 80051ec:	4603      	mov	r3, r0
 80051ee:	4402      	add	r2, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d100      	bne.n	80051f6 <memset+0xa>
 80051f4:	4770      	bx	lr
 80051f6:	f803 1b01 	strb.w	r1, [r3], #1
 80051fa:	e7f9      	b.n	80051f0 <memset+0x4>

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	2600      	movs	r6, #0
 8005200:	4d0c      	ldr	r5, [pc, #48]	; (8005234 <__libc_init_array+0x38>)
 8005202:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005204:	1b64      	subs	r4, r4, r5
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	f000 f828 	bl	8005260 <_init>
 8005210:	2600      	movs	r6, #0
 8005212:	4d0a      	ldr	r5, [pc, #40]	; (800523c <__libc_init_array+0x40>)
 8005214:	4c0a      	ldr	r4, [pc, #40]	; (8005240 <__libc_init_array+0x44>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	0800537c 	.word	0x0800537c
 8005238:	0800537c 	.word	0x0800537c
 800523c:	0800537c 	.word	0x0800537c
 8005240:	08005380 	.word	0x08005380

08005244 <memcpy>:
 8005244:	440a      	add	r2, r1
 8005246:	4291      	cmp	r1, r2
 8005248:	f100 33ff 	add.w	r3, r0, #4294967295
 800524c:	d100      	bne.n	8005250 <memcpy+0xc>
 800524e:	4770      	bx	lr
 8005250:	b510      	push	{r4, lr}
 8005252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005256:	4291      	cmp	r1, r2
 8005258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525c:	d1f9      	bne.n	8005252 <memcpy+0xe>
 800525e:	bd10      	pop	{r4, pc}

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
