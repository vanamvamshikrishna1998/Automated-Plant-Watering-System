
Node 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ccc  08005ccc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005ccc  08005ccc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ccc  08005ccc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ccc  08005ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a38  20000010  08005ce4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  08005ce4  00021a48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c4f  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002daf  00000000  00000000  00032ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c38  00000000  00000000  00036a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003146  00000000  00000000  00037698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012608  00000000  00000000  0003a7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092b10  00000000  00000000  0004cde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004158  00000000  00000000  000df8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e3a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b90 	.word	0x08005b90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005b90 	.word	0x08005b90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* Initialize the hardware and system clock */
  HAL_Init();
 8000164:	f000 fb7c 	bl	8000860 <HAL_Init>
  SystemClock_Config();
 8000168:	f000 f842 	bl	80001f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f902 	bl	8000374 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f88e 	bl	8000290 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f930 	bl	80003d8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000178:	f000 f8c8 	bl	800030c <MX_CAN_Init>

  /* Initialize the RTOS kernel */
  osKernelInitialize();
 800017c:	f002 fbe4 	bl	8002948 <osKernelInitialize>

  /* Create the thread(s) */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8000180:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <main+0x64>)
 8000182:	2100      	movs	r1, #0
 8000184:	4810      	ldr	r0, [pc, #64]	; (80001c8 <main+0x68>)
 8000186:	f002 fc45 	bl	8002a14 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0f      	ldr	r2, [pc, #60]	; (80001cc <main+0x6c>)
 800018e:	6013      	str	r3, [r2, #0]
  wateringTaskHandle = osThreadNew(StartWateringTask, NULL, &wateringTask_attributes);
 8000190:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <main+0x70>)
 8000192:	2100      	movs	r1, #0
 8000194:	480f      	ldr	r0, [pc, #60]	; (80001d4 <main+0x74>)
 8000196:	f002 fc3d 	bl	8002a14 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <main+0x78>)
 800019e:	6013      	str	r3, [r2, #0]
  canTaskHandle = osThreadNew(StartCanTask, NULL, &canTask_attributes);
 80001a0:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <main+0x7c>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	480e      	ldr	r0, [pc, #56]	; (80001e0 <main+0x80>)
 80001a6:	f002 fc35 	bl	8002a14 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a0d      	ldr	r2, [pc, #52]	; (80001e4 <main+0x84>)
 80001ae:	6013      	str	r3, [r2, #0]
  moistureMutex1Handle = osMutexNew(&moistureMutex1_attributes);
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <main+0x88>)
 80001b2:	f002 fcd9 	bl	8002b68 <osMutexNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <main+0x8c>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80001bc:	f002 fbf6 	bl	80029ac <osKernelStart>

  /* Infinite loop to keep the main function alive */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <main+0x60>
 80001c2:	bf00      	nop
 80001c4:	08005c10 	.word	0x08005c10
 80001c8:	0800042d 	.word	0x0800042d
 80001cc:	200000ec 	.word	0x200000ec
 80001d0:	08005c34 	.word	0x08005c34
 80001d4:	080004c9 	.word	0x080004c9
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08005c58 	.word	0x08005c58
 80001e0:	08000521 	.word	0x08000521
 80001e4:	200000f4 	.word	0x200000f4
 80001e8:	08005c7c 	.word	0x08005c7c
 80001ec:	200000f8 	.word	0x200000f8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	; 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f005 fc8c 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /* Configure the main internal regulator output voltage */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fc3b 	bl	8001ab0 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000240:	f000 f9ae 	bl	80005a0 <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000244:	230f      	movs	r3, #15
 8000246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fea8 	bl	8001fb4 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800026a:	f000 f999 	bl	80005a0 <Error_Handler>
  }

  /* Configure the ADC peripheral clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800026e:	2302      	movs	r3, #2
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f002 f829 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000284:	f000 f98c 	bl	80005a0 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3750      	adds	r7, #80	; 0x50
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]

  /* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <MX_ADC1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fb4d 	bl	800096c <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f962 	bl	80005a0 <Error_Handler>
  }

  /* Configure for the selected ADC regular channel to be converted */
  sConfig.Channel = ADC_CHANNEL_0;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fe01 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f8:	f000 f952 	bl	80005a0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000002c 	.word	0x2000002c
 8000308:	40012400 	.word	0x40012400

0800030c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <MX_CAN_Init+0x60>)
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_CAN_Init+0x64>)
 8000314:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_CAN_Init+0x60>)
 8000318:	2210      	movs	r2, #16
 800031a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_CAN_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_CAN_Init+0x60>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_CAN_Init+0x60>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_CAN_Init+0x60>)
 8000330:	2200      	movs	r2, #0
 8000332:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000334:	4b0d      	ldr	r3, [pc, #52]	; (800036c <MX_CAN_Init+0x60>)
 8000336:	2200      	movs	r2, #0
 8000338:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_CAN_Init+0x60>)
 800033c:	2200      	movs	r2, #0
 800033e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <MX_CAN_Init+0x60>)
 8000342:	2200      	movs	r2, #0
 8000344:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_CAN_Init+0x60>)
 8000348:	2200      	movs	r2, #0
 800034a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <MX_CAN_Init+0x60>)
 800034e:	2200      	movs	r2, #0
 8000350:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_CAN_Init+0x60>)
 8000354:	2200      	movs	r2, #0
 8000356:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_CAN_Init+0x60>)
 800035a:	f000 ff5e 	bl	800121a <HAL_CAN_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000364:	f000 f91c 	bl	80005a0 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000a4 	.word	0x200000a4
 8000370:	40006400 	.word	0x40006400

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_GPIO_Init+0x5c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <MX_GPIO_Init+0x5c>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_GPIO_Init+0x5c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2102      	movs	r1, #2
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <MX_GPIO_Init+0x60>)
 80003a6:	f001 fb6b 	bl	8001a80 <HAL_GPIO_WritePin>

  /* Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003aa:	2302      	movs	r3, #2
 80003ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_GPIO_Init+0x60>)
 80003c2:	f001 f9d9 	bl	8001778 <HAL_GPIO_Init>
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010800 	.word	0x40010800

080003d8 <MX_USART1_UART_Init>:
  * @brief USART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <MX_USART1_UART_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_USART1_UART_Init+0x4c>)
 8000410:	f002 f8ca 	bl	80025a8 <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041a:	f000 f8c1 	bl	80005a0 <Error_Handler>
  }

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000005c 	.word	0x2000005c
 8000428:	40013800 	.word	0x40013800

0800042c <StartSensorTask>:
  * @brief  Function implementing the sensorTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartSensorTask(void *argument)
{
 800042c:	b5b0      	push	{r4, r5, r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Start the ADC conversion */
    HAL_ADC_Start(&hadc1);
 8000434:	481f      	ldr	r0, [pc, #124]	; (80004b4 <StartSensorTask+0x88>)
 8000436:	f000 fb71 	bl	8000b1c <HAL_ADC_Start>
    /* Poll for ADC conversion completion */
    if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800043a:	f04f 31ff 	mov.w	r1, #4294967295
 800043e:	481d      	ldr	r0, [pc, #116]	; (80004b4 <StartSensorTask+0x88>)
 8000440:	f000 fc46 	bl	8000cd0 <HAL_ADC_PollForConversion>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d113      	bne.n	8000472 <StartSensorTask+0x46>
    	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <StartSensorTask+0x8c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 31ff 	mov.w	r1, #4294967295
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fc22 	bl	8002c9c <osMutexAcquire>
		/* Get the ADC converted value */
		moistureLevel = HAL_ADC_GetValue(&hadc1);
 8000458:	4816      	ldr	r0, [pc, #88]	; (80004b4 <StartSensorTask+0x88>)
 800045a:	f000 fd3f 	bl	8000edc <HAL_ADC_GetValue>
 800045e:	4603      	mov	r3, r0
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <StartSensorTask+0x90>)
 8000464:	801a      	strh	r2, [r3, #0]
		osMutexRelease(moistureMutex1Handle);
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <StartSensorTask+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fc74 	bl	8002d58 <osMutexRelease>
 8000470:	e017      	b.n	80004a2 <StartSensorTask+0x76>
    }
    else{
    	char error_msg[] = "ADC conversion failed!\r\n";
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <StartSensorTask+0x94>)
 8000474:	f107 040c 	add.w	r4, r7, #12
 8000478:	461d      	mov	r5, r3
 800047a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000482:	c403      	stmia	r4!, {r0, r1}
 8000484:	7022      	strb	r2, [r4, #0]
    	HAL_UART_Transmit(&huart1, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe60 	bl	8000150 <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	f107 010c 	add.w	r1, r7, #12
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <StartSensorTask+0x98>)
 800049e:	f002 f8d3 	bl	8002648 <HAL_UART_Transmit>
    }
    /* Stop the ADC conversion */
    HAL_ADC_Stop(&hadc1);
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <StartSensorTask+0x88>)
 80004a4:	f000 fbe8 	bl	8000c78 <HAL_ADC_Stop>
    /* Delay for 1 second */
    HAL_Delay(1000);
 80004a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ac:	f000 fa3a 	bl	8000924 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 80004b0:	e7c0      	b.n	8000434 <StartSensorTask+0x8>
 80004b2:	bf00      	nop
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	200000f8 	.word	0x200000f8
 80004bc:	200000ea 	.word	0x200000ea
 80004c0:	08005bdc 	.word	0x08005bdc
 80004c4:	2000005c 	.word	0x2000005c

080004c8 <StartWateringTask>:
  * @brief Function implementing the wateringTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartWateringTask(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1){
    /* Check if moisture level is below threshold */
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <StartWateringTask+0x4c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f04f 31ff 	mov.w	r1, #4294967295
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 fbdf 	bl	8002c9c <osMutexAcquire>
	uint16_t threshold = moistureLevel;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <StartWateringTask+0x50>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(moistureMutex1Handle);
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <StartWateringTask+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fc35 	bl	8002d58 <osMutexRelease>
    if(threshold < 30){
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	2b1d      	cmp	r3, #29
 80004f2:	d805      	bhi.n	8000500 <StartWateringTask+0x38>
      /* Turn on the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <StartWateringTask+0x54>)
 80004fa:	f001 fac1 	bl	8001a80 <HAL_GPIO_WritePin>
 80004fe:	e004      	b.n	800050a <StartWateringTask+0x42>
    } else {
      /* Turn off the water pump */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <StartWateringTask+0x54>)
 8000506:	f001 fabb 	bl	8001a80 <HAL_GPIO_WritePin>
    }
    /* Delay for 1 second */
    HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 fa09 	bl	8000924 <HAL_Delay>
  while(1){
 8000512:	e7dd      	b.n	80004d0 <StartWateringTask+0x8>
 8000514:	200000f8 	.word	0x200000f8
 8000518:	200000ea 	.word	0x200000ea
 800051c:	40010800 	.word	0x40010800

08000520 <StartCanTask>:
  * @brief Function implementing the canTask thread.
  * @param argument: Not used
  * @retval None
  */
void StartCanTask(void *argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Set up CAN message header */
  TxHeader.DLC = 2;
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <StartCanTask+0x68>)
 800052a:	2202      	movs	r2, #2
 800052c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <StartCanTask+0x68>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <StartCanTask+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x05; // Unique ID for Node 1
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <StartCanTask+0x68>)
 800053c:	2205      	movs	r2, #5
 800053e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  while(1){
    /* Prepare CAN data */
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <StartCanTask+0x6c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fba7 	bl	8002c9c <osMutexAcquire>
    TxData[0] = moistureLevel & 0xFF;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <StartCanTask+0x70>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <StartCanTask+0x74>)
 8000556:	701a      	strb	r2, [r3, #0]
    TxData[1] = (moistureLevel >> 8) & 0xFF;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <StartCanTask+0x70>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <StartCanTask+0x74>)
 8000564:	705a      	strb	r2, [r3, #1]
    osMutexRelease(moistureMutex1Handle);
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <StartCanTask+0x6c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fbf4 	bl	8002d58 <osMutexRelease>
    /* Transmit CAN message */
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <StartCanTask+0x78>)
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <StartCanTask+0x74>)
 8000574:	4904      	ldr	r1, [pc, #16]	; (8000588 <StartCanTask+0x68>)
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <StartCanTask+0x7c>)
 8000578:	f000 ff4a 	bl	8001410 <HAL_CAN_AddTxMessage>
    /* Delay for 1 second */
    HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 f9d0 	bl	8000924 <HAL_Delay>
	osMutexAcquire(moistureMutex1Handle, osWaitForever);
 8000584:	e7dc      	b.n	8000540 <StartCanTask+0x20>
 8000586:	bf00      	nop
 8000588:	200000cc 	.word	0x200000cc
 800058c:	200000f8 	.word	0x200000f8
 8000590:	200000ea 	.word	0x200000ea
 8000594:	200000e8 	.word	0x200000e8
 8000598:	200000e4 	.word	0x200000e4
 800059c:	200000a4 	.word	0x200000a4

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* Disable interrupts and enter an infinite loop */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_MspInit+0x68>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <HAL_MspInit+0x68>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x68>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <HAL_MspInit+0x68>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x68>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	210f      	movs	r1, #15
 80005e6:	f06f 0001 	mvn.w	r0, #1
 80005ea:	f001 f89c 	bl	8001726 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x6c>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x6c>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0x6c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d121      	bne.n	8000680 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0x70>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_ADC_MspInit+0x70>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <HAL_ADC_MspInit+0x70>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_ADC_MspInit+0x74>)
 800067c:	f001 f87c 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40012400 	.word	0x40012400
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <HAL_CAN_MspInit+0x8c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d131      	bne.n	8000718 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_CAN_MspInit+0x90>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_CAN_MspInit+0x90>)
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_CAN_MspInit+0x90>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_CAN_MspInit+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_CAN_MspInit+0x90>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_CAN_MspInit+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_CAN_MspInit+0x94>)
 80006fa:	f001 f83d 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_CAN_MspInit+0x94>)
 8000714:	f001 f830 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40006400 	.word	0x40006400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d131      	bne.n	80007b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_UART_MspInit+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_UART_MspInit+0x90>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000792:	f000 fff1 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <HAL_UART_MspInit+0x94>)
 80007ac:	f000 ffe4 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f87b 	bl	80008ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007f6:	f004 f8d1 	bl	800499c <xTaskGetSchedulerState>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d001      	beq.n	8000804 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000800:	f004 ff32 	bl	8005668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000814:	f7ff fff8 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800081a:	490c      	ldr	r1, [pc, #48]	; (800084c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <LoopFillZerobss+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000830:	4c09      	ldr	r4, [pc, #36]	; (8000858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083e:	f005 f975 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fc8d 	bl	8000160 <main>
  bx lr
 8000846:	4770      	bx	lr
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000850:	08005cd4 	.word	0x08005cd4
  ldr r2, =_sbss
 8000854:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000858:	20001a48 	.word	0x20001a48

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x28>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 ff4d 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff fe96 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 ff57 	bl	800175e <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 ff2d 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000008 	.word	0x20000008
 800090c:	200000fc 	.word	0x200000fc

08000910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	200000fc 	.word	0x200000fc

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff0 	bl	8000910 <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffe0 	bl	8000910 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008

0800096c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e0be      	b.n	8000b0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000998:	2b00      	cmp	r3, #0
 800099a:	d109      	bne.n	80009b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fe36 	bl	800061c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 fbf1 	bl	8001198 <ADC_ConversionStop_Disable>
 80009b6:	4603      	mov	r3, r0
 80009b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 8099 	bne.w	8000afa <HAL_ADC_Init+0x18e>
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f040 8095 	bne.w	8000afa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009d8:	f023 0302 	bic.w	r3, r3, #2
 80009dc:	f043 0202 	orr.w	r2, r3, #2
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7b1b      	ldrb	r3, [r3, #12]
 80009f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a04:	d003      	beq.n	8000a0e <HAL_ADC_Init+0xa2>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d102      	bne.n	8000a14 <HAL_ADC_Init+0xa8>
 8000a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a12:	e000      	b.n	8000a16 <HAL_ADC_Init+0xaa>
 8000a14:	2300      	movs	r3, #0
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7d1b      	ldrb	r3, [r3, #20]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d119      	bne.n	8000a58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7b1b      	ldrb	r3, [r3, #12]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d109      	bne.n	8000a40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	035a      	lsls	r2, r3, #13
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	e00b      	b.n	8000a58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	f043 0220 	orr.w	r2, r3, #32
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_ADC_Init+0x1a8>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	6812      	ldr	r2, [r2, #0]
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a88:	d003      	beq.n	8000a92 <HAL_ADC_Init+0x126>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d104      	bne.n	8000a9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	051b      	lsls	r3, r3, #20
 8000a9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_ADC_Init+0x1ac>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d10b      	bne.n	8000ad8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	f023 0303 	bic.w	r3, r3, #3
 8000ace:	f043 0201 	orr.w	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad6:	e018      	b.n	8000b0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	f023 0312 	bic.w	r3, r3, #18
 8000ae0:	f043 0210 	orr.w	r2, r3, #16
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	f043 0201 	orr.w	r2, r3, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af8:	e007      	b.n	8000b0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f043 0210 	orr.w	r2, r3, #16
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	ffe1f7fd 	.word	0xffe1f7fd
 8000b18:	ff1f0efe 	.word	0xff1f0efe

08000b1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d101      	bne.n	8000b36 <HAL_ADC_Start+0x1a>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e098      	b.n	8000c68 <HAL_ADC_Start+0x14c>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 fad0 	bl	80010e4 <ADC_Enable>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f040 8087 	bne.w	8000c5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a41      	ldr	r2, [pc, #260]	; (8000c70 <HAL_ADC_Start+0x154>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d105      	bne.n	8000b7a <HAL_ADC_Start+0x5e>
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <HAL_ADC_Start+0x158>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d115      	bne.n	8000ba6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d026      	beq.n	8000be2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ba4:	e01d      	b.n	8000be2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <HAL_ADC_Start+0x158>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d004      	beq.n	8000bc6 <HAL_ADC_Start+0xaa>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <HAL_ADC_Start+0x154>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d10d      	bne.n	8000be2 <HAL_ADC_Start+0xc6>
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ADC_Start+0x158>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d007      	beq.n	8000be2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	f023 0206 	bic.w	r2, r3, #6
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bfa:	e002      	b.n	8000c02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f06f 0202 	mvn.w	r2, #2
 8000c12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c22:	d113      	bne.n	8000c4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_ADC_Start+0x154>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d105      	bne.n	8000c3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_ADC_Start+0x158>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d108      	bne.n	8000c4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	e00c      	b.n	8000c66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	e003      	b.n	8000c66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40012800 	.word	0x40012800
 8000c74:	40012400 	.word	0x40012400

08000c78 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_Stop+0x1a>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e01a      	b.n	8000cc8 <HAL_ADC_Stop+0x50>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 fa7c 	bl	8001198 <ADC_ConversionStop_Disable>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d109      	bne.n	8000cbe <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cb2:	f023 0301 	bic.w	r3, r3, #1
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ce6:	f7ff fe13 	bl	8000910 <HAL_GetTick>
 8000cea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f043 0220 	orr.w	r2, r3, #32
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e0d3      	b.n	8000eba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d131      	bne.n	8000d84 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d12a      	bne.n	8000d84 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d2e:	e021      	b.n	8000d74 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d36:	d01d      	beq.n	8000d74 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d007      	beq.n	8000d4e <HAL_ADC_PollForConversion+0x7e>
 8000d3e:	f7ff fde7 	bl	8000910 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d212      	bcs.n	8000d74 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10b      	bne.n	8000d74 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	f043 0204 	orr.w	r2, r3, #4
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e0a2      	b.n	8000eba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0d6      	beq.n	8000d30 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d82:	e070      	b.n	8000e66 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d84:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <HAL_ADC_PollForConversion+0x1f4>)
 8000d86:	681c      	ldr	r4, [r3, #0]
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f001 fb57 	bl	800243c <HAL_RCCEx_GetPeriphCLKFreq>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6919      	ldr	r1, [r3, #16]
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d118      	bne.n	8000dd4 <HAL_ADC_PollForConversion+0x104>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68d9      	ldr	r1, [r3, #12]
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <HAL_ADC_PollForConversion+0x1fc>)
 8000daa:	400b      	ands	r3, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d111      	bne.n	8000dd4 <HAL_ADC_PollForConversion+0x104>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6919      	ldr	r1, [r3, #16]
 8000db6:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_ADC_PollForConversion+0x200>)
 8000db8:	400b      	ands	r3, r1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d108      	bne.n	8000dd0 <HAL_ADC_PollForConversion+0x100>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68d9      	ldr	r1, [r3, #12]
 8000dc4:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <HAL_ADC_PollForConversion+0x204>)
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_ADC_PollForConversion+0x100>
 8000dcc:	2314      	movs	r3, #20
 8000dce:	e020      	b.n	8000e12 <HAL_ADC_PollForConversion+0x142>
 8000dd0:	2329      	movs	r3, #41	; 0x29
 8000dd2:	e01e      	b.n	8000e12 <HAL_ADC_PollForConversion+0x142>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6919      	ldr	r1, [r3, #16]
 8000dda:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <HAL_ADC_PollForConversion+0x200>)
 8000ddc:	400b      	ands	r3, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <HAL_ADC_PollForConversion+0x120>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68d9      	ldr	r1, [r3, #12]
 8000de8:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <HAL_ADC_PollForConversion+0x204>)
 8000dea:	400b      	ands	r3, r1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00d      	beq.n	8000e0c <HAL_ADC_PollForConversion+0x13c>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6919      	ldr	r1, [r3, #16]
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_ADC_PollForConversion+0x208>)
 8000df8:	400b      	ands	r3, r1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d108      	bne.n	8000e10 <HAL_ADC_PollForConversion+0x140>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68d9      	ldr	r1, [r3, #12]
 8000e04:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <HAL_ADC_PollForConversion+0x208>)
 8000e06:	400b      	ands	r3, r1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <HAL_ADC_PollForConversion+0x140>
 8000e0c:	2354      	movs	r3, #84	; 0x54
 8000e0e:	e000      	b.n	8000e12 <HAL_ADC_PollForConversion+0x142>
 8000e10:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e12:	fb02 f303 	mul.w	r3, r2, r3
 8000e16:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e18:	e021      	b.n	8000e5e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d01a      	beq.n	8000e58 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d007      	beq.n	8000e38 <HAL_ADC_PollForConversion+0x168>
 8000e28:	f7ff fd72 	bl	8000910 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d20f      	bcs.n	8000e58 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d90b      	bls.n	8000e58 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	f043 0204 	orr.w	r2, r3, #4
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e030      	b.n	8000eba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8d9      	bhi.n	8000e1a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f06f 0212 	mvn.w	r2, #18
 8000e6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e8a:	d115      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d111      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	f043 0201 	orr.w	r2, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd90      	pop	{r4, r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	24924924 	.word	0x24924924
 8000ecc:	00924924 	.word	0x00924924
 8000ed0:	12492492 	.word	0x12492492
 8000ed4:	00492492 	.word	0x00492492
 8000ed8:	00249249 	.word	0x00249249

08000edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x20>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e0dc      	b.n	80010ce <HAL_ADC_ConfigChannel+0x1da>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d81c      	bhi.n	8000f5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b05      	subs	r3, #5
 8000f36:	221f      	movs	r2, #31
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b05      	subs	r3, #5
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5c:	e03c      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	d81c      	bhi.n	8000fa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b23      	subs	r3, #35	; 0x23
 8000f78:	221f      	movs	r2, #31
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4019      	ands	r1, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b23      	subs	r3, #35	; 0x23
 8000f92:	fa00 f203 	lsl.w	r2, r0, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9e:	e01b      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b41      	subs	r3, #65	; 0x41
 8000fb2:	221f      	movs	r2, #31
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4019      	ands	r1, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b41      	subs	r3, #65	; 0x41
 8000fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d91c      	bls.n	800101a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68d9      	ldr	r1, [r3, #12]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b1e      	subs	r3, #30
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	3b1e      	subs	r3, #30
 800100c:	fa00 f203 	lsl.w	r2, r0, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	e019      	b.n	800104e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6919      	ldr	r1, [r3, #16]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	2207      	movs	r2, #7
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	4019      	ands	r1, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	fa00 f203 	lsl.w	r2, r0, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d003      	beq.n	800105e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800105a:	2b11      	cmp	r3, #17
 800105c:	d132      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d125      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d126      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001084:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d11a      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0c9a      	lsrs	r2, r3, #18
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a4:	e002      	b.n	80010ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x1b2>
 80010b2:	e007      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f043 0220 	orr.w	r2, r3, #32
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40012400 	.word	0x40012400
 80010dc:	20000000 	.word	0x20000000
 80010e0:	431bde83 	.word	0x431bde83

080010e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d040      	beq.n	8001184 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <ADC_Enable+0xac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <ADC_Enable+0xb0>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001120:	e002      	b.n	8001128 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800112e:	f7ff fbef 	bl	8000910 <HAL_GetTick>
 8001132:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001134:	e01f      	b.n	8001176 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001136:	f7ff fbeb 	bl	8000910 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d918      	bls.n	8001176 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d011      	beq.n	8001176 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f043 0210 	orr.w	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e007      	b.n	8001186 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	d1d8      	bne.n	8001136 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000
 8001194:	431bde83 	.word	0x431bde83

08001198 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d12e      	bne.n	8001210 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011c2:	f7ff fba5 	bl	8000910 <HAL_GetTick>
 80011c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011c8:	e01b      	b.n	8001202 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ca:	f7ff fba1 	bl	8000910 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d914      	bls.n	8001202 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d10d      	bne.n	8001202 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	f043 0210 	orr.w	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e007      	b.n	8001212 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d0dc      	beq.n	80011ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0ed      	b.n	8001408 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fa2b 	bl	8000694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124e:	f7ff fb5f 	bl	8000910 <HAL_GetTick>
 8001252:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001254:	e012      	b.n	800127c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001256:	f7ff fb5b 	bl	8000910 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b0a      	cmp	r3, #10
 8001262:	d90b      	bls.n	800127c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2205      	movs	r2, #5
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0c5      	b.n	8001408 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0e5      	beq.n	8001256 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0202 	bic.w	r2, r2, #2
 8001298:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129a:	f7ff fb39 	bl	8000910 <HAL_GetTick>
 800129e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012a0:	e012      	b.n	80012c8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a2:	f7ff fb35 	bl	8000910 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	d90b      	bls.n	80012c8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2205      	movs	r2, #5
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e09f      	b.n	8001408 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e5      	bne.n	80012a2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7e1b      	ldrb	r3, [r3, #24]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d108      	bne.n	80012f0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e007      	b.n	8001300 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7e5b      	ldrb	r3, [r3, #25]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d108      	bne.n	800131a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e007      	b.n	800132a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e9b      	ldrb	r3, [r3, #26]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d108      	bne.n	8001344 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0220 	orr.w	r2, r2, #32
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e007      	b.n	8001354 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0220 	bic.w	r2, r2, #32
 8001352:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7edb      	ldrb	r3, [r3, #27]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d108      	bne.n	800136e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0210 	bic.w	r2, r2, #16
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e007      	b.n	800137e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0210 	orr.w	r2, r2, #16
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7f1b      	ldrb	r3, [r3, #28]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d108      	bne.n	8001398 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0208 	orr.w	r2, r2, #8
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e007      	b.n	80013a8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0208 	bic.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7f5b      	ldrb	r3, [r3, #29]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0204 	orr.w	r2, r2, #4
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0204 	bic.w	r2, r2, #4
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	ea42 0103 	orr.w	r1, r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d003      	beq.n	800143c <HAL_CAN_AddTxMessage+0x2c>
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	2b02      	cmp	r3, #2
 8001438:	f040 80ad 	bne.w	8001596 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8095 	beq.w	8001586 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	0e1b      	lsrs	r3, r3, #24
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001466:	2201      	movs	r2, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10d      	bne.n	8001494 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	6809      	ldr	r1, [r1, #0]
 8001486:	431a      	orrs	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3318      	adds	r3, #24
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e00f      	b.n	80014b4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800149e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3318      	adds	r3, #24
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	440b      	add	r3, r1
 80014b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6819      	ldr	r1, [r3, #0]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3318      	adds	r3, #24
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	3304      	adds	r3, #4
 80014c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d111      	bne.n	80014f4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3318      	adds	r3, #24
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	3304      	adds	r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	6811      	ldr	r1, [r2, #0]
 80014e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3318      	adds	r3, #24
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	440b      	add	r3, r1
 80014f0:	3304      	adds	r3, #4
 80014f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3307      	adds	r3, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	061a      	lsls	r2, r3, #24
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3306      	adds	r3, #6
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3305      	adds	r3, #5
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	4313      	orrs	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	3204      	adds	r2, #4
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	4610      	mov	r0, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	6811      	ldr	r1, [r2, #0]
 800151c:	ea43 0200 	orr.w	r2, r3, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	440b      	add	r3, r1
 8001526:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800152a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3303      	adds	r3, #3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	061a      	lsls	r2, r3, #24
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3302      	adds	r3, #2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3301      	adds	r3, #1
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4313      	orrs	r3, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	4610      	mov	r0, r2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	6811      	ldr	r1, [r2, #0]
 8001552:	ea43 0200 	orr.w	r2, r3, r0
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	440b      	add	r3, r1
 800155c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001560:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3318      	adds	r3, #24
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	6811      	ldr	r1, [r2, #0]
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3318      	adds	r3, #24
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	440b      	add	r3, r1
 8001580:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e00e      	b.n	80015a4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e006      	b.n	80015a4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
  }
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3724      	adds	r7, #36	; 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff90 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff49 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff5e 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff90 	bl	8001668 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5f 	bl	8001614 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffb0 	bl	80016cc <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e169      	b.n	8001a60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800178c:	2201      	movs	r2, #1
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8158 	bne.w	8001a5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a9a      	ldr	r2, [pc, #616]	; (8001a18 <HAL_GPIO_Init+0x2a0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017b4:	4a98      	ldr	r2, [pc, #608]	; (8001a18 <HAL_GPIO_Init+0x2a0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d875      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ba:	4a98      	ldr	r2, [pc, #608]	; (8001a1c <HAL_GPIO_Init+0x2a4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d058      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017c0:	4a96      	ldr	r2, [pc, #600]	; (8001a1c <HAL_GPIO_Init+0x2a4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d86f      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017c6:	4a96      	ldr	r2, [pc, #600]	; (8001a20 <HAL_GPIO_Init+0x2a8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d052      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017cc:	4a94      	ldr	r2, [pc, #592]	; (8001a20 <HAL_GPIO_Init+0x2a8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d869      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017d2:	4a94      	ldr	r2, [pc, #592]	; (8001a24 <HAL_GPIO_Init+0x2ac>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04c      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017d8:	4a92      	ldr	r2, [pc, #584]	; (8001a24 <HAL_GPIO_Init+0x2ac>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d863      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017de:	4a92      	ldr	r2, [pc, #584]	; (8001a28 <HAL_GPIO_Init+0x2b0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d046      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017e4:	4a90      	ldr	r2, [pc, #576]	; (8001a28 <HAL_GPIO_Init+0x2b0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d85d      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d82a      	bhi.n	8001844 <HAL_GPIO_Init+0xcc>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d859      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_GPIO_Init+0x80>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001873 	.word	0x08001873
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800185f 	.word	0x0800185f
 8001804:	080018a1 	.word	0x080018a1
 8001808:	080018a7 	.word	0x080018a7
 800180c:	080018a7 	.word	0x080018a7
 8001810:	080018a7 	.word	0x080018a7
 8001814:	080018a7 	.word	0x080018a7
 8001818:	080018a7 	.word	0x080018a7
 800181c:	080018a7 	.word	0x080018a7
 8001820:	080018a7 	.word	0x080018a7
 8001824:	080018a7 	.word	0x080018a7
 8001828:	080018a7 	.word	0x080018a7
 800182c:	080018a7 	.word	0x080018a7
 8001830:	080018a7 	.word	0x080018a7
 8001834:	080018a7 	.word	0x080018a7
 8001838:	080018a7 	.word	0x080018a7
 800183c:	08001855 	.word	0x08001855
 8001840:	08001869 	.word	0x08001869
 8001844:	4a79      	ldr	r2, [pc, #484]	; (8001a2c <HAL_GPIO_Init+0x2b4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184a:	e02c      	b.n	80018a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e029      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	3304      	adds	r3, #4
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e024      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	3308      	adds	r3, #8
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e01f      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	330c      	adds	r3, #12
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e01a      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187a:	2304      	movs	r3, #4
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e013      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	611a      	str	r2, [r3, #16]
          break;
 8001892:	e009      	b.n	80018a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001894:	2308      	movs	r3, #8
 8001896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	615a      	str	r2, [r3, #20]
          break;
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          break;
 80018a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	; 0xff
 80018ac:	d801      	bhi.n	80018b2 <HAL_GPIO_Init+0x13a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_Init+0x13e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d802      	bhi.n	80018c4 <HAL_GPIO_Init+0x14c>
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x152>
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	3b08      	subs	r3, #8
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	210f      	movs	r1, #15
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	6a39      	ldr	r1, [r7, #32]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80b1 	beq.w	8001a5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f8:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2bc>)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a40      	ldr	r2, [pc, #256]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_GPIO_Init+0x1ec>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3f      	ldr	r2, [pc, #252]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_GPIO_Init+0x1e8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3e      	ldr	r2, [pc, #248]	; (8001a40 <HAL_GPIO_Init+0x2c8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0x1e4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3d      	ldr	r2, [pc, #244]	; (8001a44 <HAL_GPIO_Init+0x2cc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_Init+0x1e0>
 8001954:	2303      	movs	r3, #3
 8001956:	e006      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001958:	2304      	movs	r3, #4
 800195a:	e004      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 800195c:	2302      	movs	r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001964:	2300      	movs	r3, #0
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	f002 0203 	and.w	r2, r2, #3
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	4093      	lsls	r3, r2
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001976:	492f      	ldr	r1, [pc, #188]	; (8001a34 <HAL_GPIO_Init+0x2bc>)
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	492c      	ldr	r1, [pc, #176]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4928      	ldr	r1, [pc, #160]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	4922      	ldr	r1, [pc, #136]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	491e      	ldr	r1, [pc, #120]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4918      	ldr	r1, [pc, #96]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4914      	ldr	r1, [pc, #80]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d021      	beq.n	8001a4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e021      	b.n	8001a5a <HAL_GPIO_Init+0x2e2>
 8001a16:	bf00      	nop
 8001a18:	10320000 	.word	0x10320000
 8001a1c:	10310000 	.word	0x10310000
 8001a20:	10220000 	.word	0x10220000
 8001a24:	10210000 	.word	0x10210000
 8001a28:	10120000 	.word	0x10120000
 8001a2c:	10110000 	.word	0x10110000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	40010c00 	.word	0x40010c00
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40011400 	.word	0x40011400
 8001a48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_GPIO_Init+0x304>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4909      	ldr	r1, [pc, #36]	; (8001a7c <HAL_GPIO_Init+0x304>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f47f ae8e 	bne.w	800178c <HAL_GPIO_Init+0x14>
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	372c      	adds	r7, #44	; 0x2c
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a9c:	e003      	b.n	8001aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e272      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8087 	beq.w	8001bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d00c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001adc:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d112      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
 8001ae8:	4b8c      	ldr	r3, [pc, #560]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d06c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x12c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d168      	bne.n	8001bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e24c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x76>
 8001b18:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7f      	ldr	r2, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e02e      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x98>
 8001b2e:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a77      	ldr	r2, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0xbc>
 8001b52:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a71      	ldr	r2, [pc, #452]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6e      	ldr	r2, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a67      	ldr	r2, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fec0 	bl	8000910 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7fe febc 	bl	8000910 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e200      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xe4>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe feac 	bl	8000910 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe fea8 	bl	8000910 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1ec      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x10c>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d11c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d116      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1c0      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4939      	ldr	r1, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fe61 	bl	8000910 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7fe fe5d 	bl	8000910 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1a1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fe40 	bl	8000910 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c94:	f7fe fe3c 	bl	8000910 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e180      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03a      	beq.n	8001d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fe20 	bl	8000910 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7fe fe1c 	bl	8000910 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e160      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 face 	bl	8002294 <RCC_Delay>
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7fe fe06 	bl	8000910 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7fe fe02 	bl	8000910 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e146      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42420000 	.word	0x42420000
 8001d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e9      	bne.n	8001d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a6 	beq.w	8001e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a87      	ldr	r2, [pc, #540]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b7f      	ldr	r3, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7e      	ldr	r2, [pc, #504]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe fdc3 	bl	8000910 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7fe fdbf 	bl	8000910 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e103      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x312>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x334>
 8001dca:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	e01c      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x356>
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a5d      	ldr	r2, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001e06:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fd73 	bl	8000910 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fd6f 	bl	8000910 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0b1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCC_OscConfig+0x37e>
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fd5d 	bl	8000910 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe fd59 	bl	8000910 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e09b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d061      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d146      	bne.n	8001f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fd2d 	bl	8000910 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fd29 	bl	8000910 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e06d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4921      	ldr	r1, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a19      	ldr	r1, [r3, #32]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	430b      	orrs	r3, r1
 8001f06:	491b      	ldr	r1, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fcfd 	bl	8000910 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fcf9 	bl	8000910 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e03d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46a>
 8001f38:	e035      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fce6 	bl	8000910 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fce2 	bl	8000910 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e026      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x498>
 8001f66:	e01e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e019      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x500>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0d0      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d910      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4965      	ldr	r1, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d040      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d115      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e073      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06b      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4936      	ldr	r1, [pc, #216]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fc34 	bl	8000910 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7fe fc30 	bl	8000910 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e053      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d210      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4922      	ldr	r1, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1cc>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fb92 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	08005c8c 	.word	0x08005c8c
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCC_GetSysClockFreq+0x94>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x30>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x36>
 80021b6:	e027      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	e027      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0c9b      	lsrs	r3, r3, #18
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_GetSysClockFreq+0x94>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	0c5b      	lsrs	r3, r3, #17
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e004      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <HAL_RCC_GetSysClockFreq+0xa4>)
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	613b      	str	r3, [r7, #16]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	693b      	ldr	r3, [r7, #16]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	08005ca4 	.word	0x08005ca4
 8002228:	08005cb4 	.word	0x08005cb4
 800222c:	003d0900 	.word	0x003d0900

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_RCC_GetHCLKFreq+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002248:	f7ff fff2 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08005c9c 	.word	0x08005c9c

0800226c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002270:	f7ff ffde 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	0adb      	lsrs	r3, r3, #11
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4903      	ldr	r1, [pc, #12]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08005c9c 	.word	0x08005c9c

08002294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <RCC_Delay+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <RCC_Delay+0x38>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b0:	bf00      	nop
  }
  while (Delay --);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <RCC_Delay+0x1c>
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000000 	.word	0x20000000
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d07d      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b4c      	ldr	r3, [pc, #304]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	61d3      	str	r3, [r2, #28]
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002314:	2301      	movs	r3, #1
 8002316:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d118      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a42      	ldr	r2, [pc, #264]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002330:	f7fe faee 	bl	8000910 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	e008      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe faea 	bl	8000910 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e06d      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02e      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d027      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d014      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fab9 	bl	8000910 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fab5 	bl	8000910 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e036      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ee      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4917      	ldr	r1, [pc, #92]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	490b      	ldr	r1, [pc, #44]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	42420440 	.word	0x42420440

0800243c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b10      	cmp	r3, #16
 8002462:	f200 808a 	bhi.w	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d045      	beq.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d075      	beq.n	800255e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002472:	e082      	b.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d07b      	beq.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	4a41      	ldr	r2, [pc, #260]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800249e:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0c5b      	lsrs	r3, r3, #17
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024b8:	4a38      	ldr	r2, [pc, #224]	; (800259c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	e004      	b.n	80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e0:	d102      	bne.n	80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	61bb      	str	r3, [r7, #24]
      break;
 80024e6:	e04a      	b.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4a2d      	ldr	r2, [pc, #180]	; (80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
      break;
 80024f6:	e042      	b.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002508:	d108      	bne.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	e01f      	b.n	800255c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002526:	d109      	bne.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002534:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e00f      	b.n	800255c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002546:	d11c      	bne.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d016      	beq.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002554:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002558:	61bb      	str	r3, [r7, #24]
      break;
 800255a:	e012      	b.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800255c:	e011      	b.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800255e:	f7ff fe85 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0b9b      	lsrs	r3, r3, #14
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	61bb      	str	r3, [r7, #24]
      break;
 8002578:	e004      	b.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800257a:	bf00      	nop
 800257c:	e002      	b.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002582:	bf00      	nop
    }
  }
  return (frequency);
 8002584:	69bb      	ldr	r3, [r7, #24]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	08005cb8 	.word	0x08005cb8
 8002598:	08005cc8 	.word	0x08005cc8
 800259c:	007a1200 	.word	0x007a1200
 80025a0:	003d0900 	.word	0x003d0900
 80025a4:	aaaaaaab 	.word	0xaaaaaaab

080025a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e042      	b.n	8002640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe f8ac 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f91d 	bl	800282c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d16d      	bne.n	8002744 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Transmit+0x2c>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e066      	b.n	8002746 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2221      	movs	r2, #33	; 0x21
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002686:	f7fe f943 	bl	8000910 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a0:	d108      	bne.n	80026b4 <HAL_UART_Transmit+0x6c>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d104      	bne.n	80026b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	e003      	b.n	80026bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026bc:	e02a      	b.n	8002714 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f840 	bl	800274e <UART_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e036      	b.n	8002746 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3302      	adds	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e007      	b.n	8002706 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3301      	adds	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1cf      	bne.n	80026be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f810 	bl	800274e <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e006      	b.n	8002746 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b090      	sub	sp, #64	; 0x40
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275e:	e050      	b.n	8002802 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d04c      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <UART_WaitOnFlagUntilTimeout+0x30>
 800276e:	f7fe f8cf 	bl	8000910 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277a:	429a      	cmp	r2, r3
 800277c:	d241      	bcs.n	8002802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800279e:	637a      	str	r2, [r7, #52]	; 0x34
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a6:	e841 2300 	strex	r3, r2, [r1]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e5      	bne.n	800277e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3314      	adds	r3, #20
 80027b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	613b      	str	r3, [r7, #16]
   return(result);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d2:	623a      	str	r2, [r7, #32]
 80027d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	e841 2300 	strex	r3, r2, [r1]
 80027de:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e5      	bne.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e00f      	b.n	8002822 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	429a      	cmp	r2, r3
 800281e:	d09f      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3740      	adds	r7, #64	; 0x40
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002866:	f023 030c 	bic.w	r3, r3, #12
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	430b      	orrs	r3, r1
 8002872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2c      	ldr	r2, [pc, #176]	; (8002940 <UART_SetConfig+0x114>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002894:	f7ff fcea 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	e002      	b.n	80028a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800289c:	f7ff fcd2 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80028a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	009a      	lsls	r2, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	4a22      	ldr	r2, [pc, #136]	; (8002944 <UART_SetConfig+0x118>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	0119      	lsls	r1, r3, #4
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009a      	lsls	r2, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <UART_SetConfig+0x118>)
 80028da:	fba3 0302 	umull	r0, r3, r3, r2
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	fb00 f303 	mul.w	r3, r0, r3
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	3332      	adds	r3, #50	; 0x32
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <UART_SetConfig+0x118>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f8:	4419      	add	r1, r3
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	009a      	lsls	r2, r3, #2
 8002904:	441a      	add	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <UART_SetConfig+0x118>)
 8002912:	fba3 0302 	umull	r0, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2064      	movs	r0, #100	; 0x64
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	3332      	adds	r3, #50	; 0x32
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <UART_SetConfig+0x118>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	440a      	add	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40013800 	.word	0x40013800
 8002944:	51eb851f 	.word	0x51eb851f

08002948 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294e:	f3ef 8305 	mrs	r3, IPSR
 8002952:	60bb      	str	r3, [r7, #8]
  return(result);
 8002954:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295a:	f3ef 8310 	mrs	r3, PRIMASK
 800295e:	607b      	str	r3, [r7, #4]
  return(result);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <osKernelInitialize+0x32>
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <osKernelInitialize+0x60>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d109      	bne.n	8002982 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800296e:	f3ef 8311 	mrs	r3, BASEPRI
 8002972:	603b      	str	r3, [r7, #0]
  return(result);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800297a:	f06f 0305 	mvn.w	r3, #5
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e00c      	b.n	800299c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <osKernelInitialize+0x60>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <osKernelInitialize+0x60>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e002      	b.n	800299c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000100 	.word	0x20000100

080029ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029b2:	f3ef 8305 	mrs	r3, IPSR
 80029b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029be:	f3ef 8310 	mrs	r3, PRIMASK
 80029c2:	607b      	str	r3, [r7, #4]
  return(result);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <osKernelStart+0x32>
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <osKernelStart+0x64>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d109      	bne.n	80029e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029d2:	f3ef 8311 	mrs	r3, BASEPRI
 80029d6:	603b      	str	r3, [r7, #0]
  return(result);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80029de:	f06f 0305 	mvn.w	r3, #5
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e00e      	b.n	8002a04 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <osKernelStart+0x64>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <osKernelStart+0x64>)
 80029f0:	2202      	movs	r2, #2
 80029f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80029f4:	f001 fb78 	bl	80040e8 <vTaskStartScheduler>
      stat = osOK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e002      	b.n	8002a04 <osKernelStart+0x58>
    } else {
      stat = osError;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a04:	68fb      	ldr	r3, [r7, #12]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000100 	.word	0x20000100

08002a14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b092      	sub	sp, #72	; 0x48
 8002a18:	af04      	add	r7, sp, #16
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a24:	f3ef 8305 	mrs	r3, IPSR
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 8094 	bne.w	8002b5a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8310 	mrs	r3, PRIMASK
 8002a36:	623b      	str	r3, [r7, #32]
  return(result);
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 808d 	bne.w	8002b5a <osThreadNew+0x146>
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <osThreadNew+0x150>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d106      	bne.n	8002a56 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a48:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 8082 	bne.w	8002b5a <osThreadNew+0x146>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d07e      	beq.n	8002b5a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a60:	2318      	movs	r3, #24
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a64:	2300      	movs	r3, #0
 8002a66:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a68:	f107 031b 	add.w	r3, r7, #27
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d045      	beq.n	8002b06 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <osThreadNew+0x74>
        name = attr->name;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <osThreadNew+0x9a>
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	2b38      	cmp	r3, #56	; 0x38
 8002aa0:	d805      	bhi.n	8002aae <osThreadNew+0x9a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <osThreadNew+0x9e>
        return (NULL);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e054      	b.n	8002b5c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00e      	beq.n	8002ae8 <osThreadNew+0xd4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b5b      	cmp	r3, #91	; 0x5b
 8002ad0:	d90a      	bls.n	8002ae8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <osThreadNew+0xd4>
        mem = 1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae6:	e010      	b.n	8002b0a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <osThreadNew+0xf6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <osThreadNew+0xf6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <osThreadNew+0xf6>
          mem = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b04:	e001      	b.n	8002b0a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d110      	bne.n	8002b32 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b18:	9202      	str	r2, [sp, #8]
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f001 f946 	bl	8003db8 <xTaskCreateStatic>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e013      	b.n	8002b5a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d110      	bne.n	8002b5a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f001 f990 	bl	8003e70 <xTaskCreate>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <osThreadNew+0x146>
          hTask = NULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b5a:	697b      	ldr	r3, [r7, #20]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3738      	adds	r7, #56	; 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000100 	.word	0x20000100

08002b68 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b74:	f3ef 8305 	mrs	r3, IPSR
 8002b78:	613b      	str	r3, [r7, #16]
  return(result);
 8002b7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 8085 	bne.w	8002c8c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b82:	f3ef 8310 	mrs	r3, PRIMASK
 8002b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d17e      	bne.n	8002c8c <osMutexNew+0x124>
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <osMutexNew+0x130>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d105      	bne.n	8002ba2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b96:	f3ef 8311 	mrs	r3, BASEPRI
 8002b9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d174      	bne.n	8002c8c <osMutexNew+0x124>
    if (attr != NULL) {
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	e001      	b.n	8002bb4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <osMutexNew+0x5c>
      rmtx = 1U;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e001      	b.n	8002bc8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d15c      	bne.n	8002c8c <osMutexNew+0x124>
      mem = -1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d015      	beq.n	8002c0a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <osMutexNew+0x8c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b4f      	cmp	r3, #79	; 0x4f
 8002bec:	d902      	bls.n	8002bf4 <osMutexNew+0x8c>
          mem = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e00c      	b.n	8002c0e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d108      	bne.n	8002c0e <osMutexNew+0xa6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <osMutexNew+0xa6>
            mem = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e001      	b.n	8002c0e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d112      	bne.n	8002c3a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	2004      	movs	r0, #4
 8002c22:	f000 fb3d 	bl	80032a0 <xQueueCreateMutexStatic>
 8002c26:	6278      	str	r0, [r7, #36]	; 0x24
 8002c28:	e016      	b.n	8002c58 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	2001      	movs	r0, #1
 8002c32:	f000 fb35 	bl	80032a0 <xQueueCreateMutexStatic>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24
 8002c38:	e00e      	b.n	8002c58 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002c46:	2004      	movs	r0, #4
 8002c48:	f000 fb12 	bl	8003270 <xQueueCreateMutex>
 8002c4c:	6278      	str	r0, [r7, #36]	; 0x24
 8002c4e:	e003      	b.n	8002c58 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002c50:	2001      	movs	r0, #1
 8002c52:	f000 fb0d 	bl	8003270 <xQueueCreateMutex>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <osMutexNew+0x110>
        if (attr != NULL) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <osMutexNew+0x104>
          name = attr->name;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e001      	b.n	8002c70 <osMutexNew+0x108>
        } else {
          name = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002c70:	6979      	ldr	r1, [r7, #20]
 8002c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c74:	f001 f844 	bl	8003d00 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <osMutexNew+0x124>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000100 	.word	0x20000100

08002c9c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cba:	f3ef 8305 	mrs	r3, IPSR
 8002cbe:	613b      	str	r3, [r7, #16]
  return(result);
 8002cc0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cca:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <osMutexAcquire+0x4a>
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <osMutexAcquire+0xb8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d109      	bne.n	8002cee <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cda:	f3ef 8311 	mrs	r3, BASEPRI
 8002cde:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <osMutexAcquire+0x52>
    stat = osErrorISR;
 8002ce6:	f06f 0305 	mvn.w	r3, #5
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e02c      	b.n	8002d48 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8002cf4:	f06f 0303 	mvn.w	r3, #3
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e025      	b.n	8002d48 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d011      	beq.n	8002d26 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	69b8      	ldr	r0, [r7, #24]
 8002d06:	f000 fb1a 	bl	800333e <xQueueTakeMutexRecursive>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d01b      	beq.n	8002d48 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8002d16:	f06f 0301 	mvn.w	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	e014      	b.n	8002d48 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002d1e:	f06f 0302 	mvn.w	r3, #2
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	e010      	b.n	8002d48 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	69b8      	ldr	r0, [r7, #24]
 8002d2a:	f000 fdb5 	bl	8003898 <xQueueSemaphoreTake>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d009      	beq.n	8002d48 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8002d3a:	f06f 0301 	mvn.w	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e002      	b.n	8002d48 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002d42:	f06f 0302 	mvn.w	r3, #2
 8002d46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002d48:	69fb      	ldr	r3, [r7, #28]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000100 	.word	0x20000100

08002d58 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d74:	f3ef 8305 	mrs	r3, IPSR
 8002d78:	613b      	str	r3, [r7, #16]
  return(result);
 8002d7a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10f      	bne.n	8002da0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <osMutexRelease+0x48>
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <osMutexRelease+0x9c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d109      	bne.n	8002da8 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d94:	f3ef 8311 	mrs	r3, BASEPRI
 8002d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <osMutexRelease+0x50>
    stat = osErrorISR;
 8002da0:	f06f 0305 	mvn.w	r3, #5
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e01f      	b.n	8002de8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8002dae:	f06f 0303 	mvn.w	r3, #3
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e018      	b.n	8002de8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002dbc:	69b8      	ldr	r0, [r7, #24]
 8002dbe:	f000 fa8a 	bl	80032d6 <xQueueGiveMutexRecursive>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d00f      	beq.n	8002de8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002dc8:	f06f 0302 	mvn.w	r3, #2
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e00b      	b.n	8002de8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	69b8      	ldr	r0, [r7, #24]
 8002dd8:	f000 fae8 	bl	80033ac <xQueueGenericSend>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002de2:	f06f 0302 	mvn.w	r3, #2
 8002de6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8002de8:	69fb      	ldr	r3, [r7, #28]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000100 	.word	0x20000100

08002df8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <vApplicationGetIdleTaskMemory+0x28>)
 8002e08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20000104 	.word	0x20000104
 8002e24:	20000160 	.word	0x20000160

08002e28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4a06      	ldr	r2, [pc, #24]	; (8002e58 <vApplicationGetTimerTaskMemory+0x30>)
 8002e3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000360 	.word	0x20000360
 8002e58:	200003bc 	.word	0x200003bc

08002e5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f103 0208 	add.w	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 0208 	add.w	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f103 0208 	add.w	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d103      	bne.n	8002f18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e00c      	b.n	8002f32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e002      	b.n	8002f26 <vListInsert+0x2e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d2f6      	bcs.n	8002f20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6892      	ldr	r2, [r2, #8]
 8002f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6852      	ldr	r2, [r2, #4]
 8002f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d103      	bne.n	8002f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
	...

08002fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fe6:	f002 fac1 	bl	800556c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	3b01      	subs	r3, #1
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	441a      	add	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d114      	bne.n	8003066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01a      	beq.n	800307a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3310      	adds	r3, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fad7 	bl	80045fc <xTaskRemoveFromEventList>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <xQueueGenericReset+0xcc>)
 8003056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	e009      	b.n	800307a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3310      	adds	r3, #16
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fef6 	bl	8002e5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3324      	adds	r3, #36	; 0x24
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fef1 	bl	8002e5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800307a:	f002 faa7 	bl	80055cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	; 0x38
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <xQueueGenericCreateStatic+0x52>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <xQueueGenericCreateStatic+0x56>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueGenericCreateStatic+0x58>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	623b      	str	r3, [r7, #32]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <xQueueGenericCreateStatic+0x7e>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <xQueueGenericCreateStatic+0x82>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <xQueueGenericCreateStatic+0x84>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	61fb      	str	r3, [r7, #28]
}
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800312a:	2350      	movs	r3, #80	; 0x50
 800312c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d00a      	beq.n	800314a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	61bb      	str	r3, [r7, #24]
}
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800315c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f843 	bl	80031f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003172:	4618      	mov	r0, r3
 8003174:	3730      	adds	r7, #48	; 0x30
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800317a:	b580      	push	{r7, lr}
 800317c:	b08a      	sub	sp, #40	; 0x28
 800317e:	af02      	add	r7, sp, #8
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	613b      	str	r3, [r7, #16]
}
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	e004      	b.n	80031ba <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3350      	adds	r3, #80	; 0x50
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fad4 	bl	800576c <pvPortMalloc>
 80031c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00f      	beq.n	80031ec <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3350      	adds	r3, #80	; 0x50
 80031d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031da:	79fa      	ldrb	r2, [r7, #7]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f805 	bl	80031f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031ec:	69bb      	ldr	r3, [r7, #24]
	}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e002      	b.n	8003218 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003224:	2101      	movs	r1, #1
 8003226:	69b8      	ldr	r0, [r7, #24]
 8003228:	f7ff fec8 	bl	8002fbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800325c:	2300      	movs	r3, #0
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8a2 	bl	80033ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800327a:	2301      	movs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	461a      	mov	r2, r3
 8003286:	6939      	ldr	r1, [r7, #16]
 8003288:	6978      	ldr	r0, [r7, #20]
 800328a:	f7ff ff76 	bl	800317a <xQueueGenericCreate>
 800328e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff ffd3 	bl	800323c <prvInitialiseMutex>

		return pxNewQueue;
 8003296:	68fb      	ldr	r3, [r7, #12]
	}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	6939      	ldr	r1, [r7, #16]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff fee4 	bl	800308c <xQueueGenericCreateStatic>
 80032c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff ffb8 	bl	800323c <prvInitialiseMutex>

		return pxNewQueue;
 80032cc:	68fb      	ldr	r3, [r7, #12]
	}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80032d6:	b590      	push	{r4, r7, lr}
 80032d8:	b087      	sub	sp, #28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60fb      	str	r3, [r7, #12]
}
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	685c      	ldr	r4, [r3, #4]
 8003302:	f001 fb3d 	bl	8004980 <xTaskGetCurrentTaskHandle>
 8003306:	4603      	mov	r3, r0
 8003308:	429c      	cmp	r4, r3
 800330a:	d111      	bne.n	8003330 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800331e:	2300      	movs	r3, #0
 8003320:	2200      	movs	r2, #0
 8003322:	2100      	movs	r1, #0
 8003324:	6938      	ldr	r0, [r7, #16]
 8003326:	f000 f841 	bl	80033ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800332a:	2301      	movs	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e001      	b.n	8003334 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003334:	697b      	ldr	r3, [r7, #20]
	}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800333e:	b590      	push	{r4, r7, lr}
 8003340:	b087      	sub	sp, #28
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60fb      	str	r3, [r7, #12]
}
 8003364:	bf00      	nop
 8003366:	e7fe      	b.n	8003366 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	685c      	ldr	r4, [r3, #4]
 800336c:	f001 fb08 	bl	8004980 <xTaskGetCurrentTaskHandle>
 8003370:	4603      	mov	r3, r0
 8003372:	429c      	cmp	r4, r3
 8003374:	d107      	bne.n	8003386 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003380:	2301      	movs	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e00c      	b.n	80033a0 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	6938      	ldr	r0, [r7, #16]
 800338a:	f000 fa85 	bl	8003898 <xQueueSemaphoreTake>
 800338e:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80033a0:	697b      	ldr	r3, [r7, #20]
	}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
	...

080033ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ba:	2300      	movs	r3, #0
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueGenericSend+0x32>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <xQueueGenericSend+0x40>
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <xQueueGenericSend+0x44>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <xQueueGenericSend+0x46>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xQueueGenericSend+0x60>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d103      	bne.n	800341a <xQueueGenericSend+0x6e>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <xQueueGenericSend+0x72>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueGenericSend+0x74>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueGenericSend+0x8e>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800343a:	f001 faaf 	bl	800499c <xTaskGetSchedulerState>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <xQueueGenericSend+0x9e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <xQueueGenericSend+0xa2>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <xQueueGenericSend+0xa4>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <xQueueGenericSend+0xbe>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	61fb      	str	r3, [r7, #28]
}
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800346a:	f002 f87f 	bl	800556c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <xQueueGenericSend+0xd4>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d129      	bne.n	80034d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003486:	f000 fb2a 	bl	8003ade <prvCopyDataToQueue>
 800348a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	3324      	adds	r3, #36	; 0x24
 8003498:	4618      	mov	r0, r3
 800349a:	f001 f8af 	bl	80045fc <xTaskRemoveFromEventList>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034a4:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <xQueueGenericSend+0x1f8>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	e00a      	b.n	80034cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <xQueueGenericSend+0x1f8>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034cc:	f002 f87e 	bl	80055cc <vPortExitCritical>
				return pdPASS;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e063      	b.n	800359c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034da:	f002 f877 	bl	80055cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	e05c      	b.n	800359c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 f8e9 	bl	80046c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034f2:	2301      	movs	r3, #1
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034f6:	f002 f869 	bl	80055cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034fa:	f000 fe5b 	bl	80041b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034fe:	f002 f835 	bl	800556c <vPortEnterCritical>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003508:	b25b      	sxtb	r3, r3
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d103      	bne.n	8003518 <xQueueGenericSend+0x16c>
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351e:	b25b      	sxtb	r3, r3
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d103      	bne.n	800352e <xQueueGenericSend+0x182>
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800352e:	f002 f84d 	bl	80055cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003532:	1d3a      	adds	r2, r7, #4
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f001 f8d8 	bl	80046f0 <xTaskCheckForTimeOut>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d124      	bne.n	8003590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003548:	f000 fbc1 	bl	8003cce <prvIsQueueFull>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	3310      	adds	r3, #16
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fffe 	bl	800455c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003562:	f000 fb4c 	bl	8003bfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003566:	f000 fe33 	bl	80041d0 <xTaskResumeAll>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f47f af7c 	bne.w	800346a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <xQueueGenericSend+0x1f8>)
 8003574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	e772      	b.n	800346a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003586:	f000 fb3a 	bl	8003bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800358a:	f000 fe21 	bl	80041d0 <xTaskResumeAll>
 800358e:	e76c      	b.n	800346a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003592:	f000 fb34 	bl	8003bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003596:	f000 fe1b 	bl	80041d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800359a:	2300      	movs	r3, #0
		}
	}
}
 800359c:	4618      	mov	r0, r3
 800359e:	3738      	adds	r7, #56	; 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	; 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <xQueueGenericSendFromISR+0x3c>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <xQueueGenericSendFromISR+0x40>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <xQueueGenericSendFromISR+0x42>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	623b      	str	r3, [r7, #32]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d103      	bne.n	8003612 <xQueueGenericSendFromISR+0x6a>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <xQueueGenericSendFromISR+0x6e>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericSendFromISR+0x70>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61fb      	str	r3, [r7, #28]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003632:	f002 f85d 	bl	80056f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003636:	f3ef 8211 	mrs	r2, BASEPRI
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800364e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <xQueueGenericSendFromISR+0xbc>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d12c      	bne.n	80036be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003674:	f000 fa33 	bl	8003ade <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003678:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d112      	bne.n	80036a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	4618      	mov	r0, r3
 8003690:	f000 ffb4 	bl	80045fc <xTaskRemoveFromEventList>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e007      	b.n	80036b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ac:	3301      	adds	r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	b25a      	sxtb	r2, r3
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036b8:	2301      	movs	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036bc:	e001      	b.n	80036c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3738      	adds	r7, #56	; 0x38
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xQueueReceive+0x30>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	623b      	str	r3, [r7, #32]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <xQueueReceive+0x3e>
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <xQueueReceive+0x42>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueReceive+0x44>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueReceive+0x5e>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	61fb      	str	r3, [r7, #28]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003736:	f001 f931 	bl	800499c <xTaskGetSchedulerState>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <xQueueReceive+0x6e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <xQueueReceive+0x72>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueReceive+0x74>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueReceive+0x8e>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61bb      	str	r3, [r7, #24]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003766:	f001 ff01 	bl	800556c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01f      	beq.n	80037b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800377a:	f000 fa1a 	bl	8003bb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00f      	beq.n	80037ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	3310      	adds	r3, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f000 ff32 	bl	80045fc <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <xQueueReceive+0x1bc>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037ae:	f001 ff0d 	bl	80055cc <vPortExitCritical>
				return pdPASS;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e069      	b.n	800388a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037bc:	f001 ff06 	bl	80055cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e062      	b.n	800388a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ca:	f107 0310 	add.w	r3, r7, #16
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 ff78 	bl	80046c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037d8:	f001 fef8 	bl	80055cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037dc:	f000 fcea 	bl	80041b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037e0:	f001 fec4 	bl	800556c <vPortEnterCritical>
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d103      	bne.n	80037fa <xQueueReceive+0x122>
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d103      	bne.n	8003810 <xQueueReceive+0x138>
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003810:	f001 fedc 	bl	80055cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003814:	1d3a      	adds	r2, r7, #4
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 ff67 	bl	80046f0 <xTaskCheckForTimeOut>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d123      	bne.n	8003870 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382a:	f000 fa3a 	bl	8003ca2 <prvIsQueueEmpty>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fe8d 	bl	800455c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003844:	f000 f9db 	bl	8003bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003848:	f000 fcc2 	bl	80041d0 <xTaskResumeAll>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d189      	bne.n	8003766 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <xQueueReceive+0x1bc>)
 8003854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	e780      	b.n	8003766 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f9ca 	bl	8003bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800386a:	f000 fcb1 	bl	80041d0 <xTaskResumeAll>
 800386e:	e77a      	b.n	8003766 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003872:	f000 f9c4 	bl	8003bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003876:	f000 fcab 	bl	80041d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800387a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387c:	f000 fa11 	bl	8003ca2 <prvIsQueueEmpty>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f43f af6f 	beq.w	8003766 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800388a:	4618      	mov	r0, r3
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	623b      	str	r3, [r7, #32]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	61fb      	str	r3, [r7, #28]
}
 80038e4:	bf00      	nop
 80038e6:	e7fe      	b.n	80038e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038e8:	f001 f858 	bl	800499c <xTaskGetSchedulerState>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <xQueueSemaphoreTake+0x60>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <xQueueSemaphoreTake+0x64>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <xQueueSemaphoreTake+0x66>
 80038fc:	2300      	movs	r3, #0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	61bb      	str	r3, [r7, #24]
}
 8003914:	bf00      	nop
 8003916:	e7fe      	b.n	8003916 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003918:	f001 fe28 	bl	800556c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d024      	beq.n	8003972 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003938:	f001 f9b0 	bl	8004c9c <pvTaskIncrementMutexHeldCount>
 800393c:	4602      	mov	r2, r0
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00f      	beq.n	800396a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	3310      	adds	r3, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fe54 	bl	80045fc <xTaskRemoveFromEventList>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <xQueueSemaphoreTake+0x214>)
 800395c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800396a:	f001 fe2f 	bl	80055cc <vPortExitCritical>
				return pdPASS;
 800396e:	2301      	movs	r3, #1
 8003970:	e097      	b.n	8003aa2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	617b      	str	r3, [r7, #20]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003994:	f001 fe1a 	bl	80055cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003998:	2300      	movs	r3, #0
 800399a:	e082      	b.n	8003aa2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fe8c 	bl	80046c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b0:	f001 fe0c 	bl	80055cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039b4:	f000 fbfe 	bl	80041b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039b8:	f001 fdd8 	bl	800556c <vPortEnterCritical>
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d103      	bne.n	80039d2 <xQueueSemaphoreTake+0x13a>
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d103      	bne.n	80039e8 <xQueueSemaphoreTake+0x150>
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e8:	f001 fdf0 	bl	80055cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039ec:	463a      	mov	r2, r7
 80039ee:	f107 030c 	add.w	r3, r7, #12
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fe7b 	bl	80046f0 <xTaskCheckForTimeOut>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d132      	bne.n	8003a66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a02:	f000 f94e 	bl	8003ca2 <prvIsQueueEmpty>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d026      	beq.n	8003a5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003a14:	f001 fdaa 	bl	800556c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 ffdb 	bl	80049d8 <xTaskPriorityInherit>
 8003a22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003a24:	f001 fdd2 	bl	80055cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	3324      	adds	r3, #36	; 0x24
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd93 	bl	800455c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a38:	f000 f8e1 	bl	8003bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a3c:	f000 fbc8 	bl	80041d0 <xTaskResumeAll>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f af68 	bne.w	8003918 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003a48:	4b18      	ldr	r3, [pc, #96]	; (8003aac <xQueueSemaphoreTake+0x214>)
 8003a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	e75e      	b.n	8003918 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a5c:	f000 f8cf 	bl	8003bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a60:	f000 fbb6 	bl	80041d0 <xTaskResumeAll>
 8003a64:	e758      	b.n	8003918 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a68:	f000 f8c9 	bl	8003bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a6c:	f000 fbb0 	bl	80041d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a72:	f000 f916 	bl	8003ca2 <prvIsQueueEmpty>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f43f af4d 	beq.w	8003918 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003a84:	f001 fd72 	bl	800556c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a8a:	f000 f811 	bl	8003ab0 <prvGetDisinheritPriorityAfterTimeout>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f87a 	bl	8004b90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a9c:	f001 fd96 	bl	80055cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3738      	adds	r7, #56	; 0x38
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e001      	b.n	8003ad2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d14d      	bne.n	8003ba0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 ffd3 	bl	8004ab4 <xTaskPriorityDisinherit>
 8003b0e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	e043      	b.n	8003ba0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d119      	bne.n	8003b52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6898      	ldr	r0, [r3, #8]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	461a      	mov	r2, r3
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	f002 f823 	bl	8005b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d32b      	bcc.n	8003ba0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	e026      	b.n	8003ba0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68d8      	ldr	r0, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	f002 f809 	bl	8005b74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	425b      	negs	r3, r3
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d207      	bcs.n	8003b8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	425b      	negs	r3, r3
 8003b88:	441a      	add	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d105      	bne.n	8003ba0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ba8:	697b      	ldr	r3, [r7, #20]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d018      	beq.n	8003bf6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	441a      	add	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d303      	bcc.n	8003be6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68d9      	ldr	r1, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6838      	ldr	r0, [r7, #0]
 8003bf2:	f001 ffbf 	bl	8005b74 <memcpy>
	}
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c06:	f001 fcb1 	bl	800556c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c12:	e011      	b.n	8003c38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d012      	beq.n	8003c42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3324      	adds	r3, #36	; 0x24
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fceb 	bl	80045fc <xTaskRemoveFromEventList>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c2c:	f000 fdc2 	bl	80047b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dce9      	bgt.n	8003c14 <prvUnlockQueue+0x16>
 8003c40:	e000      	b.n	8003c44 <prvUnlockQueue+0x46>
					break;
 8003c42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	22ff      	movs	r2, #255	; 0xff
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c4c:	f001 fcbe 	bl	80055cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c50:	f001 fc8c 	bl	800556c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c5c:	e011      	b.n	8003c82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d012      	beq.n	8003c8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3310      	adds	r3, #16
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fcc6 	bl	80045fc <xTaskRemoveFromEventList>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c76:	f000 fd9d 	bl	80047b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c7a:	7bbb      	ldrb	r3, [r7, #14]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	dce9      	bgt.n	8003c5e <prvUnlockQueue+0x60>
 8003c8a:	e000      	b.n	8003c8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	22ff      	movs	r2, #255	; 0xff
 8003c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c96:	f001 fc99 	bl	80055cc <vPortExitCritical>
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003caa:	f001 fc5f 	bl	800556c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e001      	b.n	8003cc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cc0:	f001 fc84 	bl	80055cc <vPortExitCritical>

	return xReturn;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd6:	f001 fc49 	bl	800556c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d102      	bne.n	8003cec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e001      	b.n	8003cf0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cf0:	f001 fc6c 	bl	80055cc <vPortExitCritical>

	return xReturn;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e014      	b.n	8003d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d10:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <vQueueAddToRegistry+0x4c>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d1c:	490b      	ldr	r1, [pc, #44]	; (8003d4c <vQueueAddToRegistry+0x4c>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <vQueueAddToRegistry+0x4c>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d32:	e006      	b.n	8003d42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d9e7      	bls.n	8003d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	200007bc 	.word	0x200007bc

08003d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d60:	f001 fc04 	bl	800556c <vPortEnterCritical>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d103      	bne.n	8003d7a <vQueueWaitForMessageRestricted+0x2a>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d103      	bne.n	8003d90 <vQueueWaitForMessageRestricted+0x40>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d90:	f001 fc1c 	bl	80055cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fbfd 	bl	80045a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ff27 	bl	8003bfe <prvUnlockQueue>
	}
 8003db0:	bf00      	nop
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	; 0x38
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	623b      	str	r3, [r7, #32]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xTaskCreateStatic+0x46>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	61fb      	str	r3, [r7, #28]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dfe:	235c      	movs	r3, #92	; 0x5c
 8003e00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b5c      	cmp	r3, #92	; 0x5c
 8003e06:	d00a      	beq.n	8003e1e <xTaskCreateStatic+0x66>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61bb      	str	r3, [r7, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01e      	beq.n	8003e62 <xTaskCreateStatic+0xaa>
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01b      	beq.n	8003e62 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f850 	bl	8003efa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e5c:	f000 f8d4 	bl	8004008 <prvAddNewTaskToReadyList>
 8003e60:	e001      	b.n	8003e66 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e66:	697b      	ldr	r3, [r7, #20]
	}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	; 0x30
 8003e74:	af04      	add	r7, sp, #16
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fc71 	bl	800576c <pvPortMalloc>
 8003e8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e92:	205c      	movs	r0, #92	; 0x5c
 8003e94:	f001 fc6a 	bl	800576c <pvPortMalloc>
 8003e98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea6:	e005      	b.n	8003eb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f001 fd23 	bl	80058f4 <vPortFree>
 8003eae:	e001      	b.n	8003eb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9303      	str	r3, [sp, #12]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f80e 	bl	8003efa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ede:	69f8      	ldr	r0, [r7, #28]
 8003ee0:	f000 f892 	bl	8004008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e002      	b.n	8003ef0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b088      	sub	sp, #32
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	461a      	mov	r2, r3
 8003f12:	21a5      	movs	r1, #165	; 0xa5
 8003f14:	f001 fe02 	bl	8005b1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f22:	3b01      	subs	r3, #1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f023 0307 	bic.w	r3, r3, #7
 8003f30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	617b      	str	r3, [r7, #20]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e012      	b.n	8003f7e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	7819      	ldrb	r1, [r3, #0]
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	3334      	adds	r3, #52	; 0x34
 8003f68:	460a      	mov	r2, r1
 8003f6a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d006      	beq.n	8003f86 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d9e9      	bls.n	8003f58 <prvInitialiseNewTask+0x5e>
 8003f84:	e000      	b.n	8003f88 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003f86:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b37      	cmp	r3, #55	; 0x37
 8003f94:	d901      	bls.n	8003f9a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f96:	2337      	movs	r3, #55	; 0x37
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe ff72 	bl	8002e9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	3318      	adds	r3, #24
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe ff6d 	bl	8002e9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	69b8      	ldr	r0, [r7, #24]
 8003fea:	f001 f9d1 	bl	8005390 <pxPortInitialiseStack>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004000:	bf00      	nop
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004010:	f001 faac 	bl	800556c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <prvAddNewTaskToReadyList+0xc4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <prvAddNewTaskToReadyList+0xc4>)
 800401c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <prvAddNewTaskToReadyList+0xc8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004026:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <prvAddNewTaskToReadyList+0xc8>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <prvAddNewTaskToReadyList+0xc4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d110      	bne.n	8004056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004034:	f000 fbe2 	bl	80047fc <prvInitialiseTaskLists>
 8004038:	e00d      	b.n	8004056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <prvAddNewTaskToReadyList+0xcc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <prvAddNewTaskToReadyList+0xc8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d802      	bhi.n	8004056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <prvAddNewTaskToReadyList+0xc8>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <prvAddNewTaskToReadyList+0xd0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <prvAddNewTaskToReadyList+0xd0>)
 800405e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <prvAddNewTaskToReadyList+0xd0>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <prvAddNewTaskToReadyList+0xd4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d903      	bls.n	800407c <prvAddNewTaskToReadyList+0x74>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4a18      	ldr	r2, [pc, #96]	; (80040dc <prvAddNewTaskToReadyList+0xd4>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <prvAddNewTaskToReadyList+0xd8>)
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f7fe ff0d 	bl	8002eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004098:	f001 fa98 	bl	80055cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <prvAddNewTaskToReadyList+0xcc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvAddNewTaskToReadyList+0xc8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d207      	bcs.n	80040c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040b2:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <prvAddNewTaskToReadyList+0xdc>)
 80040b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000cd0 	.word	0x20000cd0
 80040d0:	200007fc 	.word	0x200007fc
 80040d4:	20000cdc 	.word	0x20000cdc
 80040d8:	20000cec 	.word	0x20000cec
 80040dc:	20000cd8 	.word	0x20000cd8
 80040e0:	20000800 	.word	0x20000800
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040f6:	463a      	mov	r2, r7
 80040f8:	1d39      	adds	r1, r7, #4
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fe7a 	bl	8002df8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	9202      	str	r2, [sp, #8]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	460a      	mov	r2, r1
 8004116:	4921      	ldr	r1, [pc, #132]	; (800419c <vTaskStartScheduler+0xb4>)
 8004118:	4821      	ldr	r0, [pc, #132]	; (80041a0 <vTaskStartScheduler+0xb8>)
 800411a:	f7ff fe4d 	bl	8003db8 <xTaskCreateStatic>
 800411e:	4603      	mov	r3, r0
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <vTaskStartScheduler+0xbc>)
 8004122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <vTaskStartScheduler+0xbc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800412c:	2301      	movs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e001      	b.n	8004136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d102      	bne.n	8004142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800413c:	f000 fe16 	bl	8004d6c <xTimerCreateTimerTask>
 8004140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d116      	bne.n	8004176 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	613b      	str	r3, [r7, #16]
}
 800415a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <vTaskStartScheduler+0xc0>)
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <vTaskStartScheduler+0xc4>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <vTaskStartScheduler+0xc8>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004170:	f001 f98a 	bl	8005488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004174:	e00e      	b.n	8004194 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d10a      	bne.n	8004194 <vTaskStartScheduler+0xac>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60fb      	str	r3, [r7, #12]
}
 8004190:	bf00      	nop
 8004192:	e7fe      	b.n	8004192 <vTaskStartScheduler+0xaa>
}
 8004194:	bf00      	nop
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	08005bf8 	.word	0x08005bf8
 80041a0:	080047cd 	.word	0x080047cd
 80041a4:	20000cf4 	.word	0x20000cf4
 80041a8:	20000cf0 	.word	0x20000cf0
 80041ac:	20000cdc 	.word	0x20000cdc
 80041b0:	20000cd4 	.word	0x20000cd4

080041b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <vTaskSuspendAll+0x18>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	4a03      	ldr	r2, [pc, #12]	; (80041cc <vTaskSuspendAll+0x18>)
 80041c0:	6013      	str	r3, [r2, #0]
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000cf8 	.word	0x20000cf8

080041d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041de:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <xTaskResumeAll+0x118>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <xTaskResumeAll+0x2c>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	603b      	str	r3, [r7, #0]
}
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041fc:	f001 f9b6 	bl	800556c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <xTaskResumeAll+0x118>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	4a38      	ldr	r2, [pc, #224]	; (80042e8 <xTaskResumeAll+0x118>)
 8004208:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <xTaskResumeAll+0x118>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d162      	bne.n	80042d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <xTaskResumeAll+0x11c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d05e      	beq.n	80042d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800421a:	e02f      	b.n	800427c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800421c:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <xTaskResumeAll+0x120>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3318      	adds	r3, #24
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe fe9d 	bl	8002f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3304      	adds	r3, #4
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fe98 	bl	8002f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <xTaskResumeAll+0x124>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d903      	bls.n	800424c <xTaskResumeAll+0x7c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <xTaskResumeAll+0x124>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <xTaskResumeAll+0x128>)
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe fe25 	bl	8002eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <xTaskResumeAll+0x12c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <xTaskResumeAll+0x130>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800427c:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <xTaskResumeAll+0x120>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1cb      	bne.n	800421c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800428a:	f000 fb55 	bl	8004938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800428e:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <xTaskResumeAll+0x134>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d010      	beq.n	80042bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800429a:	f000 f845 	bl	8004328 <xTaskIncrementTick>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <xTaskResumeAll+0x130>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f1      	bne.n	800429a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <xTaskResumeAll+0x134>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <xTaskResumeAll+0x130>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <xTaskResumeAll+0x138>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042d8:	f001 f978 	bl	80055cc <vPortExitCritical>

	return xAlreadyYielded;
 80042dc:	68bb      	ldr	r3, [r7, #8]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000cf8 	.word	0x20000cf8
 80042ec:	20000cd0 	.word	0x20000cd0
 80042f0:	20000c90 	.word	0x20000c90
 80042f4:	20000cd8 	.word	0x20000cd8
 80042f8:	20000800 	.word	0x20000800
 80042fc:	200007fc 	.word	0x200007fc
 8004300:	20000ce4 	.word	0x20000ce4
 8004304:	20000ce0 	.word	0x20000ce0
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <xTaskGetTickCount+0x18>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004318:	687b      	ldr	r3, [r7, #4]
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20000cd4 	.word	0x20000cd4

08004328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004332:	4b51      	ldr	r3, [pc, #324]	; (8004478 <xTaskIncrementTick+0x150>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 808e 	bne.w	8004458 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <xTaskIncrementTick+0x154>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004344:	4a4d      	ldr	r2, [pc, #308]	; (800447c <xTaskIncrementTick+0x154>)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d120      	bne.n	8004392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <xTaskIncrementTick+0x158>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <xTaskIncrementTick+0x48>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	603b      	str	r3, [r7, #0]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <xTaskIncrementTick+0x46>
 8004370:	4b43      	ldr	r3, [pc, #268]	; (8004480 <xTaskIncrementTick+0x158>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b43      	ldr	r3, [pc, #268]	; (8004484 <xTaskIncrementTick+0x15c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a41      	ldr	r2, [pc, #260]	; (8004480 <xTaskIncrementTick+0x158>)
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4a41      	ldr	r2, [pc, #260]	; (8004484 <xTaskIncrementTick+0x15c>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <xTaskIncrementTick+0x160>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <xTaskIncrementTick+0x160>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	f000 fad3 	bl	8004938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004392:	4b3e      	ldr	r3, [pc, #248]	; (800448c <xTaskIncrementTick+0x164>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	429a      	cmp	r2, r3
 800439a:	d34e      	bcc.n	800443a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439c:	4b38      	ldr	r3, [pc, #224]	; (8004480 <xTaskIncrementTick+0x158>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xTaskIncrementTick+0x82>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xTaskIncrementTick+0x84>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <xTaskIncrementTick+0x164>)
 80043b2:	f04f 32ff 	mov.w	r2, #4294967295
 80043b6:	601a      	str	r2, [r3, #0]
					break;
 80043b8:	e03f      	b.n	800443a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <xTaskIncrementTick+0x158>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d203      	bcs.n	80043da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043d2:	4a2e      	ldr	r2, [pc, #184]	; (800448c <xTaskIncrementTick+0x164>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6013      	str	r3, [r2, #0]
						break;
 80043d8:	e02f      	b.n	800443a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3304      	adds	r3, #4
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fdc2 	bl	8002f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	3318      	adds	r3, #24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fdb9 	bl	8002f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	4b25      	ldr	r3, [pc, #148]	; (8004490 <xTaskIncrementTick+0x168>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d903      	bls.n	800440a <xTaskIncrementTick+0xe2>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a22      	ldr	r2, [pc, #136]	; (8004490 <xTaskIncrementTick+0x168>)
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <xTaskIncrementTick+0x16c>)
 8004418:	441a      	add	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3304      	adds	r3, #4
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f7fe fd46 	bl	8002eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <xTaskIncrementTick+0x170>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	429a      	cmp	r2, r3
 8004432:	d3b3      	bcc.n	800439c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004438:	e7b0      	b.n	800439c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <xTaskIncrementTick+0x170>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	4914      	ldr	r1, [pc, #80]	; (8004494 <xTaskIncrementTick+0x16c>)
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d907      	bls.n	8004462 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004452:	2301      	movs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e004      	b.n	8004462 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <xTaskIncrementTick+0x174>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	4a0f      	ldr	r2, [pc, #60]	; (800449c <xTaskIncrementTick+0x174>)
 8004460:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <xTaskIncrementTick+0x178>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800446e:	697b      	ldr	r3, [r7, #20]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000cf8 	.word	0x20000cf8
 800447c:	20000cd4 	.word	0x20000cd4
 8004480:	20000c88 	.word	0x20000c88
 8004484:	20000c8c 	.word	0x20000c8c
 8004488:	20000ce8 	.word	0x20000ce8
 800448c:	20000cf0 	.word	0x20000cf0
 8004490:	20000cd8 	.word	0x20000cd8
 8004494:	20000800 	.word	0x20000800
 8004498:	200007fc 	.word	0x200007fc
 800449c:	20000ce0 	.word	0x20000ce0
 80044a0:	20000ce4 	.word	0x20000ce4

080044a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <vTaskSwitchContext+0xa4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <vTaskSwitchContext+0xa8>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044b8:	e041      	b.n	800453e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <vTaskSwitchContext+0xa8>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044c0:	4b23      	ldr	r3, [pc, #140]	; (8004550 <vTaskSwitchContext+0xac>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	e010      	b.n	80044ea <vTaskSwitchContext+0x46>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <vTaskSwitchContext+0x3e>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	491a      	ldr	r1, [pc, #104]	; (8004554 <vTaskSwitchContext+0xb0>)
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0e4      	beq.n	80044c8 <vTaskSwitchContext+0x24>
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4a12      	ldr	r2, [pc, #72]	; (8004554 <vTaskSwitchContext+0xb0>)
 800450a:	4413      	add	r3, r2
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	3308      	adds	r3, #8
 8004520:	429a      	cmp	r2, r3
 8004522:	d104      	bne.n	800452e <vTaskSwitchContext+0x8a>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <vTaskSwitchContext+0xb4>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4a05      	ldr	r2, [pc, #20]	; (8004550 <vTaskSwitchContext+0xac>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6013      	str	r3, [r2, #0]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	20000cf8 	.word	0x20000cf8
 800454c:	20000ce4 	.word	0x20000ce4
 8004550:	20000cd8 	.word	0x20000cd8
 8004554:	20000800 	.word	0x20000800
 8004558:	200007fc 	.word	0x200007fc

0800455c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	60fb      	str	r3, [r7, #12]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <vTaskPlaceOnEventList+0x44>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3318      	adds	r3, #24
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fcb4 	bl	8002ef8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004590:	2101      	movs	r1, #1
 8004592:	6838      	ldr	r0, [r7, #0]
 8004594:	f000 fb96 	bl	8004cc4 <prvAddCurrentTaskToDelayedList>
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200007fc 	.word	0x200007fc

080045a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	617b      	str	r3, [r7, #20]
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3318      	adds	r3, #24
 80045d2:	4619      	mov	r1, r3
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7fe fc6c 	bl	8002eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295
 80045e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f000 fb6b 	bl	8004cc4 <prvAddCurrentTaskToDelayedList>
	}
 80045ee:	bf00      	nop
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200007fc 	.word	0x200007fc

080045fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60fb      	str	r3, [r7, #12]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3318      	adds	r3, #24
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fc9b 	bl	8002f68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004632:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <xTaskRemoveFromEventList+0xb0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11d      	bne.n	8004676 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fc92 	bl	8002f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <xTaskRemoveFromEventList+0xb4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d903      	bls.n	8004658 <xTaskRemoveFromEventList+0x5c>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <xTaskRemoveFromEventList+0xb4>)
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <xTaskRemoveFromEventList+0xb8>)
 8004666:	441a      	add	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f7fe fc1f 	bl	8002eb2 <vListInsertEnd>
 8004674:	e005      	b.n	8004682 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3318      	adds	r3, #24
 800467a:	4619      	mov	r1, r3
 800467c:	480e      	ldr	r0, [pc, #56]	; (80046b8 <xTaskRemoveFromEventList+0xbc>)
 800467e:	f7fe fc18 	bl	8002eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <xTaskRemoveFromEventList+0xc0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	429a      	cmp	r2, r3
 800468e:	d905      	bls.n	800469c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <xTaskRemoveFromEventList+0xc4>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e001      	b.n	80046a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046a0:	697b      	ldr	r3, [r7, #20]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000cf8 	.word	0x20000cf8
 80046b0:	20000cd8 	.word	0x20000cd8
 80046b4:	20000800 	.word	0x20000800
 80046b8:	20000c90 	.word	0x20000c90
 80046bc:	200007fc 	.word	0x200007fc
 80046c0:	20000ce4 	.word	0x20000ce4

080046c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <vTaskInternalSetTimeOutState+0x24>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <vTaskInternalSetTimeOutState+0x28>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	605a      	str	r2, [r3, #4]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000ce8 	.word	0x20000ce8
 80046ec:	20000cd4 	.word	0x20000cd4

080046f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	613b      	str	r3, [r7, #16]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004732:	f000 ff1b 	bl	800556c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <xTaskCheckForTimeOut+0xbc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d102      	bne.n	8004756 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e023      	b.n	800479e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <xTaskCheckForTimeOut+0xc0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d007      	beq.n	8004772 <xTaskCheckForTimeOut+0x82>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	429a      	cmp	r2, r3
 800476a:	d302      	bcc.n	8004772 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e015      	b.n	800479e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	d20b      	bcs.n	8004794 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff9b 	bl	80046c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e004      	b.n	800479e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800479e:	f000 ff15 	bl	80055cc <vPortExitCritical>

	return xReturn;
 80047a2:	69fb      	ldr	r3, [r7, #28]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000cd4 	.word	0x20000cd4
 80047b0:	20000ce8 	.word	0x20000ce8

080047b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <vTaskMissedYield+0x14>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000ce4 	.word	0x20000ce4

080047cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047d4:	f000 f852 	bl	800487c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <prvIdleTask+0x28>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d9f9      	bls.n	80047d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <prvIdleTask+0x2c>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047f0:	e7f0      	b.n	80047d4 <prvIdleTask+0x8>
 80047f2:	bf00      	nop
 80047f4:	20000800 	.word	0x20000800
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	e00c      	b.n	8004822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4a12      	ldr	r2, [pc, #72]	; (800485c <prvInitialiseTaskLists+0x60>)
 8004814:	4413      	add	r3, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fb20 	bl	8002e5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3301      	adds	r3, #1
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b37      	cmp	r3, #55	; 0x37
 8004826:	d9ef      	bls.n	8004808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004828:	480d      	ldr	r0, [pc, #52]	; (8004860 <prvInitialiseTaskLists+0x64>)
 800482a:	f7fe fb17 	bl	8002e5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800482e:	480d      	ldr	r0, [pc, #52]	; (8004864 <prvInitialiseTaskLists+0x68>)
 8004830:	f7fe fb14 	bl	8002e5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004834:	480c      	ldr	r0, [pc, #48]	; (8004868 <prvInitialiseTaskLists+0x6c>)
 8004836:	f7fe fb11 	bl	8002e5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800483a:	480c      	ldr	r0, [pc, #48]	; (800486c <prvInitialiseTaskLists+0x70>)
 800483c:	f7fe fb0e 	bl	8002e5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004840:	480b      	ldr	r0, [pc, #44]	; (8004870 <prvInitialiseTaskLists+0x74>)
 8004842:	f7fe fb0b 	bl	8002e5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <prvInitialiseTaskLists+0x78>)
 8004848:	4a05      	ldr	r2, [pc, #20]	; (8004860 <prvInitialiseTaskLists+0x64>)
 800484a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <prvInitialiseTaskLists+0x7c>)
 800484e:	4a05      	ldr	r2, [pc, #20]	; (8004864 <prvInitialiseTaskLists+0x68>)
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000800 	.word	0x20000800
 8004860:	20000c60 	.word	0x20000c60
 8004864:	20000c74 	.word	0x20000c74
 8004868:	20000c90 	.word	0x20000c90
 800486c:	20000ca4 	.word	0x20000ca4
 8004870:	20000cbc 	.word	0x20000cbc
 8004874:	20000c88 	.word	0x20000c88
 8004878:	20000c8c 	.word	0x20000c8c

0800487c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004882:	e019      	b.n	80048b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004884:	f000 fe72 	bl	800556c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <prvCheckTasksWaitingTermination+0x50>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fb67 	bl	8002f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <prvCheckTasksWaitingTermination+0x54>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <prvCheckTasksWaitingTermination+0x54>)
 80048a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <prvCheckTasksWaitingTermination+0x58>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <prvCheckTasksWaitingTermination+0x58>)
 80048ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048ae:	f000 fe8d 	bl	80055cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f810 	bl	80048d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <prvCheckTasksWaitingTermination+0x58>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e1      	bne.n	8004884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000ca4 	.word	0x20000ca4
 80048d0:	20000cd0 	.word	0x20000cd0
 80048d4:	20000cb8 	.word	0x20000cb8

080048d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f800 	bl	80058f4 <vPortFree>
				vPortFree( pxTCB );
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fffd 	bl	80058f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048fa:	e018      	b.n	800492e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004902:	2b01      	cmp	r3, #1
 8004904:	d103      	bne.n	800490e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fff4 	bl	80058f4 <vPortFree>
	}
 800490c:	e00f      	b.n	800492e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004914:	2b02      	cmp	r3, #2
 8004916:	d00a      	beq.n	800492e <prvDeleteTCB+0x56>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <prvDeleteTCB+0x54>
	}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <prvResetNextTaskUnblockTime+0x40>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <prvResetNextTaskUnblockTime+0x14>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <prvResetNextTaskUnblockTime+0x16>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <prvResetNextTaskUnblockTime+0x44>)
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800495a:	e008      	b.n	800496e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <prvResetNextTaskUnblockTime+0x40>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a04      	ldr	r2, [pc, #16]	; (800497c <prvResetNextTaskUnblockTime+0x44>)
 800496c:	6013      	str	r3, [r2, #0]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	20000c88 	.word	0x20000c88
 800497c:	20000cf0 	.word	0x20000cf0

08004980 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004986:	4b04      	ldr	r3, [pc, #16]	; (8004998 <xTaskGetCurrentTaskHandle+0x18>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800498c:	687b      	ldr	r3, [r7, #4]
	}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	200007fc 	.word	0x200007fc

0800499c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <xTaskGetSchedulerState+0x34>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049aa:	2301      	movs	r3, #1
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	e008      	b.n	80049c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <xTaskGetSchedulerState+0x38>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049b8:	2302      	movs	r3, #2
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	e001      	b.n	80049c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049c2:	687b      	ldr	r3, [r7, #4]
	}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000cdc 	.word	0x20000cdc
 80049d4:	20000cf8 	.word	0x20000cf8

080049d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d056      	beq.n	8004a9c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <xTaskPriorityInherit+0xd0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d246      	bcs.n	8004a8a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db06      	blt.n	8004a12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <xTaskPriorityInherit+0xd0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6959      	ldr	r1, [r3, #20]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4a22      	ldr	r2, [pc, #136]	; (8004aac <xTaskPriorityInherit+0xd4>)
 8004a24:	4413      	add	r3, r2
 8004a26:	4299      	cmp	r1, r3
 8004a28:	d101      	bne.n	8004a2e <xTaskPriorityInherit+0x56>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <xTaskPriorityInherit+0x58>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d022      	beq.n	8004a7a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fa95 	bl	8002f68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <xTaskPriorityInherit+0xd0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <xTaskPriorityInherit+0xd8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d903      	bls.n	8004a5c <xTaskPriorityInherit+0x84>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <xTaskPriorityInherit+0xd8>)
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4a10      	ldr	r2, [pc, #64]	; (8004aac <xTaskPriorityInherit+0xd4>)
 8004a6a:	441a      	add	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f7fe fa1d 	bl	8002eb2 <vListInsertEnd>
 8004a78:	e004      	b.n	8004a84 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <xTaskPriorityInherit+0xd0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e008      	b.n	8004a9c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <xTaskPriorityInherit+0xd0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d201      	bcs.n	8004a9c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
	}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200007fc 	.word	0x200007fc
 8004aac:	20000800 	.word	0x20000800
 8004ab0:	20000cd8 	.word	0x20000cd8

08004ab4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d056      	beq.n	8004b78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aca:	4b2e      	ldr	r3, [pc, #184]	; (8004b84 <xTaskPriorityDisinherit+0xd0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d00a      	beq.n	8004aea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60fb      	str	r3, [r7, #12]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60bb      	str	r3, [r7, #8]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0c:	1e5a      	subs	r2, r3, #1
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d02c      	beq.n	8004b78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d128      	bne.n	8004b78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fa1c 	bl	8002f68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <xTaskPriorityDisinherit+0xd4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskPriorityDisinherit+0xa4>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <xTaskPriorityDisinherit+0xd4>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <xTaskPriorityDisinherit+0xd8>)
 8004b66:	441a      	add	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fe f99f 	bl	8002eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b78:	697b      	ldr	r3, [r7, #20]
	}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200007fc 	.word	0x200007fc
 8004b88:	20000cd8 	.word	0x20000cd8
 8004b8c:	20000800 	.word	0x20000800

08004b90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d06f      	beq.n	8004c88 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d902      	bls.n	8004bd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	e002      	b.n	8004bdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d050      	beq.n	8004c88 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d14b      	bne.n	8004c88 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d10a      	bne.n	8004c10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db04      	blt.n	8004c2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	6959      	ldr	r1, [r3, #20]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	4299      	cmp	r1, r3
 8004c42:	d101      	bne.n	8004c48 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01c      	beq.n	8004c88 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe f988 	bl	8002f68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a06      	ldr	r2, [pc, #24]	; (8004c94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c7a:	441a      	add	r2, r3
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe f915 	bl	8002eb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c88:	bf00      	nop
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200007fc 	.word	0x200007fc
 8004c94:	20000800 	.word	0x20000800
 8004c98:	20000cd8 	.word	0x20000cd8

08004c9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cae:	3201      	adds	r2, #1
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004cb2:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
	}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	200007fc 	.word	0x200007fc

08004cc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe f944 	bl	8002f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d10a      	bne.n	8004cfe <prvAddCurrentTaskToDelayedList+0x3a>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cee:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4819      	ldr	r0, [pc, #100]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x98>)
 8004cf8:	f7fe f8db 	bl	8002eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cfc:	e026      	b.n	8004d4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d209      	bcs.n	8004d2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7fe f8e8 	bl	8002ef8 <vListInsert>
}
 8004d28:	e010      	b.n	8004d4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fe f8de 	bl	8002ef8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d202      	bcs.n	8004d4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6013      	str	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000cd4 	.word	0x20000cd4
 8004d58:	200007fc 	.word	0x200007fc
 8004d5c:	20000cbc 	.word	0x20000cbc
 8004d60:	20000c8c 	.word	0x20000c8c
 8004d64:	20000c88 	.word	0x20000c88
 8004d68:	20000cf0 	.word	0x20000cf0

08004d6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d76:	f000 facb 	bl	8005310 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <xTimerCreateTimerTask+0x80>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d021      	beq.n	8004dc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d8a:	1d3a      	adds	r2, r7, #4
 8004d8c:	f107 0108 	add.w	r1, r7, #8
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe f847 	bl	8002e28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	9202      	str	r2, [sp, #8]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	2302      	movs	r3, #2
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	460a      	mov	r2, r1
 8004dac:	4910      	ldr	r1, [pc, #64]	; (8004df0 <xTimerCreateTimerTask+0x84>)
 8004dae:	4811      	ldr	r0, [pc, #68]	; (8004df4 <xTimerCreateTimerTask+0x88>)
 8004db0:	f7ff f802 	bl	8003db8 <xTaskCreateStatic>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <xTimerCreateTimerTask+0x8c>)
 8004db8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <xTimerCreateTimerTask+0x8c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	613b      	str	r3, [r7, #16]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000d2c 	.word	0x20000d2c
 8004df0:	08005c00 	.word	0x08005c00
 8004df4:	08004f19 	.word	0x08004f19
 8004df8:	20000d30 	.word	0x20000d30

08004dfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	623b      	str	r3, [r7, #32]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e2a:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <xTimerGenericCommand+0x98>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d02a      	beq.n	8004e88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b05      	cmp	r3, #5
 8004e42:	dc18      	bgt.n	8004e76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e44:	f7ff fdaa 	bl	800499c <xTaskGetSchedulerState>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d109      	bne.n	8004e62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <xTimerGenericCommand+0x98>)
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	f107 0110 	add.w	r1, r7, #16
 8004e56:	2300      	movs	r3, #0
 8004e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5a:	f7fe faa7 	bl	80033ac <xQueueGenericSend>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8004e60:	e012      	b.n	8004e88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <xTimerGenericCommand+0x98>)
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f107 0110 	add.w	r1, r7, #16
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f7fe fa9d 	bl	80033ac <xQueueGenericSend>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24
 8004e74:	e008      	b.n	8004e88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <xTimerGenericCommand+0x98>)
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	f107 0110 	add.w	r1, r7, #16
 8004e7e:	2300      	movs	r3, #0
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	f7fe fb91 	bl	80035a8 <xQueueGenericSendFromISR>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3728      	adds	r7, #40	; 0x28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000d2c 	.word	0x20000d2c

08004e98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <prvProcessExpiredTimer+0x7c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe f859 	bl	8002f68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d122      	bne.n	8004f04 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	18d1      	adds	r1, r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f000 f8c8 	bl	8005060 <prvInsertTimerInActiveList>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	6978      	ldr	r0, [r7, #20]
 8004ee2:	f7ff ff8b 	bl	8004dfc <xTimerGenericCommand>
 8004ee6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60fb      	str	r3, [r7, #12]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	6978      	ldr	r0, [r7, #20]
 8004f0a:	4798      	blx	r3
}
 8004f0c:	bf00      	nop
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000d24 	.word	0x20000d24

08004f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 f857 	bl	8004fd8 <prvGetNextExpireTime>
 8004f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f803 	bl	8004f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f36:	f000 f8d5 	bl	80050e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f3a:	e7f1      	b.n	8004f20 <prvTimerTask+0x8>

08004f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f46:	f7ff f935 	bl	80041b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f4a:	f107 0308 	add.w	r3, r7, #8
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f866 	bl	8005020 <prvSampleTimeNow>
 8004f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d130      	bne.n	8004fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <prvProcessTimerOrBlockTask+0x3c>
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d806      	bhi.n	8004f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f6a:	f7ff f931 	bl	80041d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ff91 	bl	8004e98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f76:	e024      	b.n	8004fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <prvProcessTimerOrBlockTask+0x90>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <prvProcessTimerOrBlockTask+0x94>)
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f7fe fed7 	bl	8003d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fa2:	f7ff f915 	bl	80041d0 <xTaskResumeAll>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <prvProcessTimerOrBlockTask+0x98>)
 8004fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	f3bf 8f6f 	isb	sy
}
 8004fbc:	e001      	b.n	8004fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fbe:	f7ff f907 	bl	80041d0 <xTaskResumeAll>
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000d28 	.word	0x20000d28
 8004fd0:	20000d2c 	.word	0x20000d2c
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <prvGetNextExpireTime+0x44>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d105      	bne.n	800500a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <prvGetNextExpireTime+0x44>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e001      	b.n	800500e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000d24 	.word	0x20000d24

08005020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005028:	f7ff f970 	bl	800430c <xTaskGetTickCount>
 800502c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <prvSampleTimeNow+0x3c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d205      	bcs.n	8005044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005038:	f000 f908 	bl	800524c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e002      	b.n	800504a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800504a:	4a04      	ldr	r2, [pc, #16]	; (800505c <prvSampleTimeNow+0x3c>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000d34 	.word	0x20000d34

08005060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d812      	bhi.n	80050ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	1ad2      	subs	r2, r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e01b      	b.n	80050d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <prvInsertTimerInActiveList+0x7c>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fd ff27 	bl	8002ef8 <vListInsert>
 80050aa:	e012      	b.n	80050d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d206      	bcs.n	80050c2 <prvInsertTimerInActiveList+0x62>
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	e007      	b.n	80050d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <prvInsertTimerInActiveList+0x80>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fd ff13 	bl	8002ef8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050d2:	697b      	ldr	r3, [r7, #20]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000d28 	.word	0x20000d28
 80050e0:	20000d24 	.word	0x20000d24

080050e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08e      	sub	sp, #56	; 0x38
 80050e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ea:	e09d      	b.n	8005228 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	da18      	bge.n	8005124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	3304      	adds	r3, #4
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	61fb      	str	r3, [r7, #28]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511a:	6850      	ldr	r0, [r2, #4]
 800511c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511e:	6892      	ldr	r2, [r2, #8]
 8005120:	4611      	mov	r1, r2
 8005122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db7e      	blt.n	8005228 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	3304      	adds	r3, #4
 800513a:	4618      	mov	r0, r3
 800513c:	f7fd ff14 	bl	8002f68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005140:	463b      	mov	r3, r7
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ff6c 	bl	8005020 <prvSampleTimeNow>
 8005148:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b09      	cmp	r3, #9
 800514e:	d86a      	bhi.n	8005226 <prvProcessReceivedCommands+0x142>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <prvProcessReceivedCommands+0x74>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005181 	.word	0x08005181
 800515c:	08005181 	.word	0x08005181
 8005160:	08005181 	.word	0x08005181
 8005164:	08005229 	.word	0x08005229
 8005168:	080051dd 	.word	0x080051dd
 800516c:	08005215 	.word	0x08005215
 8005170:	08005181 	.word	0x08005181
 8005174:	08005181 	.word	0x08005181
 8005178:	08005229 	.word	0x08005229
 800517c:	080051dd 	.word	0x080051dd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	18d1      	adds	r1, r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518e:	f7ff ff67 	bl	8005060 <prvInsertTimerInActiveList>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d047      	beq.n	8005228 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800519e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d13f      	bne.n	8005228 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	441a      	add	r2, r3
 80051b0:	2300      	movs	r3, #0
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	2100      	movs	r1, #0
 80051b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ba:	f7ff fe1f 	bl	8004dfc <xTimerGenericCommand>
 80051be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d130      	bne.n	8005228 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	61bb      	str	r3, [r7, #24]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	617b      	str	r3, [r7, #20]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	18d1      	adds	r1, r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800520e:	f7ff ff27 	bl	8005060 <prvInsertTimerInActiveList>
					break;
 8005212:	e009      	b.n	8005228 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800521e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005220:	f000 fb68 	bl	80058f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005224:	e000      	b.n	8005228 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005226:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <prvProcessReceivedCommands+0x164>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	1d39      	adds	r1, r7, #4
 800522e:	2200      	movs	r2, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fa51 	bl	80036d8 <xQueueReceive>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af57 	bne.w	80050ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	3730      	adds	r7, #48	; 0x30
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000d2c 	.word	0x20000d2c

0800524c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005252:	e045      	b.n	80052e0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005254:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <prvSwitchTimerLists+0xbc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <prvSwitchTimerLists+0xbc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3304      	adds	r3, #4
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd fe7b 	bl	8002f68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d12e      	bne.n	80052e0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d90e      	bls.n	80052b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <prvSwitchTimerLists+0xbc>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fd fe24 	bl	8002ef8 <vListInsert>
 80052b0:	e016      	b.n	80052e0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052b2:	2300      	movs	r3, #0
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	2100      	movs	r1, #0
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff fd9d 	bl	8004dfc <xTimerGenericCommand>
 80052c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	603b      	str	r3, [r7, #0]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <prvSwitchTimerLists+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1b4      	bne.n	8005254 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <prvSwitchTimerLists+0xbc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <prvSwitchTimerLists+0xc0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a04      	ldr	r2, [pc, #16]	; (8005308 <prvSwitchTimerLists+0xbc>)
 80052f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <prvSwitchTimerLists+0xc0>)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6013      	str	r3, [r2, #0]
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000d24 	.word	0x20000d24
 800530c:	20000d28 	.word	0x20000d28

08005310 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005316:	f000 f929 	bl	800556c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <prvCheckForValidListAndQueue+0x60>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d120      	bne.n	8005364 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005322:	4814      	ldr	r0, [pc, #80]	; (8005374 <prvCheckForValidListAndQueue+0x64>)
 8005324:	f7fd fd9a 	bl	8002e5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005328:	4813      	ldr	r0, [pc, #76]	; (8005378 <prvCheckForValidListAndQueue+0x68>)
 800532a:	f7fd fd97 	bl	8002e5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <prvCheckForValidListAndQueue+0x6c>)
 8005330:	4a10      	ldr	r2, [pc, #64]	; (8005374 <prvCheckForValidListAndQueue+0x64>)
 8005332:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005334:	4b12      	ldr	r3, [pc, #72]	; (8005380 <prvCheckForValidListAndQueue+0x70>)
 8005336:	4a10      	ldr	r2, [pc, #64]	; (8005378 <prvCheckForValidListAndQueue+0x68>)
 8005338:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800533a:	2300      	movs	r3, #0
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <prvCheckForValidListAndQueue+0x74>)
 8005340:	4a11      	ldr	r2, [pc, #68]	; (8005388 <prvCheckForValidListAndQueue+0x78>)
 8005342:	2110      	movs	r1, #16
 8005344:	200a      	movs	r0, #10
 8005346:	f7fd fea1 	bl	800308c <xQueueGenericCreateStatic>
 800534a:	4603      	mov	r3, r0
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <prvCheckForValidListAndQueue+0x60>)
 800534e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <prvCheckForValidListAndQueue+0x60>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <prvCheckForValidListAndQueue+0x60>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	490b      	ldr	r1, [pc, #44]	; (800538c <prvCheckForValidListAndQueue+0x7c>)
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fcce 	bl	8003d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005364:	f000 f932 	bl	80055cc <vPortExitCritical>
}
 8005368:	bf00      	nop
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000d2c 	.word	0x20000d2c
 8005374:	20000cfc 	.word	0x20000cfc
 8005378:	20000d10 	.word	0x20000d10
 800537c:	20000d24 	.word	0x20000d24
 8005380:	20000d28 	.word	0x20000d28
 8005384:	20000dd8 	.word	0x20000dd8
 8005388:	20000d38 	.word	0x20000d38
 800538c:	08005c08 	.word	0x08005c08

08005390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3b04      	subs	r3, #4
 80053a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3b04      	subs	r3, #4
 80053ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3b04      	subs	r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <pxPortInitialiseStack+0x54>)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3b14      	subs	r3, #20
 80053ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b20      	subs	r3, #32
 80053d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053d8:	68fb      	ldr	r3, [r7, #12]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	080053e9 	.word	0x080053e9

080053e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053f2:	4b12      	ldr	r3, [pc, #72]	; (800543c <prvTaskExitError+0x54>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d00a      	beq.n	8005412 <prvTaskExitError+0x2a>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60fb      	str	r3, [r7, #12]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <prvTaskExitError+0x28>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60bb      	str	r3, [r7, #8]
}
 8005424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005426:	bf00      	nop
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0fc      	beq.n	8005428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c

08005440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <pxCurrentTCBConst2>)
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	6808      	ldr	r0, [r1, #0]
 8005446:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800544a:	f380 8809 	msr	PSP, r0
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f380 8811 	msr	BASEPRI, r0
 800545a:	f04e 0e0d 	orr.w	lr, lr, #13
 800545e:	4770      	bx	lr

08005460 <pxCurrentTCBConst2>:
 8005460:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005468:	4806      	ldr	r0, [pc, #24]	; (8005484 <prvPortStartFirstTask+0x1c>)
 800546a:	6800      	ldr	r0, [r0, #0]
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f380 8808 	msr	MSP, r0
 8005472:	b662      	cpsie	i
 8005474:	b661      	cpsie	f
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	df00      	svc	0
 8005480:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005482:	bf00      	nop
 8005484:	e000ed08 	.word	0xe000ed08

08005488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800548e:	4b32      	ldr	r3, [pc, #200]	; (8005558 <xPortStartScheduler+0xd0>)
 8005490:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	22ff      	movs	r2, #255	; 0xff
 800549e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4b2a      	ldr	r3, [pc, #168]	; (800555c <xPortStartScheduler+0xd4>)
 80054b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054b6:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <xPortStartScheduler+0xd8>)
 80054b8:	2207      	movs	r2, #7
 80054ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054bc:	e009      	b.n	80054d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80054be:	4b28      	ldr	r3, [pc, #160]	; (8005560 <xPortStartScheduler+0xd8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	4a26      	ldr	r2, [pc, #152]	; (8005560 <xPortStartScheduler+0xd8>)
 80054c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d0ef      	beq.n	80054be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054de:	4b20      	ldr	r3, [pc, #128]	; (8005560 <xPortStartScheduler+0xd8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1c3 0307 	rsb	r3, r3, #7
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d00a      	beq.n	8005500 <xPortStartScheduler+0x78>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	60bb      	str	r3, [r7, #8]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <xPortStartScheduler+0xd8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	4a16      	ldr	r2, [pc, #88]	; (8005560 <xPortStartScheduler+0xd8>)
 8005508:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <xPortStartScheduler+0xd8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <xPortStartScheduler+0xd8>)
 8005514:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <xPortStartScheduler+0xdc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <xPortStartScheduler+0xdc>)
 8005524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005528:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <xPortStartScheduler+0xdc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a0d      	ldr	r2, [pc, #52]	; (8005564 <xPortStartScheduler+0xdc>)
 8005530:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005534:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005536:	f000 f8b9 	bl	80056ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <xPortStartScheduler+0xe0>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005540:	f7ff ff92 	bl	8005468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005544:	f7fe ffae 	bl	80044a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005548:	f7ff ff4e 	bl	80053e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	e000e400 	.word	0xe000e400
 800555c:	20000e28 	.word	0x20000e28
 8005560:	20000e2c 	.word	0x20000e2c
 8005564:	e000ed20 	.word	0xe000ed20
 8005568:	2000000c 	.word	0x2000000c

0800556c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	607b      	str	r3, [r7, #4]
}
 8005584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <vPortEnterCritical+0x58>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <vPortEnterCritical+0x58>)
 800558e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <vPortEnterCritical+0x58>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d10f      	bne.n	80055b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <vPortEnterCritical+0x5c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	603b      	str	r3, [r7, #0]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vPortEnterCritical+0x4a>
	}
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	2000000c 	.word	0x2000000c
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <vPortExitCritical+0x4c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <vPortExitCritical+0x24>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	607b      	str	r3, [r7, #4]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <vPortExitCritical+0x4c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	4a08      	ldr	r2, [pc, #32]	; (8005618 <vPortExitCritical+0x4c>)
 80055f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <vPortExitCritical+0x4c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d105      	bne.n	800560e <vPortExitCritical+0x42>
 8005602:	2300      	movs	r3, #0
 8005604:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f383 8811 	msr	BASEPRI, r3
}
 800560c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	2000000c 	.word	0x2000000c
 800561c:	00000000 	.word	0x00000000

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005630:	6010      	str	r0, [r2, #0]
 8005632:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005636:	f04f 0050 	mov.w	r0, #80	; 0x50
 800563a:	f380 8811 	msr	BASEPRI, r0
 800563e:	f7fe ff31 	bl	80044a4 <vTaskSwitchContext>
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8811 	msr	BASEPRI, r0
 800564a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005656:	f380 8809 	msr	PSP, r0
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	4770      	bx	lr

08005660 <pxCurrentTCBConst>:
 8005660:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
}
 8005680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005682:	f7fe fe51 	bl	8004328 <xTaskIncrementTick>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <xPortSysTickHandler+0x40>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <vPortSetupTimerInterrupt+0x30>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <vPortSetupTimerInterrupt+0x38>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <vPortSetupTimerInterrupt+0x3c>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	4a08      	ldr	r2, [pc, #32]	; (80056ec <vPortSetupTimerInterrupt+0x40>)
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ce:	4b03      	ldr	r3, [pc, #12]	; (80056dc <vPortSetupTimerInterrupt+0x30>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	e000e010 	.word	0xe000e010
 80056e0:	e000e018 	.word	0xe000e018
 80056e4:	20000000 	.word	0x20000000
 80056e8:	10624dd3 	.word	0x10624dd3
 80056ec:	e000e014 	.word	0xe000e014

080056f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056f6:	f3ef 8305 	mrs	r3, IPSR
 80056fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d914      	bls.n	800572c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005702:	4a16      	ldr	r2, [pc, #88]	; (800575c <vPortValidateInterruptPriority+0x6c>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800570c:	4b14      	ldr	r3, [pc, #80]	; (8005760 <vPortValidateInterruptPriority+0x70>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	7afa      	ldrb	r2, [r7, #11]
 8005712:	429a      	cmp	r2, r3
 8005714:	d20a      	bcs.n	800572c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	607b      	str	r3, [r7, #4]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800572c:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <vPortValidateInterruptPriority+0x74>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <vPortValidateInterruptPriority+0x78>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d90a      	bls.n	8005752 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	603b      	str	r3, [r7, #0]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <vPortValidateInterruptPriority+0x60>
	}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr
 800575c:	e000e3f0 	.word	0xe000e3f0
 8005760:	20000e28 	.word	0x20000e28
 8005764:	e000ed0c 	.word	0xe000ed0c
 8005768:	20000e2c 	.word	0x20000e2c

0800576c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005778:	f7fe fd1c 	bl	80041b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800577c:	4b58      	ldr	r3, [pc, #352]	; (80058e0 <pvPortMalloc+0x174>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005784:	f000 f910 	bl	80059a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005788:	4b56      	ldr	r3, [pc, #344]	; (80058e4 <pvPortMalloc+0x178>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 808e 	bne.w	80058b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01d      	beq.n	80057d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800579c:	2208      	movs	r2, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d014      	beq.n	80057d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	3308      	adds	r3, #8
 80057b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <pvPortMalloc+0x6c>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	617b      	str	r3, [r7, #20]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d069      	beq.n	80058b2 <pvPortMalloc+0x146>
 80057de:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <pvPortMalloc+0x17c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d864      	bhi.n	80058b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057e8:	4b40      	ldr	r3, [pc, #256]	; (80058ec <pvPortMalloc+0x180>)
 80057ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057ec:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <pvPortMalloc+0x180>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f2:	e004      	b.n	80057fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <pvPortMalloc+0xa4>
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f1      	bne.n	80057f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005810:	4b33      	ldr	r3, [pc, #204]	; (80058e0 <pvPortMalloc+0x174>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005816:	429a      	cmp	r2, r3
 8005818:	d04b      	beq.n	80058b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2208      	movs	r2, #8
 8005820:	4413      	add	r3, r2
 8005822:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1ad2      	subs	r2, r2, r3
 8005834:	2308      	movs	r3, #8
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	429a      	cmp	r2, r3
 800583a:	d91f      	bls.n	800587c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <pvPortMalloc+0xf8>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	613b      	str	r3, [r7, #16]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005876:	69b8      	ldr	r0, [r7, #24]
 8005878:	f000 f8f8 	bl	8005a6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800587c:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <pvPortMalloc+0x17c>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <pvPortMalloc+0x17c>)
 8005888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <pvPortMalloc+0x17c>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <pvPortMalloc+0x184>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d203      	bcs.n	800589e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <pvPortMalloc+0x17c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <pvPortMalloc+0x184>)
 800589c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <pvPortMalloc+0x178>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058b2:	f7fe fc8d 	bl	80041d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <pvPortMalloc+0x16a>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	60fb      	str	r3, [r7, #12]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <pvPortMalloc+0x168>
	return pvReturn;
 80058d6:	69fb      	ldr	r3, [r7, #28]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20001a38 	.word	0x20001a38
 80058e4:	20001a44 	.word	0x20001a44
 80058e8:	20001a3c 	.word	0x20001a3c
 80058ec:	20001a30 	.word	0x20001a30
 80058f0:	20001a40 	.word	0x20001a40

080058f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d048      	beq.n	8005998 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005906:	2308      	movs	r3, #8
 8005908:	425b      	negs	r3, r3
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4413      	add	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	4b21      	ldr	r3, [pc, #132]	; (80059a0 <vPortFree+0xac>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <vPortFree+0x44>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <vPortFree+0x62>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60bb      	str	r3, [r7, #8]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <vPortFree+0xac>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d019      	beq.n	8005998 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d115      	bne.n	8005998 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <vPortFree+0xac>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800597c:	f7fe fc1a 	bl	80041b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <vPortFree+0xb0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4413      	add	r3, r2
 800598a:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <vPortFree+0xb0>)
 800598c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	f000 f86c 	bl	8005a6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005994:	f7fe fc1c 	bl	80041d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005998:	bf00      	nop
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20001a44 	.word	0x20001a44
 80059a4:	20001a3c 	.word	0x20001a3c

080059a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059b4:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <prvHeapInit+0xac>)
 80059b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3307      	adds	r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <prvHeapInit+0xac>)
 80059d8:	4413      	add	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059e0:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <prvHeapInit+0xb0>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059e6:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <prvHeapInit+0xb0>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059f4:	2208      	movs	r2, #8
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <prvHeapInit+0xb4>)
 8005a08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <prvHeapInit+0xb4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <prvHeapInit+0xb4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <prvHeapInit+0xb4>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <prvHeapInit+0xb8>)
 8005a36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <prvHeapInit+0xbc>)
 8005a3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <prvHeapInit+0xc0>)
 8005a42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000e30 	.word	0x20000e30
 8005a58:	20001a30 	.word	0x20001a30
 8005a5c:	20001a38 	.word	0x20001a38
 8005a60:	20001a40 	.word	0x20001a40
 8005a64:	20001a3c 	.word	0x20001a3c
 8005a68:	20001a44 	.word	0x20001a44

08005a6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <prvInsertBlockIntoFreeList+0xa8>)
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e002      	b.n	8005a80 <prvInsertBlockIntoFreeList+0x14>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d8f7      	bhi.n	8005a7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d108      	bne.n	8005aae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	441a      	add	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d118      	bne.n	8005af4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <prvInsertBlockIntoFreeList+0xac>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d00d      	beq.n	8005aea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	441a      	add	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e008      	b.n	8005afc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <prvInsertBlockIntoFreeList+0xac>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e003      	b.n	8005afc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d002      	beq.n	8005b0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr
 8005b14:	20001a30 	.word	0x20001a30
 8005b18:	20001a38 	.word	0x20001a38

08005b1c <memset>:
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4402      	add	r2, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	2600      	movs	r6, #0
 8005b30:	4d0c      	ldr	r5, [pc, #48]	; (8005b64 <__libc_init_array+0x38>)
 8005b32:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	f000 f828 	bl	8005b90 <_init>
 8005b40:	2600      	movs	r6, #0
 8005b42:	4d0a      	ldr	r5, [pc, #40]	; (8005b6c <__libc_init_array+0x40>)
 8005b44:	4c0a      	ldr	r4, [pc, #40]	; (8005b70 <__libc_init_array+0x44>)
 8005b46:	1b64      	subs	r4, r4, r5
 8005b48:	10a4      	asrs	r4, r4, #2
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005ccc 	.word	0x08005ccc
 8005b68:	08005ccc 	.word	0x08005ccc
 8005b6c:	08005ccc 	.word	0x08005ccc
 8005b70:	08005cd0 	.word	0x08005cd0

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
