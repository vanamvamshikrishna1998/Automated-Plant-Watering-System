
Node 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004668  08004668  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004668  08004668  00005668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004670  08004670  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004678  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000010  08004688  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  08004688  000060e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca9  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eeb  00000000  00000000  00018ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e74  00000000  00000000  0001ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a11f  00000000  00000000  0001dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ba9  00000000  00000000  00037dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c5c  00000000  00000000  0004c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d74  00000000  00000000  000e6644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000eb3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080044a4 	.word	0x080044a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080044a4 	.word	0x080044a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000002c 	.word	0x2000002c
 800018c:	20000080 	.word	0x20000080

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b096      	sub	sp, #88	@ 0x58
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fcb9 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f84f 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f947 	bl	8000430 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001a2:	f000 f8a9 	bl	80002f8 <MX_ADC1_Init>
  MX_CAN_Init();
 80001a6:	f000 f8e5 	bl	8000374 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80001aa:	f000 f917 	bl	80003dc <MX_USART2_UART_Init>

  /* Create the thread(s) */
  /* definition and creation of sensorTask */
  /* Create the thread(s) */
  /* definition and creation of sensorTask */
  osThreadDef(moistureTask, StartMoistureTask, osPriorityNormal, 0, 256);
 80001ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000224 <main+0x94>)
 80001b0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001b4:	461d      	mov	r5, r3
 80001b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    moistureTaskHandle = osThreadCreate(osThread(moistureTask), NULL);
 80001c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001c6:	2100      	movs	r1, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 ff71 	bl	80030b0 <osThreadCreate>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a15      	ldr	r2, [pc, #84]	@ (8000228 <main+0x98>)
 80001d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of wateringTask */
    osThreadDef(wateringTask, StartWateringTask, osPriorityAboveNormal, 0, 256);
 80001d4:	4b15      	ldr	r3, [pc, #84]	@ (800022c <main+0x9c>)
 80001d6:	f107 0420 	add.w	r4, r7, #32
 80001da:	461d      	mov	r5, r3
 80001dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      wateringTaskHandle = osThreadCreate(osThread(wateringTask), NULL);
 80001e8:	f107 0320 	add.w	r3, r7, #32
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 ff5e 	bl	80030b0 <osThreadCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <main+0xa0>)
 80001f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTask */
      osThreadDef(canTask, StartCanTask, osPriorityBelowNormal, 0, 256);
 80001fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <main+0xa4>)
 80001fc:	1d3c      	adds	r4, r7, #4
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f002 ff4d 	bl	80030b0 <osThreadCreate>
 8000216:	4603      	mov	r3, r0
 8000218:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <main+0xa8>)
 800021a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800021c:	f002 ff41 	bl	80030a2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x90>
 8000224:	080044cc 	.word	0x080044cc
 8000228:	20000320 	.word	0x20000320
 800022c:	080044f8 	.word	0x080044f8
 8000230:	20000324 	.word	0x20000324
 8000234:	0800451c 	.word	0x0800451c
 8000238:	20000328 	.word	0x20000328

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	@ 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 f8fe 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000270:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000286:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000288:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fd02 	bl	8001c9c <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029e:	f000 fa61 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 ff6e 	bl	80021a0 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ca:	f000 fa4b 	bl	8000764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ce:	2302      	movs	r3, #2
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 f944 	bl	8002568 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002e6:	f000 fa3d 	bl	8000764 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002ea:	f002 f843 	bl	8002374 <HAL_RCC_EnableCSS>
}
 80002ee:	bf00      	nop
 80002f0:	3750      	adds	r7, #80	@ 0x50
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <MX_ADC1_Init+0x74>)
 800030a:	4a19      	ldr	r2, [pc, #100]	@ (8000370 <MX_ADC1_Init+0x78>)
 800030c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b17      	ldr	r3, [pc, #92]	@ (800036c <MX_ADC1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	@ (800036c <MX_ADC1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031a:	4b14      	ldr	r3, [pc, #80]	@ (800036c <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b12      	ldr	r3, [pc, #72]	@ (800036c <MX_ADC1_Init+0x74>)
 8000322:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000326:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000328:	4b10      	ldr	r3, [pc, #64]	@ (800036c <MX_ADC1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <MX_ADC1_Init+0x74>)
 8000330:	2201      	movs	r2, #1
 8000332:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000334:	480d      	ldr	r0, [pc, #52]	@ (800036c <MX_ADC1_Init+0x74>)
 8000336:	f000 fc3f 	bl	8000bb8 <HAL_ADC_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000340:	f000 fa10 	bl	8000764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000348:	2301      	movs	r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4619      	mov	r1, r3
 8000354:	4805      	ldr	r0, [pc, #20]	@ (800036c <MX_ADC1_Init+0x74>)
 8000356:	f000 fec7 	bl	80010e8 <HAL_ADC_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000360:	f000 fa00 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000280 	.word	0x20000280
 8000370:	40012400 	.word	0x40012400

08000374 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000378:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <MX_CAN_Init+0x60>)
 800037a:	4a17      	ldr	r2, [pc, #92]	@ (80003d8 <MX_CAN_Init+0x64>)
 800037c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000380:	2210      	movs	r2, #16
 8000382:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038a:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <MX_CAN_Init+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <MX_CAN_Init+0x60>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ba:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003bc:	2200      	movs	r2, #0
 80003be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003c2:	f001 f824 	bl	800140e <HAL_CAN_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f9ca 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200002b0 	.word	0x200002b0
 80003d8:	40006400 	.word	0x40006400

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	@ (800042c <MX_USART2_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_USART2_UART_Init+0x4c>)
 8000414:	f002 fc5e 	bl	8002cd4 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f9a1 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200002d8 	.word	0x200002d8
 800042c:	40004400 	.word	0x40004400

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a26      	ldr	r2, [pc, #152]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_GPIO_Init+0xb4>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000492:	4815      	ldr	r0, [pc, #84]	@ (80004e8 <MX_GPIO_Init+0xb8>)
 8000494:	f001 fbea 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2102      	movs	r1, #2
 800049c:	4813      	ldr	r0, [pc, #76]	@ (80004ec <MX_GPIO_Init+0xbc>)
 800049e:	f001 fbe5 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <MX_GPIO_Init+0xb8>)
 80004bc:	f001 fa52 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004c0:	2302      	movs	r3, #2
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <MX_GPIO_Init+0xbc>)
 80004d8:	f001 fa44 	bl	8001964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40010800 	.word	0x40010800

080004f0 <StartMoistureTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensorTask */
void StartMoistureTask(const void *argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  char *str = "Moisture Task Started\n";
 80004f8:	4b25      	ldr	r3, [pc, #148]	@ (8000590 <StartMoistureTask+0xa0>)
 80004fa:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80004fc:	68f8      	ldr	r0, [r7, #12]
 80004fe:	f7ff fe27 	bl	8000150 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	68f9      	ldr	r1, [r7, #12]
 800050c:	4821      	ldr	r0, [pc, #132]	@ (8000594 <StartMoistureTask+0xa4>)
 800050e:	f002 fc31 	bl	8002d74 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8000512:	4821      	ldr	r0, [pc, #132]	@ (8000598 <StartMoistureTask+0xa8>)
 8000514:	f000 fc28 	bl	8000d68 <HAL_ADC_Start>
	  str = "ADC Conversion Started\n";
 8000518:	4b20      	ldr	r3, [pc, #128]	@ (800059c <StartMoistureTask+0xac>)
 800051a:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800051c:	68f8      	ldr	r0, [r7, #12]
 800051e:	f7ff fe17 	bl	8000150 <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b29a      	uxth	r2, r3
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	68f9      	ldr	r1, [r7, #12]
 800052c:	4819      	ldr	r0, [pc, #100]	@ (8000594 <StartMoistureTask+0xa4>)
 800052e:	f002 fc21 	bl	8002d74 <HAL_UART_Transmit>
	  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000532:	f04f 31ff 	mov.w	r1, #4294967295
 8000536:	4818      	ldr	r0, [pc, #96]	@ (8000598 <StartMoistureTask+0xa8>)
 8000538:	f000 fcc4 	bl	8000ec4 <HAL_ADC_PollForConversion>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d107      	bne.n	8000552 <StartMoistureTask+0x62>
		  moisture_level = HAL_ADC_GetValue(&hadc1);
 8000542:	4815      	ldr	r0, [pc, #84]	@ (8000598 <StartMoistureTask+0xa8>)
 8000544:	f000 fdc4 	bl	80010d0 <HAL_ADC_GetValue>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <StartMoistureTask+0xb0>)
 800054e:	801a      	strh	r2, [r3, #0]
 8000550:	e00c      	b.n	800056c <StartMoistureTask+0x7c>
	  }
	  else{
		  str = "ADC Conversion Failed\n";
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <StartMoistureTask+0xb4>)
 8000554:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000556:	68f8      	ldr	r0, [r7, #12]
 8000558:	f7ff fdfa 	bl	8000150 <strlen>
 800055c:	4603      	mov	r3, r0
 800055e:	b29a      	uxth	r2, r3
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	68f9      	ldr	r1, [r7, #12]
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <StartMoistureTask+0xa4>)
 8000568:	f002 fc04 	bl	8002d74 <HAL_UART_Transmit>
	  }
	  str = "Moisture Task Stopped\n";
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <StartMoistureTask+0xb8>)
 800056e:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f7ff fded 	bl	8000150 <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	68f9      	ldr	r1, [r7, #12]
 8000580:	4804      	ldr	r0, [pc, #16]	@ (8000594 <StartMoistureTask+0xa4>)
 8000582:	f002 fbf7 	bl	8002d74 <HAL_UART_Transmit>
	  osDelay(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800058a:	f002 fddd 	bl	8003148 <osDelay>
  {
 800058e:	e7b3      	b.n	80004f8 <StartMoistureTask+0x8>
 8000590:	08004538 	.word	0x08004538
 8000594:	200002d8 	.word	0x200002d8
 8000598:	20000280 	.word	0x20000280
 800059c:	08004550 	.word	0x08004550
 80005a0:	2000032c 	.word	0x2000032c
 80005a4:	08004568 	.word	0x08004568
 80005a8:	08004580 	.word	0x08004580

080005ac <StartWateringTask>:
  }
  /* USER CODE END 5 */
}

void StartWateringTask(const void *argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ba:	482d      	ldr	r0, [pc, #180]	@ (8000670 <StartWateringTask+0xc4>)
 80005bc:	f001 fb56 	bl	8001c6c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c4:	f000 fad4 	bl	8000b70 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ce:	4828      	ldr	r0, [pc, #160]	@ (8000670 <StartWateringTask+0xc4>)
 80005d0:	f001 fb4c 	bl	8001c6c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d8:	f000 faca 	bl	8000b70 <HAL_Delay>
	  char *str = "Watering Task Started\n";
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <StartWateringTask+0xc8>)
 80005de:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f7ff fdb5 	bl	8000150 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	68f9      	ldr	r1, [r7, #12]
 80005f0:	4821      	ldr	r0, [pc, #132]	@ (8000678 <StartWateringTask+0xcc>)
 80005f2:	f002 fbbf 	bl	8002d74 <HAL_UART_Transmit>
	  if(moisture_level < 1000){
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <StartWateringTask+0xd0>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005fe:	d212      	bcs.n	8000626 <StartWateringTask+0x7a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2102      	movs	r1, #2
 8000604:	481e      	ldr	r0, [pc, #120]	@ (8000680 <StartWateringTask+0xd4>)
 8000606:	f001 fb31 	bl	8001c6c <HAL_GPIO_WritePin>
		  str = "Watering Pump Started\n";
 800060a:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <StartWateringTask+0xd8>)
 800060c:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f7ff fd9e 	bl	8000150 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	68f9      	ldr	r1, [r7, #12]
 800061e:	4816      	ldr	r0, [pc, #88]	@ (8000678 <StartWateringTask+0xcc>)
 8000620:	f002 fba8 	bl	8002d74 <HAL_UART_Transmit>
 8000624:	e011      	b.n	800064a <StartWateringTask+0x9e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	4815      	ldr	r0, [pc, #84]	@ (8000680 <StartWateringTask+0xd4>)
 800062c:	f001 fb1e 	bl	8001c6c <HAL_GPIO_WritePin>
		  str = "Watering Pump Stopped\n";
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <StartWateringTask+0xdc>)
 8000632:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f7ff fd8b 	bl	8000150 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	68f9      	ldr	r1, [r7, #12]
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <StartWateringTask+0xcc>)
 8000646:	f002 fb95 	bl	8002d74 <HAL_UART_Transmit>
	  }
	  str = "Watering Task Stopped\n";
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <StartWateringTask+0xe0>)
 800064c:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f7ff fd7e 	bl	8000150 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	68f9      	ldr	r1, [r7, #12]
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <StartWateringTask+0xcc>)
 8000660:	f002 fb88 	bl	8002d74 <HAL_UART_Transmit>
	  osDelay(2000);
 8000664:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000668:	f002 fd6e 	bl	8003148 <osDelay>
  {
 800066c:	e7a2      	b.n	80005b4 <StartWateringTask+0x8>
 800066e:	bf00      	nop
 8000670:	40011000 	.word	0x40011000
 8000674:	08004598 	.word	0x08004598
 8000678:	200002d8 	.word	0x200002d8
 800067c:	2000032c 	.word	0x2000032c
 8000680:	40010800 	.word	0x40010800
 8000684:	080045b0 	.word	0x080045b0
 8000688:	080045c8 	.word	0x080045c8
 800068c:	080045e0 	.word	0x080045e0

08000690 <StartCanTask>:
  }
  /* USER CODE END 5 */
}

void StartCanTask(const void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  TxHeader.DLC = 2;
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <StartCanTask+0x90>)
 800069a:	2202      	movs	r2, #2
 800069c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <StartCanTask+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x05;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <StartCanTask+0x90>)
 80006a6:	2205      	movs	r2, #5
 80006a8:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <StartCanTask+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]

  while(1)
  {
	  char *str = "CAN Task Started\n";
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <StartCanTask+0x94>)
 80006b2:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fd4b 	bl	8000150 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	68f9      	ldr	r1, [r7, #12]
 80006c4:	4818      	ldr	r0, [pc, #96]	@ (8000728 <StartCanTask+0x98>)
 80006c6:	f002 fb55 	bl	8002d74 <HAL_UART_Transmit>
  	  TxData[0] = moisture_level & 0xFF;
 80006ca:	4b18      	ldr	r3, [pc, #96]	@ (800072c <StartCanTask+0x9c>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <StartCanTask+0xa0>)
 80006d2:	701a      	strb	r2, [r3, #0]
  	  TxData[1] = (moisture_level >> 8) && 0xFF;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <StartCanTask+0x9c>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf14      	ite	ne
 80006e0:	2301      	movne	r3, #1
 80006e2:	2300      	moveq	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <StartCanTask+0xa0>)
 80006ea:	705a      	strb	r2, [r3, #1]
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <StartCanTask+0xa4>)
 80006ee:	4a10      	ldr	r2, [pc, #64]	@ (8000730 <StartCanTask+0xa0>)
 80006f0:	490b      	ldr	r1, [pc, #44]	@ (8000720 <StartCanTask+0x90>)
 80006f2:	4811      	ldr	r0, [pc, #68]	@ (8000738 <StartCanTask+0xa8>)
 80006f4:	f000 ff86 	bl	8001604 <HAL_CAN_AddTxMessage>
	  osDelay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fc:	f002 fd24 	bl	8003148 <osDelay>
	  str = "CAN Task Stopped\n";
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <StartCanTask+0xac>)
 8000702:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff fd23 	bl	8000150 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	b29a      	uxth	r2, r3
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	68f9      	ldr	r1, [r7, #12]
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <StartCanTask+0x98>)
 8000716:	f002 fb2d 	bl	8002d74 <HAL_UART_Transmit>
  {
 800071a:	bf00      	nop
 800071c:	e7c8      	b.n	80006b0 <StartCanTask+0x20>
 800071e:	bf00      	nop
 8000720:	20000330 	.word	0x20000330
 8000724:	080045f8 	.word	0x080045f8
 8000728:	200002d8 	.word	0x200002d8
 800072c:	2000032c 	.word	0x2000032c
 8000730:	20000348 	.word	0x20000348
 8000734:	2000034c 	.word	0x2000034c
 8000738:	200002b0 	.word	0x200002b0
 800073c:	0800460c 	.word	0x0800460c

08000740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d101      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000752:	f000 f9f1 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40012c00 	.word	0x40012c00

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_MspInit+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <HAL_MspInit+0x68>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <HAL_MspInit+0x68>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x68>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_MspInit+0x68>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x68>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f001 f8ae 	bl	800190e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_MspInit+0x6c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_MspInit+0x6c>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <HAL_ADC_MspInit+0x6c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d121      	bne.n	8000844 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <HAL_ADC_MspInit+0x70>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <HAL_ADC_MspInit+0x70>)
 8000806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <HAL_ADC_MspInit+0x70>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <HAL_ADC_MspInit+0x70>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <HAL_ADC_MspInit+0x70>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_ADC_MspInit+0x70>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000834:	2303      	movs	r3, #3
 8000836:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <HAL_ADC_MspInit+0x74>)
 8000840:	f001 f890 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40012400 	.word	0x40012400
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800

08000858 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <HAL_CAN_MspInit+0x8c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d131      	bne.n	80008dc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <HAL_CAN_MspInit+0x90>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <HAL_CAN_MspInit+0x90>)
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000882:	61d3      	str	r3, [r2, #28]
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_CAN_MspInit+0x90>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_CAN_MspInit+0x90>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a14      	ldr	r2, [pc, #80]	@ (80008e8 <HAL_CAN_MspInit+0x90>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_CAN_MspInit+0x90>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <HAL_CAN_MspInit+0x94>)
 80008be:	f001 f851 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_CAN_MspInit+0x94>)
 80008d8:	f001 f844 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40006400 	.word	0x40006400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010800 	.word	0x40010800

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <HAL_UART_MspInit+0x88>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d12f      	bne.n	8000970 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000910:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <HAL_UART_MspInit+0x8c>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a19      	ldr	r2, [pc, #100]	@ (800097c <HAL_UART_MspInit+0x8c>)
 8000916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091a:	61d3      	str	r3, [r2, #28]
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <HAL_UART_MspInit+0x8c>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_UART_MspInit+0x8c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a13      	ldr	r2, [pc, #76]	@ (800097c <HAL_UART_MspInit+0x8c>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_UART_MspInit+0x8c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000940:	2304      	movs	r3, #4
 8000942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	480b      	ldr	r0, [pc, #44]	@ (8000980 <HAL_UART_MspInit+0x90>)
 8000954:	f001 f806 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000958:	2308      	movs	r3, #8
 800095a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_UART_MspInit+0x90>)
 800096c:	f000 fffa 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40004400 	.word	0x40004400
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	@ 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a54 <HAL_InitTick+0xd0>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a54 <HAL_InitTick+0xd0>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <HAL_InitTick+0xd0>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b2:	f107 020c 	add.w	r2, r7, #12
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fd6b 	bl	8002498 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009c2:	f001 fd55 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 80009c6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <HAL_InitTick+0xd4>)
 80009cc:	fba2 2303 	umull	r2, r3, r2, r3
 80009d0:	0c9b      	lsrs	r3, r3, #18
 80009d2:	3b01      	subs	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_InitTick+0xdc>)
 80009da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009fc:	4817      	ldr	r0, [pc, #92]	@ (8000a5c <HAL_InitTick+0xd8>)
 80009fe:	f001 ff1f 	bl	8002840 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11b      	bne.n	8000a48 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <HAL_InitTick+0xd8>)
 8000a12:	f001 ff6d 	bl	80028f0 <HAL_TIM_Base_Start_IT>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d111      	bne.n	8000a48 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a24:	2019      	movs	r0, #25
 8000a26:	f000 ff8e 	bl	8001946 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d808      	bhi.n	8000a42 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2019      	movs	r0, #25
 8000a36:	f000 ff6a 	bl	800190e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_InitTick+0xe0>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e002      	b.n	8000a48 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3730      	adds	r7, #48	@ 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	20000350 	.word	0x20000350
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	20000004 	.word	0x20000004

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a6c:	f001 fd44 	bl	80024f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x8>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM1_UP_IRQHandler+0x10>)
 8000aa6:	f001 ff75 	bl	8002994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000350 	.word	0x20000350

08000ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff fff8 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ac6:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8000afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000adc:	4c09      	ldr	r4, [pc, #36]	@ (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f003 fcb7 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aee:	f7ff fb4f 	bl	8000190 <main>
  bx lr
 8000af2:	4770      	bx	lr
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000afc:	08004678 	.word	0x08004678
  ldr r2, =_sbss
 8000b00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b04:	200010e8 	.word	0x200010e8

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 feeb 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f7ff ff2e 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe22 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000398 	.word	0x20000398

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	@ (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000398 	.word	0x20000398

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff fff0 	bl	8000b5c <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffe0 	bl	8000b5c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0be      	b.n	8000d58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fdf2 	bl	80007e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 fbc5 	bl	800138c <ADC_ConversionStop_Disable>
 8000c02:	4603      	mov	r3, r0
 8000c04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 8099 	bne.w	8000d46 <HAL_ADC_Init+0x18e>
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8095 	bne.w	8000d46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c24:	f023 0302 	bic.w	r3, r3, #2
 8000c28:	f043 0202 	orr.w	r2, r3, #2
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7b1b      	ldrb	r3, [r3, #12]
 8000c3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c50:	d003      	beq.n	8000c5a <HAL_ADC_Init+0xa2>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d102      	bne.n	8000c60 <HAL_ADC_Init+0xa8>
 8000c5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5e:	e000      	b.n	8000c62 <HAL_ADC_Init+0xaa>
 8000c60:	2300      	movs	r3, #0
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7d1b      	ldrb	r3, [r3, #20]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d119      	bne.n	8000ca4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7b1b      	ldrb	r3, [r3, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	035a      	lsls	r2, r3, #13
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	e00b      	b.n	8000ca4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c90:	f043 0220 	orr.w	r2, r3, #32
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	4b28      	ldr	r3, [pc, #160]	@ (8000d60 <HAL_ADC_Init+0x1a8>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	68b9      	ldr	r1, [r7, #8]
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cd4:	d003      	beq.n	8000cde <HAL_ADC_Init+0x126>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d104      	bne.n	8000ce8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	051b      	lsls	r3, r3, #20
 8000ce6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_ADC_Init+0x1ac>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d10b      	bne.n	8000d24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d16:	f023 0303 	bic.w	r3, r3, #3
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d22:	e018      	b.n	8000d56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d28:	f023 0312 	bic.w	r3, r3, #18
 8000d2c:	f043 0210 	orr.w	r2, r3, #16
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d44:	e007      	b.n	8000d56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4a:	f043 0210 	orr.w	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	ffe1f7fd 	.word	0xffe1f7fd
 8000d64:	ff1f0efe 	.word	0xff1f0efe

08000d68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d101      	bne.n	8000d82 <HAL_ADC_Start+0x1a>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e098      	b.n	8000eb4 <HAL_ADC_Start+0x14c>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 faa4 	bl	80012d8 <ADC_Enable>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8087 	bne.w	8000eaa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a41      	ldr	r2, [pc, #260]	@ (8000ebc <HAL_ADC_Start+0x154>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <HAL_ADC_Start+0x5e>
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <HAL_ADC_Start+0x158>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d115      	bne.n	8000df2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d026      	beq.n	8000e2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000de8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000df0:	e01d      	b.n	8000e2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec0 <HAL_ADC_Start+0x158>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d004      	beq.n	8000e12 <HAL_ADC_Start+0xaa>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ebc <HAL_ADC_Start+0x154>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10d      	bne.n	8000e2e <HAL_ADC_Start+0xc6>
 8000e12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <HAL_ADC_Start+0x158>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	f023 0206 	bic.w	r2, r3, #6
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e46:	e002      	b.n	8000e4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f06f 0202 	mvn.w	r2, #2
 8000e5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e6a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e6e:	d113      	bne.n	8000e98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e74:	4a11      	ldr	r2, [pc, #68]	@ (8000ebc <HAL_ADC_Start+0x154>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d105      	bne.n	8000e86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_ADC_Start+0x158>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d108      	bne.n	8000e98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	e00c      	b.n	8000eb2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	e003      	b.n	8000eb2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40012800 	.word	0x40012800
 8000ec0:	40012400 	.word	0x40012400

08000ec4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000eda:	f7ff fe3f 	bl	8000b5c <HAL_GetTick>
 8000ede:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef2:	f043 0220 	orr.w	r2, r3, #32
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0d3      	b.n	80010ae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d131      	bne.n	8000f78 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d12a      	bne.n	8000f78 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f22:	e021      	b.n	8000f68 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2a:	d01d      	beq.n	8000f68 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_PollForConversion+0x7e>
 8000f32:	f7ff fe13 	bl	8000b5c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d212      	bcs.n	8000f68 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f54:	f043 0204 	orr.w	r2, r3, #4
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e0a2      	b.n	80010ae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0d6      	beq.n	8000f24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f76:	e070      	b.n	800105a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f78:	4b4f      	ldr	r3, [pc, #316]	@ (80010b8 <HAL_ADC_PollForConversion+0x1f4>)
 8000f7a:	681c      	ldr	r4, [r3, #0]
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f001 fba9 	bl	80026d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f82:	4603      	mov	r3, r0
 8000f84:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6919      	ldr	r1, [r3, #16]
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80010bc <HAL_ADC_PollForConversion+0x1f8>)
 8000f90:	400b      	ands	r3, r1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_ADC_PollForConversion+0x104>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68d9      	ldr	r1, [r3, #12]
 8000f9c:	4b48      	ldr	r3, [pc, #288]	@ (80010c0 <HAL_ADC_PollForConversion+0x1fc>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d111      	bne.n	8000fc8 <HAL_ADC_PollForConversion+0x104>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6919      	ldr	r1, [r3, #16]
 8000faa:	4b46      	ldr	r3, [pc, #280]	@ (80010c4 <HAL_ADC_PollForConversion+0x200>)
 8000fac:	400b      	ands	r3, r1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d108      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x100>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68d9      	ldr	r1, [r3, #12]
 8000fb8:	4b43      	ldr	r3, [pc, #268]	@ (80010c8 <HAL_ADC_PollForConversion+0x204>)
 8000fba:	400b      	ands	r3, r1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x100>
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	e020      	b.n	8001006 <HAL_ADC_PollForConversion+0x142>
 8000fc4:	2329      	movs	r3, #41	@ 0x29
 8000fc6:	e01e      	b.n	8001006 <HAL_ADC_PollForConversion+0x142>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6919      	ldr	r1, [r3, #16]
 8000fce:	4b3d      	ldr	r3, [pc, #244]	@ (80010c4 <HAL_ADC_PollForConversion+0x200>)
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d106      	bne.n	8000fe4 <HAL_ADC_PollForConversion+0x120>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68d9      	ldr	r1, [r3, #12]
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <HAL_ADC_PollForConversion+0x204>)
 8000fde:	400b      	ands	r3, r1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00d      	beq.n	8001000 <HAL_ADC_PollForConversion+0x13c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6919      	ldr	r1, [r3, #16]
 8000fea:	4b38      	ldr	r3, [pc, #224]	@ (80010cc <HAL_ADC_PollForConversion+0x208>)
 8000fec:	400b      	ands	r3, r1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <HAL_ADC_PollForConversion+0x140>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68d9      	ldr	r1, [r3, #12]
 8000ff8:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <HAL_ADC_PollForConversion+0x208>)
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_PollForConversion+0x140>
 8001000:	2354      	movs	r3, #84	@ 0x54
 8001002:	e000      	b.n	8001006 <HAL_ADC_PollForConversion+0x142>
 8001004:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800100c:	e021      	b.n	8001052 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d01a      	beq.n	800104c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <HAL_ADC_PollForConversion+0x168>
 800101c:	f7ff fd9e 	bl	8000b5c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d20f      	bcs.n	800104c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d90b      	bls.n	800104c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001038:	f043 0204 	orr.w	r2, r3, #4
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e030      	b.n	80010ae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	429a      	cmp	r2, r3
 8001058:	d8d9      	bhi.n	800100e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f06f 0212 	mvn.w	r2, #18
 8001062:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001068:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800107a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800107e:	d115      	bne.n	80010ac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d105      	bne.n	80010ac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	24924924 	.word	0x24924924
 80010c0:	00924924 	.word	0x00924924
 80010c4:	12492492 	.word	0x12492492
 80010c8:	00492492 	.word	0x00492492
 80010cc:	00249249 	.word	0x00249249

080010d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x20>
 8001104:	2302      	movs	r3, #2
 8001106:	e0dc      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x1da>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b06      	cmp	r3, #6
 8001116:	d81c      	bhi.n	8001152 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	3b05      	subs	r3, #5
 800112a:	221f      	movs	r2, #31
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4019      	ands	r1, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3b05      	subs	r3, #5
 8001144:	fa00 f203 	lsl.w	r2, r0, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001150:	e03c      	b.n	80011cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	d81c      	bhi.n	8001194 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	3b23      	subs	r3, #35	@ 0x23
 800116c:	221f      	movs	r2, #31
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	4019      	ands	r1, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b23      	subs	r3, #35	@ 0x23
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	631a      	str	r2, [r3, #48]	@ 0x30
 8001192:	e01b      	b.n	80011cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b41      	subs	r3, #65	@ 0x41
 80011a6:	221f      	movs	r2, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b41      	subs	r3, #65	@ 0x41
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d91c      	bls.n	800120e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68d9      	ldr	r1, [r3, #12]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	3b1e      	subs	r3, #30
 80011e6:	2207      	movs	r2, #7
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6898      	ldr	r0, [r3, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	3b1e      	subs	r3, #30
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	e019      	b.n	8001242 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6919      	ldr	r1, [r3, #16]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	2207      	movs	r2, #7
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6898      	ldr	r0, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d003      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800124e:	2b11      	cmp	r3, #17
 8001250:	d132      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1d      	ldr	r2, [pc, #116]	@ (80012cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d125      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d126      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001278:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d11a      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9a      	lsrs	r2, r3, #18
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_ConfigChannel+0x1b2>
 80012a6:	e007      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ac:	f043 0220 	orr.w	r2, r3, #32
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40012400 	.word	0x40012400
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d040      	beq.n	8001378 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <ADC_Enable+0xac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <ADC_Enable+0xb0>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001314:	e002      	b.n	800131c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3b01      	subs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001322:	f7ff fc1b 	bl	8000b5c <HAL_GetTick>
 8001326:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001328:	e01f      	b.n	800136a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800132a:	f7ff fc17 	bl	8000b5c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d918      	bls.n	800136a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b01      	cmp	r3, #1
 8001344:	d011      	beq.n	800136a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134a:	f043 0210 	orr.w	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e007      	b.n	800137a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	d1d8      	bne.n	800132a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	431bde83 	.word	0x431bde83

0800138c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d12e      	bne.n	8001404 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013b6:	f7ff fbd1 	bl	8000b5c <HAL_GetTick>
 80013ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013bc:	e01b      	b.n	80013f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013be:	f7ff fbcd 	bl	8000b5c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d914      	bls.n	80013f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10d      	bne.n	80013f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013de:	f043 0210 	orr.w	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e007      	b.n	8001406 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d0dc      	beq.n	80013be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0ed      	b.n	80015fc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fa13 	bl	8000858 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001442:	f7ff fb8b 	bl	8000b5c <HAL_GetTick>
 8001446:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001448:	e012      	b.n	8001470 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144a:	f7ff fb87 	bl	8000b5c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b0a      	cmp	r3, #10
 8001456:	d90b      	bls.n	8001470 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0c5      	b.n	80015fc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0e5      	beq.n	800144a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0202 	bic.w	r2, r2, #2
 800148c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800148e:	f7ff fb65 	bl	8000b5c <HAL_GetTick>
 8001492:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001494:	e012      	b.n	80014bc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001496:	f7ff fb61 	bl	8000b5c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b0a      	cmp	r3, #10
 80014a2:	d90b      	bls.n	80014bc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2205      	movs	r2, #5
 80014b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e09f      	b.n	80015fc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e5      	bne.n	8001496 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7e1b      	ldrb	r3, [r3, #24]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e007      	b.n	80014f4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7e5b      	ldrb	r3, [r3, #25]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e007      	b.n	800151e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7e9b      	ldrb	r3, [r3, #26]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d108      	bne.n	8001538 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e007      	b.n	8001548 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0220 	bic.w	r2, r2, #32
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7edb      	ldrb	r3, [r3, #27]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d108      	bne.n	8001562 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0210 	bic.w	r2, r2, #16
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e007      	b.n	8001572 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0210 	orr.w	r2, r2, #16
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7f1b      	ldrb	r3, [r3, #28]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0208 	orr.w	r2, r2, #8
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e007      	b.n	800159c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0208 	bic.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7f5b      	ldrb	r3, [r3, #29]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d108      	bne.n	80015b6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0204 	orr.w	r2, r2, #4
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e007      	b.n	80015c6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0204 	bic.w	r2, r2, #4
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	ea42 0103 	orr.w	r1, r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d003      	beq.n	8001630 <HAL_CAN_AddTxMessage+0x2c>
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	2b02      	cmp	r3, #2
 800162c:	f040 80ad 	bne.w	800178a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10a      	bne.n	8001650 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8095 	beq.w	800177a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	0e1b      	lsrs	r3, r3, #24
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800165a:	2201      	movs	r2, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	6809      	ldr	r1, [r1, #0]
 800167a:	431a      	orrs	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3318      	adds	r3, #24
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e00f      	b.n	80016a8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001692:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800169c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3318      	adds	r3, #24
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	440b      	add	r3, r1
 80016a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3318      	adds	r3, #24
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	440b      	add	r3, r1
 80016b8:	3304      	adds	r3, #4
 80016ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	7d1b      	ldrb	r3, [r3, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d111      	bne.n	80016e8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3318      	adds	r3, #24
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	6811      	ldr	r1, [r2, #0]
 80016d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3318      	adds	r3, #24
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	440b      	add	r3, r1
 80016e4:	3304      	adds	r3, #4
 80016e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3307      	adds	r3, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	061a      	lsls	r2, r3, #24
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3306      	adds	r3, #6
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3305      	adds	r3, #5
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	4313      	orrs	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	3204      	adds	r2, #4
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	4610      	mov	r0, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	6811      	ldr	r1, [r2, #0]
 8001710:	ea43 0200 	orr.w	r2, r3, r0
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	440b      	add	r3, r1
 800171a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800171e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3303      	adds	r3, #3
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	061a      	lsls	r2, r3, #24
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3302      	adds	r3, #2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3301      	adds	r3, #1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	4313      	orrs	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	4610      	mov	r0, r2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	ea43 0200 	orr.w	r2, r3, r0
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	440b      	add	r3, r1
 8001750:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001754:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3318      	adds	r3, #24
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	6811      	ldr	r1, [r2, #0]
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3318      	adds	r3, #24
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	440b      	add	r3, r1
 8001774:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e00e      	b.n	8001798 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e006      	b.n	8001798 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3724      	adds	r7, #36	@ 0x24
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
	...

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	@ (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff4f 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff64 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ffb2 	bl	8001894 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff81 	bl	8001840 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff57 	bl	8001808 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	@ 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e169      	b.n	8001c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8158 	bne.w	8001c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a9a      	ldr	r2, [pc, #616]	@ (8001c04 <HAL_GPIO_Init+0x2a0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4a98      	ldr	r2, [pc, #608]	@ (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4a98      	ldr	r2, [pc, #608]	@ (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a96      	ldr	r2, [pc, #600]	@ (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a96      	ldr	r2, [pc, #600]	@ (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a94      	ldr	r2, [pc, #592]	@ (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a94      	ldr	r2, [pc, #592]	@ (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a92      	ldr	r2, [pc, #584]	@ (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a92      	ldr	r2, [pc, #584]	@ (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a90      	ldr	r2, [pc, #576]	@ (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	@ (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a79      	ldr	r2, [pc, #484]	@ (8001c18 <HAL_GPIO_Init+0x2b4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	@ 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	@ 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80b1 	beq.w	8001c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a48      	ldr	r2, [pc, #288]	@ (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a40      	ldr	r2, [pc, #256]	@ (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3e      	ldr	r2, [pc, #248]	@ (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c30 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	492f      	ldr	r1, [pc, #188]	@ (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	492c      	ldr	r1, [pc, #176]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4928      	ldr	r1, [pc, #160]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4922      	ldr	r1, [pc, #136]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	491e      	ldr	r1, [pc, #120]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4918      	ldr	r1, [pc, #96]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4914      	ldr	r1, [pc, #80]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d021      	beq.n	8001c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	490e      	ldr	r1, [pc, #56]	@ (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e021      	b.n	8001c46 <HAL_GPIO_Init+0x2e2>
 8001c02:	bf00      	nop
 8001c04:	10320000 	.word	0x10320000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10220000 	.word	0x10220000
 8001c10:	10210000 	.word	0x10210000
 8001c14:	10120000 	.word	0x10120000
 8001c18:	10110000 	.word	0x10110000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4909      	ldr	r1, [pc, #36]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae8e 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	372c      	adds	r7, #44	@ 0x2c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e272      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8087 	beq.w	8001dca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d112      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b89      	ldr	r3, [pc, #548]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x12c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d168      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e24c      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x76>
 8001d04:	4b80      	ldr	r3, [pc, #512]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7f      	ldr	r2, [pc, #508]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e02e      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b78      	ldr	r3, [pc, #480]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a77      	ldr	r2, [pc, #476]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xbc>
 8001d3e:	4b72      	ldr	r3, [pc, #456]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a71      	ldr	r2, [pc, #452]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d58:	4b6b      	ldr	r3, [pc, #428]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a67      	ldr	r2, [pc, #412]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fef0 	bl	8000b5c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe feec 	bl	8000b5c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e200      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b5d      	ldr	r3, [pc, #372]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xe4>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fedc 	bl	8000b5c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7fe fed8 	bl	8000b5c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1ec      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x10c>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001de2:	4b49      	ldr	r3, [pc, #292]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d11c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x18c>
 8001dee:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x176>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1c0      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4939      	ldr	r1, [pc, #228]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e03a      	b.n	8001e9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_RCC_OscConfig+0x270>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fe91 	bl	8000b5c <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7fe fe8d 	bl	8000b5c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1a1      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4927      	ldr	r1, [pc, #156]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <HAL_RCC_OscConfig+0x270>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fe70 	bl	8000b5c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e80:	f7fe fe6c 	bl	8000b5c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e180      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03a      	beq.n	8001f20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d019      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb2:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fe50 	bl	8000b5c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fe4c 	bl	8000b5c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e160      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 fb1e 	bl	8002520 <RCC_Delay>
 8001ee4:	e01c      	b.n	8001f20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7fe fe36 	bl	8000b5c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fe32 	bl	8000b5c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e146      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	42420000 	.word	0x42420000
 8001f10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	4b92      	ldr	r3, [pc, #584]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e9      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80a6 	beq.w	800207a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f32:	4b8b      	ldr	r3, [pc, #556]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b88      	ldr	r3, [pc, #544]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a87      	ldr	r2, [pc, #540]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b85      	ldr	r3, [pc, #532]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b82      	ldr	r3, [pc, #520]	@ (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b7f      	ldr	r3, [pc, #508]	@ (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7fe fdf3 	bl	8000b5c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe fdef 	bl	8000b5c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	@ 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e103      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b75      	ldr	r3, [pc, #468]	@ (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x312>
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e02d      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a69      	ldr	r2, [pc, #420]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	4b67      	ldr	r3, [pc, #412]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	e01c      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x356>
 8001fd8:	4b61      	ldr	r3, [pc, #388]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a60      	ldr	r2, [pc, #384]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	4b58      	ldr	r3, [pc, #352]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a57      	ldr	r2, [pc, #348]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7fe fda3 	bl	8000b5c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fd9f 	bl	8000b5c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0b1      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	4b4b      	ldr	r3, [pc, #300]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ee      	beq.n	800201a <HAL_RCC_OscConfig+0x37e>
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe fd8d 	bl	8000b5c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fd89 	bl	8000b5c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e09b      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	4b40      	ldr	r3, [pc, #256]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a3b      	ldr	r2, [pc, #236]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002084:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d061      	beq.n	8002154 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d146      	bne.n	8002126 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b33      	ldr	r3, [pc, #204]	@ (8002168 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe fd5d 	bl	8000b5c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fd59 	bl	8000b5c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e06d      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	4b29      	ldr	r3, [pc, #164]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4921      	ldr	r1, [pc, #132]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a19      	ldr	r1, [r3, #32]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	430b      	orrs	r3, r1
 80020f2:	491b      	ldr	r1, [pc, #108]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fd2d 	bl	8000b5c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fd29 	bl	8000b5c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e03d      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x46a>
 8002124:	e035      	b.n	8002192 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <HAL_RCC_OscConfig+0x4cc>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fd16 	bl	8000b5c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fd12 	bl	8000b5c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e026      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x498>
 8002152:	e01e      	b.n	8002192 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e019      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_OscConfig+0x500>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	429a      	cmp	r2, r3
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0d0      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b67      	ldr	r3, [pc, #412]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4965      	ldr	r1, [pc, #404]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800221e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b50      	ldr	r3, [pc, #320]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	494d      	ldr	r1, [pc, #308]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d040      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d115      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e073      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06b      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b39      	ldr	r3, [pc, #228]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4936      	ldr	r1, [pc, #216]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7fe fc64 	bl	8000b5c <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fc60 	bl	8000b5c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e053      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d210      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4922      	ldr	r1, [pc, #136]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4916      	ldr	r1, [pc, #88]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231a:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490e      	ldr	r1, [pc, #56]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f82d 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490a      	ldr	r1, [pc, #40]	@ (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	@ (800236c <HAL_RCC_ClockConfig+0x1cc>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_RCC_ClockConfig+0x1d0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fb18 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
 8002368:	08004628 	.word	0x08004628
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_RCC_EnableCSS+0x14>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	4242004c 	.word	0x4242004c

0800238c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x30>
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ba:	e027      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	613b      	str	r3, [r7, #16]
      break;
 80023c0:	e027      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	4a17      	ldr	r2, [pc, #92]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d010      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	0c5b      	lsrs	r3, r3, #17
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	4a11      	ldr	r2, [pc, #68]	@ (800242c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	fb03 f202 	mul.w	r2, r3, r2
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e004      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	613b      	str	r3, [r7, #16]
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 800240e:	613b      	str	r3, [r7, #16]
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	693b      	ldr	r3, [r7, #16]
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	007a1200 	.word	0x007a1200
 8002428:	08004640 	.word	0x08004640
 800242c:	08004650 	.word	0x08004650
 8002430:	003d0900 	.word	0x003d0900

08002434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b02      	ldr	r3, [pc, #8]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800244c:	f7ff fff2 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4903      	ldr	r1, [pc, #12]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	08004638 	.word	0x08004638

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002474:	f7ff ffde 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	0adb      	lsrs	r3, r3, #11
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	08004638 	.word	0x08004638

08002498 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	220f      	movs	r2, #15
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_RCC_GetClockConfig+0x58>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <HAL_RCC_GetClockConfig+0x58>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_GetClockConfig+0x58>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_RCC_GetClockConfig+0x58>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RCC_GetClockConfig+0x5c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0207 	and.w	r2, r3, #7
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_RCC_NMI_IRQHandler+0x20>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	d104      	bne.n	8002512 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002508:	f000 f828 	bl	800255c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_RCC_NMI_IRQHandler+0x24>)
 800250e:	2280      	movs	r2, #128	@ 0x80
 8002510:	701a      	strb	r2, [r3, #0]
  }
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	4002100a 	.word	0x4002100a

08002520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <RCC_Delay+0x34>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <RCC_Delay+0x38>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800253c:	bf00      	nop
  }
  while (Delay --);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1e5a      	subs	r2, r3, #1
 8002542:	60fa      	str	r2, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f9      	bne.n	800253c <RCC_Delay+0x1c>
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000000 	.word	0x20000000
 8002558:	10624dd3 	.word	0x10624dd3

0800255c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d07d      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002588:	4b4f      	ldr	r3, [pc, #316]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b4c      	ldr	r3, [pc, #304]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	4a4b      	ldr	r2, [pc, #300]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259e:	61d3      	str	r3, [r2, #28]
 80025a0:	4b49      	ldr	r3, [pc, #292]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b46      	ldr	r3, [pc, #280]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d118      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025bc:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a42      	ldr	r2, [pc, #264]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c8:	f7fe fac8 	bl	8000b5c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	e008      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7fe fac4 	bl	8000b5c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	@ 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e06d      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b3a      	ldr	r3, [pc, #232]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ee:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02e      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d027      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800260c:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002614:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002616:	4b2e      	ldr	r3, [pc, #184]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261c:	4b2c      	ldr	r3, [pc, #176]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002622:	4a29      	ldr	r2, [pc, #164]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fa93 	bl	8000b5c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7fe fa8f 	bl	8000b5c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e036      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ee      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4917      	ldr	r1, [pc, #92]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	4313      	orrs	r3, r2
 800266c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	490b      	ldr	r1, [pc, #44]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4904      	ldr	r1, [pc, #16]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420440 	.word	0x42420440

080026d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	f200 808a 	bhi.w	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d045      	beq.n	8002790 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d075      	beq.n	80027f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800270a:	e082      	b.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800270c:	4b46      	ldr	r3, [pc, #280]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002712:	4b45      	ldr	r3, [pc, #276]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d07b      	beq.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	0c9b      	lsrs	r3, r3, #18
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a41      	ldr	r2, [pc, #260]	@ (800282c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d015      	beq.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002736:	4b3c      	ldr	r3, [pc, #240]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0c5b      	lsrs	r3, r3, #17
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	4a3b      	ldr	r2, [pc, #236]	@ (8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002750:	4a38      	ldr	r2, [pc, #224]	@ (8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fbb2 f2f3 	udiv	r2, r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e004      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4a34      	ldr	r2, [pc, #208]	@ (8002838 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800276c:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002778:	d102      	bne.n	8002780 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	61bb      	str	r3, [r7, #24]
      break;
 800277e:	e04a      	b.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
      break;
 800278e:	e042      	b.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800279c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a0:	d108      	bne.n	80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80027ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	e01f      	b.n	80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027be:	d109      	bne.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80027cc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e00f      	b.n	80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027de:	d11c      	bne.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80027e0:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d016      	beq.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80027ec:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80027f0:	61bb      	str	r3, [r7, #24]
      break;
 80027f2:	e012      	b.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80027f4:	e011      	b.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027f6:	f7ff fe3b 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0b9b      	lsrs	r3, r3, #14
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	3301      	adds	r3, #1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	61bb      	str	r3, [r7, #24]
      break;
 8002810:	e004      	b.n	800281c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800281a:	bf00      	nop
    }
  }
  return (frequency);
 800281c:	69bb      	ldr	r3, [r7, #24]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	08004654 	.word	0x08004654
 8002830:	08004664 	.word	0x08004664
 8002834:	007a1200 	.word	0x007a1200
 8002838:	003d0900 	.word	0x003d0900
 800283c:	aaaaaaab 	.word	0xaaaaaaab

08002840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e041      	b.n	80028d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f839 	bl	80028de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f000 f9b4 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e03a      	b.n	800297e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a18      	ldr	r2, [pc, #96]	@ (8002988 <HAL_TIM_Base_Start_IT+0x98>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x58>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002932:	d009      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x58>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a14      	ldr	r2, [pc, #80]	@ (800298c <HAL_TIM_Base_Start_IT+0x9c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x58>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a13      	ldr	r2, [pc, #76]	@ (8002990 <HAL_TIM_Base_Start_IT+0xa0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d010      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	e007      	b.n	800297c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800

08002994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0202 	mvn.w	r2, #2
 80029c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8ed 	bl	8002bb6 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8e0 	bl	8002ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8ef 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0204 	mvn.w	r2, #4
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8c3 	bl	8002bb6 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8b6 	bl	8002ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8c5 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0208 	mvn.w	r2, #8
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f899 	bl	8002bb6 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f88c 	bl	8002ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f89b 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0210 	mvn.w	r2, #16
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f86f 	bl	8002bb6 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f862 	bl	8002ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f871 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0201 	mvn.w	r2, #1
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fe14 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b22:	2b80      	cmp	r3, #128	@ 0x80
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b30:	2b80      	cmp	r3, #128	@ 0x80
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8bf 	bl	8002cc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f835 	bl	8002bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0220 	mvn.w	r2, #32
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f88a 	bl	8002cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a29      	ldr	r2, [pc, #164]	@ (8002ca4 <TIM_Base_SetConfig+0xb8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x30>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x30>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <TIM_Base_SetConfig+0xbc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x30>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a25      	ldr	r2, [pc, #148]	@ (8002cac <TIM_Base_SetConfig+0xc0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <TIM_Base_SetConfig+0xb8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00b      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <TIM_Base_SetConfig+0xbc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <TIM_Base_SetConfig+0xc0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a07      	ldr	r2, [pc, #28]	@ (8002ca4 <TIM_Base_SetConfig+0xb8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	615a      	str	r2, [r3, #20]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800

08002cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e042      	b.n	8002d6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fdf8 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2224      	movs	r2, #36	@ 0x24
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f91d 	bl	8002f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d16d      	bne.n	8002e70 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_UART_Transmit+0x2c>
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e066      	b.n	8002e72 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2221      	movs	r2, #33	@ 0x21
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db2:	f7fd fed3 	bl	8000b5c <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dcc:	d108      	bne.n	8002de0 <HAL_UART_Transmit+0x6c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e003      	b.n	8002de8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002de8:	e02a      	b.n	8002e40 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2180      	movs	r1, #128	@ 0x80
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f840 	bl	8002e7a <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e036      	b.n	8002e72 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e007      	b.n	8002e32 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1cf      	bne.n	8002dea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2140      	movs	r1, #64	@ 0x40
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f810 	bl	8002e7a <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e006      	b.n	8002e72 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b090      	sub	sp, #64	@ 0x40
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8a:	e050      	b.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d04c      	beq.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8002e9a:	f7fd fe5f 	bl	8000b5c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d241      	bcs.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eca:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e5      	bne.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	613b      	str	r3, [r7, #16]
   return(result);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002efe:	623a      	str	r2, [r7, #32]
 8002f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	69f9      	ldr	r1, [r7, #28]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00f      	b.n	8002f4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d09f      	beq.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3740      	adds	r7, #64	@ 0x40
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f92:	f023 030c 	bic.w	r3, r3, #12
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2c      	ldr	r2, [pc, #176]	@ (800306c <UART_SetConfig+0x114>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d103      	bne.n	8002fc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fc0:	f7ff fa56 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	e002      	b.n	8002fce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fc8:	f7ff fa3e 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8002fcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <UART_SetConfig+0x118>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	0119      	lsls	r1, r3, #4
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009a      	lsls	r2, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fbb2 f2f3 	udiv	r2, r2, r3
 8003004:	4b1a      	ldr	r3, [pc, #104]	@ (8003070 <UART_SetConfig+0x118>)
 8003006:	fba3 0302 	umull	r0, r3, r3, r2
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2064      	movs	r0, #100	@ 0x64
 800300e:	fb00 f303 	mul.w	r3, r0, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	3332      	adds	r3, #50	@ 0x32
 8003018:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <UART_SetConfig+0x118>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	4419      	add	r1, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	009a      	lsls	r2, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fbb2 f2f3 	udiv	r2, r2, r3
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <UART_SetConfig+0x118>)
 800303e:	fba3 0302 	umull	r0, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2064      	movs	r0, #100	@ 0x64
 8003046:	fb00 f303 	mul.w	r3, r0, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	3332      	adds	r3, #50	@ 0x32
 8003050:	4a07      	ldr	r2, [pc, #28]	@ (8003070 <UART_SetConfig+0x118>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	440a      	add	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40013800 	.word	0x40013800
 8003070:	51eb851f 	.word	0x51eb851f

08003074 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	2b84      	cmp	r3, #132	@ 0x84
 8003088:	d005      	beq.n	8003096 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800308a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	3303      	adds	r3, #3
 8003094:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030a6:	f000 fad7 	bl	8003658 <vTaskStartScheduler>
  
  return osOK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b2:	b089      	sub	sp, #36	@ 0x24
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d020      	beq.n	8003104 <osThreadCreate+0x54>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01c      	beq.n	8003104 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685c      	ldr	r4, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691e      	ldr	r6, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ffc9 	bl	8003074 <makeFreeRtosPriority>
 80030e2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ec:	9202      	str	r2, [sp, #8]
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	9100      	str	r1, [sp, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4632      	mov	r2, r6
 80030f6:	4629      	mov	r1, r5
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 f8e8 	bl	80032ce <xTaskCreateStatic>
 80030fe:	4603      	mov	r3, r0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e01c      	b.n	800313e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685c      	ldr	r4, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003110:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ffab 	bl	8003074 <makeFreeRtosPriority>
 800311e:	4602      	mov	r2, r0
 8003120:	f107 030c 	add.w	r3, r7, #12
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	9200      	str	r2, [sp, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4632      	mov	r2, r6
 800312c:	4629      	mov	r1, r5
 800312e:	4620      	mov	r0, r4
 8003130:	f000 f92c 	bl	800338c <xTaskCreate>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003148 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <osDelay+0x16>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	e000      	b.n	8003160 <osDelay+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fa43 	bl	80035ec <vTaskDelay>
  
  return osOK;
 8003166:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f103 0208 	add.w	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f103 0208 	add.w	r2, r3, #8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f103 0208 	add.w	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d103      	bne.n	800322c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e00c      	b.n	8003246 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3308      	adds	r3, #8
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e002      	b.n	800323a <vListInsert+0x2e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d2f6      	bcs.n	8003234 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6892      	ldr	r2, [r2, #8]
 8003292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6852      	ldr	r2, [r2, #4]
 800329c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d103      	bne.n	80032b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1e5a      	subs	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b08e      	sub	sp, #56	@ 0x38
 80032d2:	af04      	add	r7, sp, #16
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	e7fd      	b.n	80032f6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61fb      	str	r3, [r7, #28]
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003318:	2354      	movs	r3, #84	@ 0x54
 800331a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b54      	cmp	r3, #84	@ 0x54
 8003320:	d00b      	beq.n	800333a <xTaskCreateStatic+0x6c>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61bb      	str	r3, [r7, #24]
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01e      	beq.n	800337e <xTaskCreateStatic+0xb0>
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01b      	beq.n	800337e <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003358:	2300      	movs	r3, #0
 800335a:	9303      	str	r3, [sp, #12]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f850 	bl	8003416 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003376:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003378:	f000 f8ce 	bl	8003518 <prvAddNewTaskToReadyList>
 800337c:	e001      	b.n	8003382 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003382:	697b      	ldr	r3, [r7, #20]
	}
 8003384:	4618      	mov	r0, r3
 8003386:	3728      	adds	r7, #40	@ 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	@ 0x30
 8003390:	af04      	add	r7, sp, #16
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fe75 	bl	8004090 <pvPortMalloc>
 80033a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80033ae:	2054      	movs	r0, #84	@ 0x54
 80033b0:	f000 fe6e 	bl	8004090 <pvPortMalloc>
 80033b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c2:	e005      	b.n	80033d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f000 ff2b 	bl	8004220 <vPortFree>
 80033ca:	e001      	b.n	80033d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d017      	beq.n	8003406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9303      	str	r3, [sp, #12]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f80e 	bl	8003416 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fa:	69f8      	ldr	r0, [r7, #28]
 80033fc:	f000 f88c 	bl	8003518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003400:	2301      	movs	r3, #1
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e002      	b.n	800340c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800340c:	69bb      	ldr	r3, [r7, #24]
	}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b088      	sub	sp, #32
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800342e:	3b01      	subs	r3, #1
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f023 0307 	bic.w	r3, r3, #7
 800343c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	617b      	str	r3, [r7, #20]
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e012      	b.n	800348c <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	4413      	add	r3, r2
 800346c:	7819      	ldrb	r1, [r3, #0]
 800346e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	3334      	adds	r3, #52	@ 0x34
 8003476:	460a      	mov	r2, r1
 8003478:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	d9e9      	bls.n	8003466 <prvInitialiseNewTask+0x50>
 8003492:	e000      	b.n	8003496 <prvInitialiseNewTask+0x80>
		{
			break;
 8003494:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800349e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d901      	bls.n	80034a8 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034a4:	2306      	movs	r3, #6
 80034a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	2200      	movs	r2, #0
 80034b8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	3304      	adds	r3, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fe75 	bl	80031ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	3318      	adds	r3, #24
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fe70 	bl	80031ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	f1c3 0207 	rsb	r2, r3, #7
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	2200      	movs	r2, #0
 80034e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	69b8      	ldr	r0, [r7, #24]
 80034f8:	f000 fc16 	bl	8003d28 <pxPortInitialiseStack>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800350e:	bf00      	nop
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003520:	f000 fcf4 	bl	8003f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003524:	4b2a      	ldr	r3, [pc, #168]	@ (80035d0 <prvAddNewTaskToReadyList+0xb8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a29      	ldr	r2, [pc, #164]	@ (80035d0 <prvAddNewTaskToReadyList+0xb8>)
 800352c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800352e:	4b29      	ldr	r3, [pc, #164]	@ (80035d4 <prvAddNewTaskToReadyList+0xbc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003536:	4a27      	ldr	r2, [pc, #156]	@ (80035d4 <prvAddNewTaskToReadyList+0xbc>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800353c:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <prvAddNewTaskToReadyList+0xb8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d110      	bne.n	8003566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003544:	f000 fac8 	bl	8003ad8 <prvInitialiseTaskLists>
 8003548:	e00d      	b.n	8003566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800354a:	4b23      	ldr	r3, [pc, #140]	@ (80035d8 <prvAddNewTaskToReadyList+0xc0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <prvAddNewTaskToReadyList+0xbc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d802      	bhi.n	8003566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003560:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <prvAddNewTaskToReadyList+0xbc>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003566:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <prvAddNewTaskToReadyList+0xc4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <prvAddNewTaskToReadyList+0xc4>)
 800356e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	4b19      	ldr	r3, [pc, #100]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4a15      	ldr	r2, [pc, #84]	@ (80035e4 <prvAddNewTaskToReadyList+0xcc>)
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7ff fe14 	bl	80031c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800359e:	f000 fce5 	bl	8003f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <prvAddNewTaskToReadyList+0xc0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <prvAddNewTaskToReadyList+0xbc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d207      	bcs.n	80035c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <prvAddNewTaskToReadyList+0xd0>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	2000049c 	.word	0x2000049c
 80035d4:	2000039c 	.word	0x2000039c
 80035d8:	200004a8 	.word	0x200004a8
 80035dc:	200004b8 	.word	0x200004b8
 80035e0:	200004a4 	.word	0x200004a4
 80035e4:	200003a0 	.word	0x200003a0
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d018      	beq.n	8003630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <vTaskDelay+0x64>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <vTaskDelay+0x32>
	__asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60bb      	str	r3, [r7, #8]
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	e7fd      	b.n	800361a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800361e:	f000 f87d 	bl	800371c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb19 	bl	8003c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800362a:	f000 f885 	bl	8003738 <xTaskResumeAll>
 800362e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003636:	4b07      	ldr	r3, [pc, #28]	@ (8003654 <vTaskDelay+0x68>)
 8003638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200004c4 	.word	0x200004c4
 8003654:	e000ed04 	.word	0xe000ed04

08003658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	@ 0x28
 800365c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003666:	463a      	mov	r2, r7
 8003668:	1d39      	adds	r1, r7, #4
 800366a:	f107 0308 	add.w	r3, r7, #8
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc fd76 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	460a      	mov	r2, r1
 8003686:	491f      	ldr	r1, [pc, #124]	@ (8003704 <vTaskStartScheduler+0xac>)
 8003688:	481f      	ldr	r0, [pc, #124]	@ (8003708 <vTaskStartScheduler+0xb0>)
 800368a:	f7ff fe20 	bl	80032ce <xTaskCreateStatic>
 800368e:	4603      	mov	r3, r0
 8003690:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <vTaskStartScheduler+0xb4>)
 8003692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <vTaskStartScheduler+0xb4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800369c:	2301      	movs	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e001      	b.n	80036a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d116      	bne.n	80036da <vTaskStartScheduler+0x82>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	613b      	str	r3, [r7, #16]
}
 80036be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036c0:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <vTaskStartScheduler+0xb8>)
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295
 80036c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036c8:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <vTaskStartScheduler+0xbc>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036ce:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <vTaskStartScheduler+0xc0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036d4:	f000 fba8 	bl	8003e28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036d8:	e00f      	b.n	80036fa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d10b      	bne.n	80036fa <vTaskStartScheduler+0xa2>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	60fb      	str	r3, [r7, #12]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <vTaskStartScheduler+0x9e>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	08004620 	.word	0x08004620
 8003708:	08003aa9 	.word	0x08003aa9
 800370c:	200004c0 	.word	0x200004c0
 8003710:	200004bc 	.word	0x200004bc
 8003714:	200004a8 	.word	0x200004a8
 8003718:	200004a0 	.word	0x200004a0

0800371c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <vTaskSuspendAll+0x18>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	4a03      	ldr	r2, [pc, #12]	@ (8003734 <vTaskSuspendAll+0x18>)
 8003728:	6013      	str	r3, [r2, #0]
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	200004c4 	.word	0x200004c4

08003738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003746:	4b42      	ldr	r3, [pc, #264]	@ (8003850 <xTaskResumeAll+0x118>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <xTaskResumeAll+0x2e>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	603b      	str	r3, [r7, #0]
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	e7fd      	b.n	8003762 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003766:	f000 fbd1 	bl	8003f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800376a:	4b39      	ldr	r3, [pc, #228]	@ (8003850 <xTaskResumeAll+0x118>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	4a37      	ldr	r2, [pc, #220]	@ (8003850 <xTaskResumeAll+0x118>)
 8003772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003774:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <xTaskResumeAll+0x118>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d161      	bne.n	8003840 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800377c:	4b35      	ldr	r3, [pc, #212]	@ (8003854 <xTaskResumeAll+0x11c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05d      	beq.n	8003840 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003784:	e02e      	b.n	80037e4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003786:	4b34      	ldr	r3, [pc, #208]	@ (8003858 <xTaskResumeAll+0x120>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3318      	adds	r3, #24
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fd72 	bl	800327c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3304      	adds	r3, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fd6d 	bl	800327c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	2201      	movs	r2, #1
 80037a8:	409a      	lsls	r2, r3
 80037aa:	4b2c      	ldr	r3, [pc, #176]	@ (800385c <xTaskResumeAll+0x124>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	4a2a      	ldr	r2, [pc, #168]	@ (800385c <xTaskResumeAll+0x124>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <xTaskResumeAll+0x128>)
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7ff fcfb 	bl	80031c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d4:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <xTaskResumeAll+0x12c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037de:	4b22      	ldr	r3, [pc, #136]	@ (8003868 <xTaskResumeAll+0x130>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003858 <xTaskResumeAll+0x120>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1cc      	bne.n	8003786 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037f2:	f000 fa0f 	bl	8003c14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037f6:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <xTaskResumeAll+0x134>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003802:	f000 f837 	bl	8003874 <xTaskIncrementTick>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800380c:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <xTaskResumeAll+0x130>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3b01      	subs	r3, #1
 8003816:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f1      	bne.n	8003802 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800381e:	4b13      	ldr	r3, [pc, #76]	@ (800386c <xTaskResumeAll+0x134>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003824:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <xTaskResumeAll+0x130>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800382c:	2301      	movs	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <xTaskResumeAll+0x138>)
 8003832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003840:	f000 fb94 	bl	8003f6c <vPortExitCritical>

	return xAlreadyYielded;
 8003844:	68bb      	ldr	r3, [r7, #8]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200004c4 	.word	0x200004c4
 8003854:	2000049c 	.word	0x2000049c
 8003858:	2000045c 	.word	0x2000045c
 800385c:	200004a4 	.word	0x200004a4
 8003860:	200003a0 	.word	0x200003a0
 8003864:	2000039c 	.word	0x2000039c
 8003868:	200004b0 	.word	0x200004b0
 800386c:	200004ac 	.word	0x200004ac
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387e:	4b51      	ldr	r3, [pc, #324]	@ (80039c4 <xTaskIncrementTick+0x150>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 808e 	bne.w	80039a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003888:	4b4f      	ldr	r3, [pc, #316]	@ (80039c8 <xTaskIncrementTick+0x154>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003890:	4a4d      	ldr	r2, [pc, #308]	@ (80039c8 <xTaskIncrementTick+0x154>)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d121      	bne.n	80038e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800389c:	4b4b      	ldr	r3, [pc, #300]	@ (80039cc <xTaskIncrementTick+0x158>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <xTaskIncrementTick+0x4a>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	603b      	str	r3, [r7, #0]
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	e7fd      	b.n	80038ba <xTaskIncrementTick+0x46>
 80038be:	4b43      	ldr	r3, [pc, #268]	@ (80039cc <xTaskIncrementTick+0x158>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	4b42      	ldr	r3, [pc, #264]	@ (80039d0 <xTaskIncrementTick+0x15c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a40      	ldr	r2, [pc, #256]	@ (80039cc <xTaskIncrementTick+0x158>)
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4a40      	ldr	r2, [pc, #256]	@ (80039d0 <xTaskIncrementTick+0x15c>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b40      	ldr	r3, [pc, #256]	@ (80039d4 <xTaskIncrementTick+0x160>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	4a3e      	ldr	r2, [pc, #248]	@ (80039d4 <xTaskIncrementTick+0x160>)
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	f000 f99a 	bl	8003c14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038e0:	4b3d      	ldr	r3, [pc, #244]	@ (80039d8 <xTaskIncrementTick+0x164>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d34d      	bcc.n	8003986 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ea:	4b38      	ldr	r3, [pc, #224]	@ (80039cc <xTaskIncrementTick+0x158>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <xTaskIncrementTick+0x84>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <xTaskIncrementTick+0x86>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038fe:	4b36      	ldr	r3, [pc, #216]	@ (80039d8 <xTaskIncrementTick+0x164>)
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	601a      	str	r2, [r3, #0]
					break;
 8003906:	e03e      	b.n	8003986 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003908:	4b30      	ldr	r3, [pc, #192]	@ (80039cc <xTaskIncrementTick+0x158>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	d203      	bcs.n	8003928 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003920:	4a2d      	ldr	r2, [pc, #180]	@ (80039d8 <xTaskIncrementTick+0x164>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6013      	str	r3, [r2, #0]
						break;
 8003926:	e02e      	b.n	8003986 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fca5 	bl	800327c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3318      	adds	r3, #24
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fc9c 	bl	800327c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <xTaskIncrementTick+0x168>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <xTaskIncrementTick+0x168>)
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <xTaskIncrementTick+0x16c>)
 8003964:	441a      	add	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f7ff fc2a 	bl	80031c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003976:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <xTaskIncrementTick+0x170>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d3b4      	bcc.n	80038ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003984:	e7b1      	b.n	80038ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003986:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <xTaskIncrementTick+0x170>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398c:	4914      	ldr	r1, [pc, #80]	@ (80039e0 <xTaskIncrementTick+0x16c>)
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d907      	bls.n	80039ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800399e:	2301      	movs	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e004      	b.n	80039ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039a4:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <xTaskIncrementTick+0x174>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3301      	adds	r3, #1
 80039aa:	4a0f      	ldr	r2, [pc, #60]	@ (80039e8 <xTaskIncrementTick+0x174>)
 80039ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039ae:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <xTaskIncrementTick+0x178>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039ba:	697b      	ldr	r3, [r7, #20]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200004c4 	.word	0x200004c4
 80039c8:	200004a0 	.word	0x200004a0
 80039cc:	20000454 	.word	0x20000454
 80039d0:	20000458 	.word	0x20000458
 80039d4:	200004b4 	.word	0x200004b4
 80039d8:	200004bc 	.word	0x200004bc
 80039dc:	200004a4 	.word	0x200004a4
 80039e0:	200003a0 	.word	0x200003a0
 80039e4:	2000039c 	.word	0x2000039c
 80039e8:	200004ac 	.word	0x200004ac
 80039ec:	200004b0 	.word	0x200004b0

080039f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039f6:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <vTaskSwitchContext+0xa4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039fe:	4b26      	ldr	r3, [pc, #152]	@ (8003a98 <vTaskSwitchContext+0xa8>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a04:	e040      	b.n	8003a88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <vTaskSwitchContext+0xa8>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a0c:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <vTaskSwitchContext+0xac>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a1a:	7afb      	ldrb	r3, [r7, #11]
 8003a1c:	f1c3 031f 	rsb	r3, r3, #31
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	491f      	ldr	r1, [pc, #124]	@ (8003aa0 <vTaskSwitchContext+0xb0>)
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	607b      	str	r3, [r7, #4]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <vTaskSwitchContext+0x5a>
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <vTaskSwitchContext+0xb0>)
 8003a5a:	4413      	add	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	3308      	adds	r3, #8
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d104      	bne.n	8003a7e <vTaskSwitchContext+0x8e>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a07      	ldr	r2, [pc, #28]	@ (8003aa4 <vTaskSwitchContext+0xb4>)
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	200004c4 	.word	0x200004c4
 8003a98:	200004b0 	.word	0x200004b0
 8003a9c:	200004a4 	.word	0x200004a4
 8003aa0:	200003a0 	.word	0x200003a0
 8003aa4:	2000039c 	.word	0x2000039c

08003aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ab0:	f000 f852 	bl	8003b58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <prvIdleTask+0x28>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d9f9      	bls.n	8003ab0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <prvIdleTask+0x2c>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003acc:	e7f0      	b.n	8003ab0 <prvIdleTask+0x8>
 8003ace:	bf00      	nop
 8003ad0:	200003a0 	.word	0x200003a0
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	e00c      	b.n	8003afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <prvInitialiseTaskLists+0x60>)
 8003af0:	4413      	add	r3, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fb3c 	bl	8003170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3301      	adds	r3, #1
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d9ef      	bls.n	8003ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b04:	480d      	ldr	r0, [pc, #52]	@ (8003b3c <prvInitialiseTaskLists+0x64>)
 8003b06:	f7ff fb33 	bl	8003170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b0a:	480d      	ldr	r0, [pc, #52]	@ (8003b40 <prvInitialiseTaskLists+0x68>)
 8003b0c:	f7ff fb30 	bl	8003170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b10:	480c      	ldr	r0, [pc, #48]	@ (8003b44 <prvInitialiseTaskLists+0x6c>)
 8003b12:	f7ff fb2d 	bl	8003170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b16:	480c      	ldr	r0, [pc, #48]	@ (8003b48 <prvInitialiseTaskLists+0x70>)
 8003b18:	f7ff fb2a 	bl	8003170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b1c:	480b      	ldr	r0, [pc, #44]	@ (8003b4c <prvInitialiseTaskLists+0x74>)
 8003b1e:	f7ff fb27 	bl	8003170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <prvInitialiseTaskLists+0x78>)
 8003b24:	4a05      	ldr	r2, [pc, #20]	@ (8003b3c <prvInitialiseTaskLists+0x64>)
 8003b26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <prvInitialiseTaskLists+0x7c>)
 8003b2a:	4a05      	ldr	r2, [pc, #20]	@ (8003b40 <prvInitialiseTaskLists+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200003a0 	.word	0x200003a0
 8003b3c:	2000042c 	.word	0x2000042c
 8003b40:	20000440 	.word	0x20000440
 8003b44:	2000045c 	.word	0x2000045c
 8003b48:	20000470 	.word	0x20000470
 8003b4c:	20000488 	.word	0x20000488
 8003b50:	20000454 	.word	0x20000454
 8003b54:	20000458 	.word	0x20000458

08003b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b5e:	e019      	b.n	8003b94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b60:	f000 f9d4 	bl	8003f0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b64:	4b10      	ldr	r3, [pc, #64]	@ (8003ba8 <prvCheckTasksWaitingTermination+0x50>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fb83 	bl	800327c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <prvCheckTasksWaitingTermination+0x54>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003bac <prvCheckTasksWaitingTermination+0x54>)
 8003b7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <prvCheckTasksWaitingTermination+0x58>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <prvCheckTasksWaitingTermination+0x58>)
 8003b88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b8a:	f000 f9ef 	bl	8003f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f810 	bl	8003bb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b94:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <prvCheckTasksWaitingTermination+0x58>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e1      	bne.n	8003b60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000470 	.word	0x20000470
 8003bac:	2000049c 	.word	0x2000049c
 8003bb0:	20000484 	.word	0x20000484

08003bb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d108      	bne.n	8003bd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fb28 	bl	8004220 <vPortFree>
				vPortFree( pxTCB );
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb25 	bl	8004220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bd6:	e019      	b.n	8003c0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d103      	bne.n	8003bea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fb1c 	bl	8004220 <vPortFree>
	}
 8003be8:	e010      	b.n	8003c0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d00b      	beq.n	8003c0c <prvDeleteTCB+0x58>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	60fb      	str	r3, [r7, #12]
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <prvDeleteTCB+0x54>
	}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <prvResetNextTaskUnblockTime+0x40>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <prvResetNextTaskUnblockTime+0x14>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <prvResetNextTaskUnblockTime+0x16>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <prvResetNextTaskUnblockTime+0x44>)
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c36:	e008      	b.n	8003c4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c38:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <prvResetNextTaskUnblockTime+0x40>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <prvResetNextTaskUnblockTime+0x44>)
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	20000454 	.word	0x20000454
 8003c58:	200004bc 	.word	0x200004bc

08003c5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c66:	4b29      	ldr	r3, [pc, #164]	@ (8003d0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c6c:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fb02 	bl	800327c <uxListRemove>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	2201      	movs	r2, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4013      	ands	r3, r2
 8003c92:	4a20      	ldr	r2, [pc, #128]	@ (8003d14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d10a      	bne.n	8003cb4 <prvAddCurrentTaskToDelayedList+0x58>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	481a      	ldr	r0, [pc, #104]	@ (8003d18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cae:	f7ff fa8a 	bl	80031c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cb2:	e026      	b.n	8003d02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cbc:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d209      	bcs.n	8003ce0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ccc:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7ff fa97 	bl	800320c <vListInsert>
}
 8003cde:	e010      	b.n	8003d02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7ff fa8d 	bl	800320c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d202      	bcs.n	8003d02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003cfc:	4a09      	ldr	r2, [pc, #36]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6013      	str	r3, [r2, #0]
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200004a0 	.word	0x200004a0
 8003d10:	2000039c 	.word	0x2000039c
 8003d14:	200004a4 	.word	0x200004a4
 8003d18:	20000488 	.word	0x20000488
 8003d1c:	20000458 	.word	0x20000458
 8003d20:	20000454 	.word	0x20000454
 8003d24:	200004bc 	.word	0x200004bc

08003d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3b04      	subs	r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b04      	subs	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f023 0201 	bic.w	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b04      	subs	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d58:	4a08      	ldr	r2, [pc, #32]	@ (8003d7c <pxPortInitialiseStack+0x54>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b14      	subs	r3, #20
 8003d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b20      	subs	r3, #32
 8003d6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	08003d81 	.word	0x08003d81

08003d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d8a:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <prvTaskExitError+0x54>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d00b      	beq.n	8003dac <prvTaskExitError+0x2c>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <prvTaskExitError+0x28>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60bb      	str	r3, [r7, #8]
}
 8003dbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dc0:	bf00      	nop
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0fc      	beq.n	8003dc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	2000000c 	.word	0x2000000c
	...

08003de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003de0:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <pxCurrentTCBConst2>)
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dea:	f380 8809 	msr	PSP, r0
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003dfe:	4770      	bx	lr

08003e00 <pxCurrentTCBConst2>:
 8003e00:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e08:	4806      	ldr	r0, [pc, #24]	@ (8003e24 <prvPortStartFirstTask+0x1c>)
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	6800      	ldr	r0, [r0, #0]
 8003e0e:	f380 8808 	msr	MSP, r0
 8003e12:	b662      	cpsie	i
 8003e14:	b661      	cpsie	f
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	df00      	svc	0
 8003e20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e22:	bf00      	nop
 8003e24:	e000ed08 	.word	0xe000ed08

08003e28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e2e:	4b32      	ldr	r3, [pc, #200]	@ (8003ef8 <xPortStartScheduler+0xd0>)
 8003e30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	22ff      	movs	r2, #255	@ 0xff
 8003e3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <xPortStartScheduler+0xd4>)
 8003e54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e56:	4b2a      	ldr	r3, [pc, #168]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003e58:	2207      	movs	r2, #7
 8003e5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e5c:	e009      	b.n	8003e72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e5e:	4b28      	ldr	r3, [pc, #160]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003e66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b80      	cmp	r3, #128	@ 0x80
 8003e7c:	d0ef      	beq.n	8003e5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e7e:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1c3 0307 	rsb	r3, r3, #7
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00b      	beq.n	8003ea2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60bb      	str	r3, [r7, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	e7fd      	b.n	8003e9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ea2:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003eaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eac:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003eb4:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <xPortStartScheduler+0xd8>)
 8003eb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ec0:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <xPortStartScheduler+0xdc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8003f04 <xPortStartScheduler+0xdc>)
 8003ec6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003eca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <xPortStartScheduler+0xdc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f04 <xPortStartScheduler+0xdc>)
 8003ed2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ed6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ed8:	f000 f8b8 	bl	800404c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <xPortStartScheduler+0xe0>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ee2:	f7ff ff91 	bl	8003e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ee6:	f7ff fd83 	bl	80039f0 <vTaskSwitchContext>
	prvTaskExitError();
 8003eea:	f7ff ff49 	bl	8003d80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	e000e400 	.word	0xe000e400
 8003efc:	200004c8 	.word	0x200004c8
 8003f00:	200004cc 	.word	0x200004cc
 8003f04:	e000ed20 	.word	0xe000ed20
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	607b      	str	r3, [r7, #4]
}
 8003f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <vPortEnterCritical+0x58>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f64 <vPortEnterCritical+0x58>)
 8003f2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <vPortEnterCritical+0x58>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d110      	bne.n	8003f5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f38:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <vPortEnterCritical+0x5c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <vPortEnterCritical+0x4e>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	603b      	str	r3, [r7, #0]
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	e7fd      	b.n	8003f56 <vPortEnterCritical+0x4a>
	}
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	2000000c 	.word	0x2000000c
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <vPortExitCritical+0x50>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <vPortExitCritical+0x26>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	607b      	str	r3, [r7, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f92:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <vPortExitCritical+0x50>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4a08      	ldr	r2, [pc, #32]	@ (8003fbc <vPortExitCritical+0x50>)
 8003f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f9c:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <vPortExitCritical+0x50>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <vPortExitCritical+0x44>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	2000000c 	.word	0x2000000c

08003fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fc0:	f3ef 8009 	mrs	r0, PSP
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <pxCurrentTCBConst>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fd0:	6010      	str	r0, [r2, #0]
 8003fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003fd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003fda:	f380 8811 	msr	BASEPRI, r0
 8003fde:	f7ff fd07 	bl	80039f0 <vTaskSwitchContext>
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f380 8811 	msr	BASEPRI, r0
 8003fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	6808      	ldr	r0, [r1, #0]
 8003ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ff6:	f380 8809 	msr	PSP, r0
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	4770      	bx	lr

08004000 <pxCurrentTCBConst>:
 8004000:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop

08004008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	607b      	str	r3, [r7, #4]
}
 8004020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004022:	f7ff fc27 	bl	8003874 <xTaskIncrementTick>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <SysTick_Handler+0x40>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f383 8811 	msr	BASEPRI, r3
}
 800403e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <vPortSetupTimerInterrupt+0x30>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004056:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <vPortSetupTimerInterrupt+0x34>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800405c:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <vPortSetupTimerInterrupt+0x38>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <vPortSetupTimerInterrupt+0x3c>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	4a08      	ldr	r2, [pc, #32]	@ (800408c <vPortSetupTimerInterrupt+0x40>)
 800406a:	3b01      	subs	r3, #1
 800406c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800406e:	4b03      	ldr	r3, [pc, #12]	@ (800407c <vPortSetupTimerInterrupt+0x30>)
 8004070:	2207      	movs	r2, #7
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	e000e010 	.word	0xe000e010
 8004080:	e000e018 	.word	0xe000e018
 8004084:	20000000 	.word	0x20000000
 8004088:	10624dd3 	.word	0x10624dd3
 800408c:	e000e014 	.word	0xe000e014

08004090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800409c:	f7ff fb3e 	bl	800371c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040a0:	4b5a      	ldr	r3, [pc, #360]	@ (800420c <pvPortMalloc+0x17c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040a8:	f000 f916 	bl	80042d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040ac:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <pvPortMalloc+0x180>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f040 8090 	bne.w	80041da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01e      	beq.n	80040fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80040c0:	2208      	movs	r2, #8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d015      	beq.n	80040fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f023 0307 	bic.w	r3, r3, #7
 80040d8:	3308      	adds	r3, #8
 80040da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <pvPortMalloc+0x6e>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	617b      	str	r3, [r7, #20]
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	e7fd      	b.n	80040fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d06a      	beq.n	80041da <pvPortMalloc+0x14a>
 8004104:	4b43      	ldr	r3, [pc, #268]	@ (8004214 <pvPortMalloc+0x184>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d865      	bhi.n	80041da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800410e:	4b42      	ldr	r3, [pc, #264]	@ (8004218 <pvPortMalloc+0x188>)
 8004110:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004112:	4b41      	ldr	r3, [pc, #260]	@ (8004218 <pvPortMalloc+0x188>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004118:	e004      	b.n	8004124 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d903      	bls.n	8004136 <pvPortMalloc+0xa6>
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f1      	bne.n	800411a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004136:	4b35      	ldr	r3, [pc, #212]	@ (800420c <pvPortMalloc+0x17c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	429a      	cmp	r2, r3
 800413e:	d04c      	beq.n	80041da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2208      	movs	r2, #8
 8004146:	4413      	add	r3, r2
 8004148:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	2308      	movs	r3, #8
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	429a      	cmp	r2, r3
 8004160:	d920      	bls.n	80041a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <pvPortMalloc+0xfc>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	613b      	str	r3, [r7, #16]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800419e:	69b8      	ldr	r0, [r7, #24]
 80041a0:	f000 f8fc 	bl	800439c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004214 <pvPortMalloc+0x184>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <pvPortMalloc+0x184>)
 80041b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041b2:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <pvPortMalloc+0x184>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <pvPortMalloc+0x18c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d203      	bcs.n	80041c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <pvPortMalloc+0x184>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <pvPortMalloc+0x18c>)
 80041c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <pvPortMalloc+0x180>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041da:	f7ff faad 	bl	8003738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <pvPortMalloc+0x170>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <pvPortMalloc+0x16c>
	return pvReturn;
 8004200:	69fb      	ldr	r3, [r7, #28]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3728      	adds	r7, #40	@ 0x28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200010d8 	.word	0x200010d8
 8004210:	200010e4 	.word	0x200010e4
 8004214:	200010dc 	.word	0x200010dc
 8004218:	200010d0 	.word	0x200010d0
 800421c:	200010e0 	.word	0x200010e0

08004220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04a      	beq.n	80042c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004232:	2308      	movs	r3, #8
 8004234:	425b      	negs	r3, r3
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4413      	add	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <vPortFree+0xb0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <vPortFree+0x46>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	60fb      	str	r3, [r7, #12]
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	e7fd      	b.n	8004262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <vPortFree+0x66>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	60bb      	str	r3, [r7, #8]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <vPortFree+0xb0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d019      	beq.n	80042c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d115      	bne.n	80042c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <vPortFree+0xb0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042ac:	f7ff fa36 	bl	800371c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4b07      	ldr	r3, [pc, #28]	@ (80042d4 <vPortFree+0xb4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4413      	add	r3, r2
 80042ba:	4a06      	ldr	r2, [pc, #24]	@ (80042d4 <vPortFree+0xb4>)
 80042bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042be:	6938      	ldr	r0, [r7, #16]
 80042c0:	f000 f86c 	bl	800439c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80042c4:	f7ff fa38 	bl	8003738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200010e4 	.word	0x200010e4
 80042d4:	200010dc 	.word	0x200010dc

080042d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042e4:	4b27      	ldr	r3, [pc, #156]	@ (8004384 <prvHeapInit+0xac>)
 80042e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00c      	beq.n	800430c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3307      	adds	r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0307 	bic.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <prvHeapInit+0xac>)
 8004308:	4413      	add	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004310:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <prvHeapInit+0xb0>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004316:	4b1c      	ldr	r3, [pc, #112]	@ (8004388 <prvHeapInit+0xb0>)
 8004318:	2200      	movs	r2, #0
 800431a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004324:	2208      	movs	r2, #8
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0307 	bic.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a15      	ldr	r2, [pc, #84]	@ (800438c <prvHeapInit+0xb4>)
 8004338:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800433a:	4b14      	ldr	r3, [pc, #80]	@ (800438c <prvHeapInit+0xb4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004342:	4b12      	ldr	r3, [pc, #72]	@ (800438c <prvHeapInit+0xb4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <prvHeapInit+0xb4>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <prvHeapInit+0xb8>)
 8004366:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a09      	ldr	r2, [pc, #36]	@ (8004394 <prvHeapInit+0xbc>)
 800436e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004370:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <prvHeapInit+0xc0>)
 8004372:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004376:	601a      	str	r2, [r3, #0]
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	200004d0 	.word	0x200004d0
 8004388:	200010d0 	.word	0x200010d0
 800438c:	200010d8 	.word	0x200010d8
 8004390:	200010e0 	.word	0x200010e0
 8004394:	200010dc 	.word	0x200010dc
 8004398:	200010e4 	.word	0x200010e4

0800439c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043a4:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <prvInsertBlockIntoFreeList+0xa8>)
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e002      	b.n	80043b0 <prvInsertBlockIntoFreeList+0x14>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d8f7      	bhi.n	80043aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4413      	add	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d108      	bne.n	80043de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	441a      	add	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d118      	bne.n	8004424 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <prvInsertBlockIntoFreeList+0xac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d00d      	beq.n	800441a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e008      	b.n	800442c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <prvInsertBlockIntoFreeList+0xac>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e003      	b.n	800442c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d002      	beq.n	800443a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	200010d0 	.word	0x200010d0
 8004448:	200010d8 	.word	0x200010d8

0800444c <memset>:
 800444c:	4603      	mov	r3, r0
 800444e:	4402      	add	r2, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	2600      	movs	r6, #0
 8004460:	4d0c      	ldr	r5, [pc, #48]	@ (8004494 <__libc_init_array+0x38>)
 8004462:	4c0d      	ldr	r4, [pc, #52]	@ (8004498 <__libc_init_array+0x3c>)
 8004464:	1b64      	subs	r4, r4, r5
 8004466:	10a4      	asrs	r4, r4, #2
 8004468:	42a6      	cmp	r6, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	f000 f81a 	bl	80044a4 <_init>
 8004470:	2600      	movs	r6, #0
 8004472:	4d0a      	ldr	r5, [pc, #40]	@ (800449c <__libc_init_array+0x40>)
 8004474:	4c0a      	ldr	r4, [pc, #40]	@ (80044a0 <__libc_init_array+0x44>)
 8004476:	1b64      	subs	r4, r4, r5
 8004478:	10a4      	asrs	r4, r4, #2
 800447a:	42a6      	cmp	r6, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f855 3b04 	ldr.w	r3, [r5], #4
 8004484:	4798      	blx	r3
 8004486:	3601      	adds	r6, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f855 3b04 	ldr.w	r3, [r5], #4
 800448e:	4798      	blx	r3
 8004490:	3601      	adds	r6, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	08004670 	.word	0x08004670
 8004498:	08004670 	.word	0x08004670
 800449c:	08004670 	.word	0x08004670
 80044a0:	08004674 	.word	0x08004674

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr
