
Garden_1_446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800666c  0800666c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa0  20000010  08006684  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ab0  08006684  00024ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0cd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003956  00000000  00000000  0003a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  0003daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c0  00000000  00000000  0003f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000042c5  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019899  00000000  00000000  000445fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea463  00000000  00000000  0005de96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060d0  00000000  00000000  001482fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014e3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064a0 	.word	0x080064a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080064a0 	.word	0x080064a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fc8c 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f838 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f958 	bl	80007dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800052c:	f000 f8a6 	bl	800067c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000530:	f000 f8f6 	bl	8000720 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000534:	f000 f928 	bl	8000788 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f003 fa7a 	bl	8003a30 <osKernelInitialize>
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  moistureTaskHandle = osThreadNew(StartMoistureTask, NULL, &moistureTask_attributes);
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <main+0x58>)
 800053e:	2100      	movs	r1, #0
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <main+0x5c>)
 8000542:	f003 fabf 	bl	8003ac4 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <main+0x60>)
 800054a:	6013      	str	r3, [r2, #0]
  wateringTaskHandle = osThreadNew(StartWateringTask, NULL, &wateringTask_attributes);
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <main+0x64>)
 800054e:	2100      	movs	r1, #0
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0x68>)
 8000552:	f003 fab7 	bl	8003ac4 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <main+0x6c>)
 800055a:	6013      	str	r3, [r2, #0]
  canTaskHandle = osThreadNew(StartCanTask, NULL, &canTask_attributes);
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <main+0x70>)
 800055e:	2100      	movs	r1, #0
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <main+0x74>)
 8000562:	f003 faaf 	bl	8003ac4 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <main+0x78>)
 800056a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f003 fa84 	bl	8003a78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x54>
 8000572:	bf00      	nop
 8000574:	080065e0 	.word	0x080065e0
 8000578:	08000861 	.word	0x08000861
 800057c:	20000108 	.word	0x20000108
 8000580:	08006604 	.word	0x08006604
 8000584:	08000915 	.word	0x08000915
 8000588:	2000010c 	.word	0x2000010c
 800058c:	08006628 	.word	0x08006628
 8000590:	080009c5 	.word	0x080009c5
 8000594:	20000110 	.word	0x20000110

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 ff40 	bl	800642c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <SystemClock_Config+0xdc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <SystemClock_Config+0xdc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xdc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a25      	ldr	r2, [pc, #148]	; (8000678 <SystemClock_Config+0xe0>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xe0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800060c:	23b4      	movs	r3, #180	; 0xb4
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f002 f875 	bl	8002710 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 fa30 	bl	8000a90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000630:	f001 fca2 	bl	8001f78 <HAL_PWREx_EnableOverDrive>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063a:	f000 fa29 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	2105      	movs	r1, #5
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fcdb 	bl	8002018 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000668:	f000 fa12 	bl	8000a90 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_ADC1_Init+0x98>)
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <MX_ADC1_Init+0x9c>)
 8000692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_ADC1_Init+0x98>)
 8000696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800069a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_ADC1_Init+0x98>)
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <MX_ADC1_Init+0xa0>)
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_ADC1_Init+0x98>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_ADC1_Init+0x98>)
 80006d8:	2201      	movs	r2, #1
 80006da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_ADC1_Init+0x98>)
 80006de:	f000 fc13 	bl	8000f08 <HAL_ADC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 f9d2 	bl	8000a90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_ADC1_Init+0x98>)
 80006fe:	f000 fdb1 	bl	8001264 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000708:	f000 f9c2 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000002c 	.word	0x2000002c
 8000718:	40012000 	.word	0x40012000
 800071c:	0f000001 	.word	0x0f000001

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_CAN1_Init+0x60>)
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_CAN1_Init+0x64>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_CAN1_Init+0x60>)
 800072c:	2210      	movs	r2, #16
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_CAN1_Init+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_CAN1_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_CAN1_Init+0x60>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_CAN1_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_CAN1_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_CAN1_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_CAN1_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_CAN1_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_CAN1_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_CAN1_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_CAN1_Init+0x60>)
 800076e:	f000 ffa7 	bl	80016c0 <HAL_CAN_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f98a 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000074 	.word	0x20000074
 8000784:	40006400 	.word	0x40006400

08000788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART1_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007c0:	f002 fce6 	bl	8003190 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f961 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	40011000 	.word	0x40011000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_GPIO_Init+0x7c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0x7c>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2102      	movs	r1, #2
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x80>)
 8000830:	f001 fb88 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000834:	2302      	movs	r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0x80>)
 800084c:	f001 f9e6 	bl	8001c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000

08000860 <StartMoistureTask>:
//  /* USER CODE END 5 */
//}


void StartMoistureTask(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *str = "Moisture Task Started";
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <StartMoistureTask+0x98>)
 800086a:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fccf 	bl	8000210 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	2332      	movs	r3, #50	; 0x32
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	4820      	ldr	r0, [pc, #128]	; (80008fc <StartMoistureTask+0x9c>)
 800087c:	f002 fcd8 	bl	8003230 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <StartMoistureTask+0xa0>)
 8000882:	f000 fb85 	bl	8000f90 <HAL_ADC_Start>
	  str = "ADC Conversion Started";
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <StartMoistureTask+0xa4>)
 8000888:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fcc0 	bl	8000210 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	2332      	movs	r3, #50	; 0x32
 8000896:	68f9      	ldr	r1, [r7, #12]
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <StartMoistureTask+0x9c>)
 800089a:	f002 fcc9 	bl	8003230 <HAL_UART_Transmit>
	  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800089e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <StartMoistureTask+0xa0>)
 80008a4:	f000 fc46 	bl	8001134 <HAL_ADC_PollForConversion>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <StartMoistureTask+0x5e>
		  moisture_level = HAL_ADC_GetValue(&hadc1);
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <StartMoistureTask+0xa0>)
 80008b0:	f000 fccb 	bl	800124a <HAL_ADC_GetValue>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <StartMoistureTask+0xa8>)
 80008ba:	801a      	strh	r2, [r3, #0]
 80008bc:	e00b      	b.n	80008d6 <StartMoistureTask+0x76>
	  }
	  else{
		  str = "ADC Conversion Failed";
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <StartMoistureTask+0xac>)
 80008c0:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff fca4 	bl	8000210 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	2332      	movs	r3, #50	; 0x32
 80008ce:	68f9      	ldr	r1, [r7, #12]
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <StartMoistureTask+0x9c>)
 80008d2:	f002 fcad 	bl	8003230 <HAL_UART_Transmit>
	  }
	  str = "Moisture Task Stopped";
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <StartMoistureTask+0xb0>)
 80008d8:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff fc98 	bl	8000210 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	2332      	movs	r3, #50	; 0x32
 80008e6:	68f9      	ldr	r1, [r7, #12]
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <StartMoistureTask+0x9c>)
 80008ea:	f002 fca1 	bl	8003230 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f2:	f000 fae5 	bl	8000ec0 <HAL_Delay>
  {
 80008f6:	e7b7      	b.n	8000868 <StartMoistureTask+0x8>
 80008f8:	080064e0 	.word	0x080064e0
 80008fc:	2000009c 	.word	0x2000009c
 8000900:	2000002c 	.word	0x2000002c
 8000904:	080064f8 	.word	0x080064f8
 8000908:	200000e4 	.word	0x200000e4
 800090c:	08006510 	.word	0x08006510
 8000910:	08006528 	.word	0x08006528

08000914 <StartWateringTask>:
  }
  /* USER CODE END 5 */
}

void StartWateringTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *str = "Watering Task Started";
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <StartWateringTask+0x94>)
 800091e:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff fc75 	bl	8000210 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	2332      	movs	r3, #50	; 0x32
 800092c:	68f9      	ldr	r1, [r7, #12]
 800092e:	481f      	ldr	r0, [pc, #124]	; (80009ac <StartWateringTask+0x98>)
 8000930:	f002 fc7e 	bl	8003230 <HAL_UART_Transmit>
	  if(moisture_level < 1000){
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <StartWateringTask+0x9c>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800093c:	d211      	bcs.n	8000962 <StartWateringTask+0x4e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	2102      	movs	r1, #2
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <StartWateringTask+0xa0>)
 8000944:	f001 fafe 	bl	8001f44 <HAL_GPIO_WritePin>
		  str = "Watering Pump Started";
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <StartWateringTask+0xa4>)
 800094a:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff fc5f 	bl	8000210 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	2332      	movs	r3, #50	; 0x32
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <StartWateringTask+0x98>)
 800095c:	f002 fc68 	bl	8003230 <HAL_UART_Transmit>
 8000960:	e010      	b.n	8000984 <StartWateringTask+0x70>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <StartWateringTask+0xa0>)
 8000968:	f001 faec 	bl	8001f44 <HAL_GPIO_WritePin>
		  str = "Watering Pump Stopped";
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <StartWateringTask+0xa8>)
 800096e:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff fc4d 	bl	8000210 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	2332      	movs	r3, #50	; 0x32
 800097c:	68f9      	ldr	r1, [r7, #12]
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <StartWateringTask+0x98>)
 8000980:	f002 fc56 	bl	8003230 <HAL_UART_Transmit>
	  }
	  str = "Watering Task Stopped";
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <StartWateringTask+0xac>)
 8000986:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fc41 	bl	8000210 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	2332      	movs	r3, #50	; 0x32
 8000994:	68f9      	ldr	r1, [r7, #12]
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <StartWateringTask+0x98>)
 8000998:	f002 fc4a 	bl	8003230 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f000 fa8e 	bl	8000ec0 <HAL_Delay>
  {
 80009a4:	e7ba      	b.n	800091c <StartWateringTask+0x8>
 80009a6:	bf00      	nop
 80009a8:	08006540 	.word	0x08006540
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	200000e4 	.word	0x200000e4
 80009b4:	40020000 	.word	0x40020000
 80009b8:	08006558 	.word	0x08006558
 80009bc:	08006570 	.word	0x08006570
 80009c0:	08006588 	.word	0x08006588

080009c4 <StartCanTask>:
  }
  /* USER CODE END 5 */
}

void StartCanTask(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  TxHeader.DLC = 2;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <StartCanTask+0x88>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <StartCanTask+0x88>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x05;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <StartCanTask+0x88>)
 80009da:	2205      	movs	r2, #5
 80009dc:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <StartCanTask+0x88>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]

  for(;;)
  {
	  char *str = "CAN Task Started";
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <StartCanTask+0x8c>)
 80009e6:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff fc11 	bl	8000210 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	2332      	movs	r3, #50	; 0x32
 80009f4:	68f9      	ldr	r1, [r7, #12]
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <StartCanTask+0x90>)
 80009f8:	f002 fc1a 	bl	8003230 <HAL_UART_Transmit>
  	  TxData[0] = moisture_level & 0xFF;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <StartCanTask+0x94>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <StartCanTask+0x98>)
 8000a04:	701a      	strb	r2, [r3, #0]
  	  TxData[1] = (moisture_level >> 8) && 0xFF;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <StartCanTask+0x94>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <StartCanTask+0x98>)
 8000a1c:	705a      	strb	r2, [r3, #1]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <StartCanTask+0x9c>)
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <StartCanTask+0x98>)
 8000a22:	490a      	ldr	r1, [pc, #40]	; (8000a4c <StartCanTask+0x88>)
 8000a24:	480f      	ldr	r0, [pc, #60]	; (8000a64 <StartCanTask+0xa0>)
 8000a26:	f000 ff46 	bl	80018b6 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 8000a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2e:	f000 fa47 	bl	8000ec0 <HAL_Delay>
	  str = "CAN Task Stopped";
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <StartCanTask+0xa4>)
 8000a34:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 50);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fbea 	bl	8000210 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	2332      	movs	r3, #50	; 0x32
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <StartCanTask+0x90>)
 8000a46:	f002 fbf3 	bl	8003230 <HAL_UART_Transmit>
  {
 8000a4a:	e7cb      	b.n	80009e4 <StartCanTask+0x20>
 8000a4c:	200000e8 	.word	0x200000e8
 8000a50:	080065a0 	.word	0x080065a0
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	20000100 	.word	0x20000100
 8000a60:	20000104 	.word	0x20000104
 8000a64:	20000074 	.word	0x20000074
 8000a68:	080065b4 	.word	0x080065b4

08000a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7e:	f000 f9ff 	bl	8000e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010000 	.word	0x40010000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_MspInit+0x54>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f001 f871 	bl	8001bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_ADC_MspInit+0x7c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d127      	bne.n	8000b66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b52:	2303      	movs	r3, #3
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_ADC_MspInit+0x84>)
 8000b62:	f001 f85b 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40012000 	.word	0x40012000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_CAN_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_CAN_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_CAN_MspInit+0x88>)
 8000ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_CAN_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_CAN_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_CAN_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_CAN_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000be8:	2309      	movs	r3, #9
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_CAN_MspInit+0x8c>)
 8000bf4:	f001 f812 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40006400 	.word	0x40006400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c84:	f000 ffca 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_InitTick+0xd4>)
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <HAL_InitTick+0xd4>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_InitTick+0xd4>)
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 faba 	bl	800224c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cd8:	f001 faa4 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_InitTick+0xd8>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0c9b      	lsrs	r3, r3, #18
 8000cec:	3b01      	subs	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_InitTick+0xdc>)
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <HAL_InitTick+0xe0>)
 8000cf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_InitTick+0xdc>)
 8000cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_InitTick+0xdc>)
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_InitTick+0xdc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_InitTick+0xdc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_InitTick+0xdc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <HAL_InitTick+0xdc>)
 8000d18:	f001 ff98 	bl	8002c4c <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d11b      	bne.n	8000d62 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d2a:	4813      	ldr	r0, [pc, #76]	; (8000d78 <HAL_InitTick+0xdc>)
 8000d2c:	f001 ffe8 	bl	8002d00 <HAL_TIM_Base_Start_IT>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d111      	bne.n	8000d62 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f000 ff5e 	bl	8001c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	d808      	bhi.n	8000d5c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	2019      	movs	r0, #25
 8000d50:	f000 ff3a 	bl	8001bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0xe4>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e002      	b.n	8000d62 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	20000114 	.word	0x20000114
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	20000004 	.word	0x20000004

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000db6:	f002 f813 	bl	8002de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000114 	.word	0x20000114

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f005 fb11 	bl	800643c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb7f 	bl	800051c <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e2c:	08006674 	.word	0x08006674
  ldr r2, =_sbss
 8000e30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e34:	20004ab0 	.word	0x20004ab0

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fea4 	bl	8001bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f7ff ff16 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe14 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	2000015c 	.word	0x2000015c

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000015c 	.word	0x2000015c

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e033      	b.n	8000f86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fde4 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	f043 0202 	orr.w	r2, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fab4 	bl	80014c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f023 0303 	bic.w	r3, r3, #3
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
 8000f76:	e001      	b.n	8000f7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Start+0x1a>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e0b2      	b.n	8001110 <HAL_ADC_Start+0x180>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d018      	beq.n	8000ff2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HAL_ADC_Start+0x18c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_ADC_Start+0x190>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9a      	lsrs	r2, r3, #18
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fe4:	e002      	b.n	8000fec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f9      	bne.n	8000fe6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d17a      	bne.n	80010f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800103e:	d106      	bne.n	800104e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	f023 0206 	bic.w	r2, r3, #6
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	645a      	str	r2, [r3, #68]	; 0x44
 800104c:	e002      	b.n	8001054 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HAL_ADC_Start+0x194>)
 800105e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001068:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	2b00      	cmp	r3, #0
 8001074:	d12a      	bne.n	80010cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a2b      	ldr	r2, [pc, #172]	; (8001128 <HAL_ADC_Start+0x198>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d015      	beq.n	80010ac <HAL_ADC_Start+0x11c>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_ADC_Start+0x19c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d105      	bne.n	8001096 <HAL_ADC_Start+0x106>
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_ADC_Start+0x194>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00a      	beq.n	80010ac <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <HAL_ADC_Start+0x1a0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d136      	bne.n	800110e <HAL_ADC_Start+0x17e>
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_ADC_Start+0x194>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d130      	bne.n	800110e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d129      	bne.n	800110e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	e020      	b.n	800110e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_ADC_Start+0x198>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11b      	bne.n	800110e <HAL_ADC_Start+0x17e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d114      	bne.n	800110e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	e00b      	b.n	800110e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000000 	.word	0x20000000
 8001120:	431bde83 	.word	0x431bde83
 8001124:	40012300 	.word	0x40012300
 8001128:	40012000 	.word	0x40012000
 800112c:	40012100 	.word	0x40012100
 8001130:	40012200 	.word	0x40012200

08001134 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	d113      	bne.n	800117a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800115c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001160:	d10b      	bne.n	800117a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f043 0220 	orr.w	r2, r3, #32
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e063      	b.n	8001242 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800117a:	f7ff fe95 	bl	8000ea8 <HAL_GetTick>
 800117e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001180:	e021      	b.n	80011c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001188:	d01d      	beq.n	80011c6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <HAL_ADC_PollForConversion+0x6c>
 8001190:	f7ff fe8a 	bl	8000ea8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d212      	bcs.n	80011c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d00b      	beq.n	80011c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f043 0204 	orr.w	r2, r3, #4
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e03d      	b.n	8001242 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d1d6      	bne.n	8001182 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f06f 0212 	mvn.w	r2, #18
 80011dc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d123      	bne.n	8001240 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11f      	bne.n	8001240 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001218:	2b00      	cmp	r3, #0
 800121a:	d111      	bne.n	8001240 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c>
 800127c:	2302      	movs	r3, #2
 800127e:	e113      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x244>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d925      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	2207      	movs	r2, #7
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68d9      	ldr	r1, [r3, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4403      	add	r3, r0
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	409a      	lsls	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e022      	b.n	8001322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4403      	add	r3, r0
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d824      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b05      	subs	r3, #5
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e04c      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b23      	subs	r3, #35	; 0x23
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	e023      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_ADC_ConfigChannel+0x250>)
 8001410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_ADC_ConfigChannel+0x254>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d10f      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1d8>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d10b      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_ADC_ConfigChannel+0x254>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d12b      	bne.n	800149e <HAL_ADC_ConfigChannel+0x23a>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_ADC_ConfigChannel+0x258>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d003      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x1f4>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b11      	cmp	r3, #17
 8001456:	d122      	bne.n	800149e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_ADC_ConfigChannel+0x258>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d111      	bne.n	800149e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_ADC_ConfigChannel+0x25c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_ADC_ConfigChannel+0x260>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9a      	lsrs	r2, r3, #18
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40012300 	.word	0x40012300
 80014b8:	40012000 	.word	0x40012000
 80014bc:	10000012 	.word	0x10000012
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <ADC_Init+0x1f0>)
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	021a      	lsls	r2, r3, #8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	4a58      	ldr	r2, [pc, #352]	; (80016bc <ADC_Init+0x1f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d022      	beq.n	80015a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800156e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e00f      	b.n	80015c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0202 	bic.w	r2, r2, #2
 80015d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	005a      	lsls	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01b      	beq.n	800162c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001602:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	3b01      	subs	r3, #1
 8001620:	035a      	lsls	r2, r3, #13
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	e007      	b.n	800163c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	3b01      	subs	r3, #1
 8001658:	051a      	lsls	r2, r3, #20
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167e:	025a      	lsls	r2, r3, #9
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	029a      	lsls	r2, r3, #10
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40012300 	.word	0x40012300
 80016bc:	0f000001 	.word	0x0f000001

080016c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0ed      	b.n	80018ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fa4c 	bl	8000b7c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f4:	f7ff fbd8 	bl	8000ea8 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016fa:	e012      	b.n	8001722 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016fc:	f7ff fbd4 	bl	8000ea8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d90b      	bls.n	8001722 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2205      	movs	r2, #5
 800171a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0c5      	b.n	80018ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0e5      	beq.n	80016fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0202 	bic.w	r2, r2, #2
 800173e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001740:	f7ff fbb2 	bl	8000ea8 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001746:	e012      	b.n	800176e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001748:	f7ff fbae 	bl	8000ea8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b0a      	cmp	r3, #10
 8001754:	d90b      	bls.n	800176e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2205      	movs	r2, #5
 8001766:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e09f      	b.n	80018ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e5      	bne.n	8001748 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e1b      	ldrb	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e007      	b.n	80017a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7e5b      	ldrb	r3, [r3, #25]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e9b      	ldrb	r3, [r3, #26]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e007      	b.n	80017fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0220 	bic.w	r2, r2, #32
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7edb      	ldrb	r3, [r3, #27]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0210 	bic.w	r2, r2, #16
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e007      	b.n	8001824 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0210 	orr.w	r2, r2, #16
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7f1b      	ldrb	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0208 	orr.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e007      	b.n	800184e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0208 	bic.w	r2, r2, #8
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7f5b      	ldrb	r3, [r3, #29]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0204 	orr.w	r2, r2, #4
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e007      	b.n	8001878 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0204 	bic.w	r2, r2, #4
 8001876:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	ea42 0103 	orr.w	r1, r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b089      	sub	sp, #36	; 0x24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d003      	beq.n	80018e2 <HAL_CAN_AddTxMessage+0x2c>
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	f040 80ad 	bne.w	8001a3c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10a      	bne.n	8001902 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8095 	beq.w	8001a2c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	0e1b      	lsrs	r3, r3, #24
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800190c:	2201      	movs	r2, #1
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	409a      	lsls	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10d      	bne.n	800193a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	6809      	ldr	r1, [r1, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3318      	adds	r3, #24
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	440b      	add	r3, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e00f      	b.n	800195a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001944:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800194e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3318      	adds	r3, #24
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	440b      	add	r3, r1
 8001958:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3318      	adds	r3, #24
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	440b      	add	r3, r1
 800196a:	3304      	adds	r3, #4
 800196c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	7d1b      	ldrb	r3, [r3, #20]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d111      	bne.n	800199a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3318      	adds	r3, #24
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	6811      	ldr	r1, [r2, #0]
 800198a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3318      	adds	r3, #24
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	440b      	add	r3, r1
 8001996:	3304      	adds	r3, #4
 8001998:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3307      	adds	r3, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	061a      	lsls	r2, r3, #24
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3306      	adds	r3, #6
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3305      	adds	r3, #5
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4313      	orrs	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	3204      	adds	r2, #4
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4610      	mov	r0, r2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	6811      	ldr	r1, [r2, #0]
 80019c2:	ea43 0200 	orr.w	r2, r3, r0
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80019d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3303      	adds	r3, #3
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	061a      	lsls	r2, r3, #24
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3302      	adds	r3, #2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4313      	orrs	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	4610      	mov	r0, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	6811      	ldr	r1, [r2, #0]
 80019f8:	ea43 0200 	orr.w	r2, r3, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3318      	adds	r3, #24
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	6811      	ldr	r1, [r2, #0]
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3318      	adds	r3, #24
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e00e      	b.n	8001a4a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e006      	b.n	8001a4a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
  }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff4c 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bda:	f7ff ff61 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff ffb1 	bl	8001b4c <NVIC_EncodePriority>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff80 	bl	8001af8 <__NVIC_SetPriority>
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff54 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e165      	b.n	8001f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8154 	bne.w	8001efe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80ae 	beq.w	8001efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4f      	ldr	r2, [pc, #316]	; (8001f24 <HAL_GPIO_Init+0x308>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4e      	ldr	r2, [pc, #312]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	; (8001f34 <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x20a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4a      	ldr	r2, [pc, #296]	; (8001f38 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x206>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x202>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae96 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_PWREx_EnableOverDrive+0x94>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa4:	f7fe ff80 	bl	8000ea8 <HAL_GetTick>
 8001fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001faa:	e009      	b.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fac:	f7fe ff7c 	bl	8000ea8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fba:	d901      	bls.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e01f      	b.n	8002000 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d1ee      	bne.n	8001fac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd4:	f7fe ff68 	bl	8000ea8 <HAL_GetTick>
 8001fd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fda:	e009      	b.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fdc:	f7fe ff64 	bl	8000ea8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fea:	d901      	bls.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e007      	b.n	8002000 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ffc:	d1ee      	bne.n	8001fdc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	420e0040 	.word	0x420e0040
 8002010:	40007000 	.word	0x40007000
 8002014:	420e0044 	.word	0x420e0044

08002018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0cc      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d90c      	bls.n	8002054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0b8      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	494d      	ldr	r1, [pc, #308]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d044      	beq.n	8002138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e07f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e067      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4934      	ldr	r1, [pc, #208]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fece 	bl	8000ea8 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe feca 	bl	8000ea8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e04f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d20c      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e032      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4916      	ldr	r1, [pc, #88]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219e:	f000 f887 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	5ccb      	ldrb	r3, [r1, r3]
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fd6c 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00
 80021d4:	40023800 	.word	0x40023800
 80021d8:	0800664c 	.word	0x0800664c
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4903      	ldr	r1, [pc, #12]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	0800665c 	.word	0x0800665c

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002228:	f7ff ffdc 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0b5b      	lsrs	r3, r3, #13
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	0800665c 	.word	0x0800665c

0800224c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	220f      	movs	r2, #15
 800225a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_RCC_GetClockConfig+0x60>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b0ae      	sub	sp, #184	; 0xb8
 80022b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d6:	4bcb      	ldr	r3, [pc, #812]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	f200 8206 	bhi.w	80026f0 <HAL_RCC_GetSysClockFreq+0x440>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002321 	.word	0x08002321
 80022f0:	080026f1 	.word	0x080026f1
 80022f4:	080026f1 	.word	0x080026f1
 80022f8:	080026f1 	.word	0x080026f1
 80022fc:	08002329 	.word	0x08002329
 8002300:	080026f1 	.word	0x080026f1
 8002304:	080026f1 	.word	0x080026f1
 8002308:	080026f1 	.word	0x080026f1
 800230c:	08002331 	.word	0x08002331
 8002310:	080026f1 	.word	0x080026f1
 8002314:	080026f1 	.word	0x080026f1
 8002318:	080026f1 	.word	0x080026f1
 800231c:	08002521 	.word	0x08002521
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4bb9      	ldr	r3, [pc, #740]	; (8002608 <HAL_RCC_GetSysClockFreq+0x358>)
 8002322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002326:	e1e7      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4bb8      	ldr	r3, [pc, #736]	; (800260c <HAL_RCC_GetSysClockFreq+0x35c>)
 800232a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800232e:	e1e3      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002330:	4bb4      	ldr	r3, [pc, #720]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800233c:	4bb1      	ldr	r3, [pc, #708]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d071      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002348:	4bae      	ldr	r3, [pc, #696]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002354:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800235c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800236a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800236e:	4622      	mov	r2, r4
 8002370:	462b      	mov	r3, r5
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	0159      	lsls	r1, r3, #5
 800237c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002380:	0150      	lsls	r0, r2, #5
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4621      	mov	r1, r4
 8002388:	1a51      	subs	r1, r2, r1
 800238a:	6439      	str	r1, [r7, #64]	; 0x40
 800238c:	4629      	mov	r1, r5
 800238e:	eb63 0301 	sbc.w	r3, r3, r1
 8002392:	647b      	str	r3, [r7, #68]	; 0x44
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023a0:	4649      	mov	r1, r9
 80023a2:	018b      	lsls	r3, r1, #6
 80023a4:	4641      	mov	r1, r8
 80023a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023aa:	4641      	mov	r1, r8
 80023ac:	018a      	lsls	r2, r1, #6
 80023ae:	4641      	mov	r1, r8
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023b4:	4649      	mov	r1, r9
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023c8:	4649      	mov	r1, r9
 80023ca:	00cb      	lsls	r3, r1, #3
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d2:	4641      	mov	r1, r8
 80023d4:	00ca      	lsls	r2, r1, #3
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	4622      	mov	r2, r4
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
 80023e2:	462b      	mov	r3, r5
 80023e4:	460a      	mov	r2, r1
 80023e6:	eb42 0303 	adc.w	r3, r2, r3
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023f8:	4629      	mov	r1, r5
 80023fa:	024b      	lsls	r3, r1, #9
 80023fc:	4621      	mov	r1, r4
 80023fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002402:	4621      	mov	r1, r4
 8002404:	024a      	lsls	r2, r1, #9
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800240e:	2200      	movs	r2, #0
 8002410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002418:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800241c:	f7fd ff00 	bl	8000220 <__aeabi_uldivmod>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4613      	mov	r3, r2
 8002426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800242a:	e067      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242c:	4b75      	ldr	r3, [pc, #468]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	2200      	movs	r2, #0
 8002434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002438:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800243c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
 8002446:	2300      	movs	r3, #0
 8002448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800244a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800244e:	4622      	mov	r2, r4
 8002450:	462b      	mov	r3, r5
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	0159      	lsls	r1, r3, #5
 800245c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002460:	0150      	lsls	r0, r2, #5
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4621      	mov	r1, r4
 8002468:	1a51      	subs	r1, r2, r1
 800246a:	62b9      	str	r1, [r7, #40]	; 0x28
 800246c:	4629      	mov	r1, r5
 800246e:	eb63 0301 	sbc.w	r3, r3, r1
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002480:	4649      	mov	r1, r9
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	4641      	mov	r1, r8
 8002486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248a:	4641      	mov	r1, r8
 800248c:	018a      	lsls	r2, r1, #6
 800248e:	4641      	mov	r1, r8
 8002490:	ebb2 0a01 	subs.w	sl, r2, r1
 8002494:	4649      	mov	r1, r9
 8002496:	eb63 0b01 	sbc.w	fp, r3, r1
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ae:	4692      	mov	sl, r2
 80024b0:	469b      	mov	fp, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	eb1a 0303 	adds.w	r3, sl, r3
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	462b      	mov	r3, r5
 80024bc:	eb4b 0303 	adc.w	r3, fp, r3
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ce:	4629      	mov	r1, r5
 80024d0:	028b      	lsls	r3, r1, #10
 80024d2:	4621      	mov	r1, r4
 80024d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d8:	4621      	mov	r1, r4
 80024da:	028a      	lsls	r2, r1, #10
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024e4:	2200      	movs	r2, #0
 80024e6:	673b      	str	r3, [r7, #112]	; 0x70
 80024e8:	677a      	str	r2, [r7, #116]	; 0x74
 80024ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024ee:	f7fd fe97 	bl	8000220 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4613      	mov	r3, r2
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024fc:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800250e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800251e:	e0eb      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252c:	4b35      	ldr	r3, [pc, #212]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d06b      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	2200      	movs	r2, #0
 8002540:	66bb      	str	r3, [r7, #104]	; 0x68
 8002542:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	663b      	str	r3, [r7, #96]	; 0x60
 800254c:	2300      	movs	r3, #0
 800254e:	667b      	str	r3, [r7, #100]	; 0x64
 8002550:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002554:	4622      	mov	r2, r4
 8002556:	462b      	mov	r3, r5
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	0159      	lsls	r1, r3, #5
 8002562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002566:	0150      	lsls	r0, r2, #5
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4621      	mov	r1, r4
 800256e:	1a51      	subs	r1, r2, r1
 8002570:	61b9      	str	r1, [r7, #24]
 8002572:	4629      	mov	r1, r5
 8002574:	eb63 0301 	sbc.w	r3, r3, r1
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002586:	4659      	mov	r1, fp
 8002588:	018b      	lsls	r3, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002590:	4651      	mov	r1, sl
 8002592:	018a      	lsls	r2, r1, #6
 8002594:	4651      	mov	r1, sl
 8002596:	ebb2 0801 	subs.w	r8, r2, r1
 800259a:	4659      	mov	r1, fp
 800259c:	eb63 0901 	sbc.w	r9, r3, r1
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025b4:	4690      	mov	r8, r2
 80025b6:	4699      	mov	r9, r3
 80025b8:	4623      	mov	r3, r4
 80025ba:	eb18 0303 	adds.w	r3, r8, r3
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	462b      	mov	r3, r5
 80025c2:	eb49 0303 	adc.w	r3, r9, r3
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025d4:	4629      	mov	r1, r5
 80025d6:	024b      	lsls	r3, r1, #9
 80025d8:	4621      	mov	r1, r4
 80025da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025de:	4621      	mov	r1, r4
 80025e0:	024a      	lsls	r2, r1, #9
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ea:	2200      	movs	r2, #0
 80025ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80025ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025f4:	f7fd fe14 	bl	8000220 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4613      	mov	r3, r2
 80025fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002602:	e065      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x420>
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_GetSysClockFreq+0x458>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	2200      	movs	r2, #0
 8002618:	4618      	mov	r0, r3
 800261a:	4611      	mov	r1, r2
 800261c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002620:	653b      	str	r3, [r7, #80]	; 0x50
 8002622:	2300      	movs	r3, #0
 8002624:	657b      	str	r3, [r7, #84]	; 0x54
 8002626:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800262a:	4642      	mov	r2, r8
 800262c:	464b      	mov	r3, r9
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4641      	mov	r1, r8
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	4649      	mov	r1, r9
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800265c:	4659      	mov	r1, fp
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4651      	mov	r1, sl
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4651      	mov	r1, sl
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4651      	mov	r1, sl
 800266c:	1a54      	subs	r4, r2, r1
 800266e:	4659      	mov	r1, fp
 8002670:	eb63 0501 	sbc.w	r5, r3, r1
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	00eb      	lsls	r3, r5, #3
 800267e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002682:	00e2      	lsls	r2, r4, #3
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
 8002688:	4643      	mov	r3, r8
 800268a:	18e3      	adds	r3, r4, r3
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	464b      	mov	r3, r9
 8002690:	eb45 0303 	adc.w	r3, r5, r3
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a2:	4629      	mov	r1, r5
 80026a4:	028b      	lsls	r3, r1, #10
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ac:	4621      	mov	r1, r4
 80026ae:	028a      	lsls	r2, r1, #10
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026b8:	2200      	movs	r2, #0
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80026bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026c2:	f7fd fdad 	bl	8000220 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4613      	mov	r3, r2
 80026cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_GetSysClockFreq+0x458>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0f1b      	lsrs	r3, r3, #28
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026ee:	e003      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetSysClockFreq+0x45c>)
 80026f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	37b8      	adds	r7, #184	; 0xb8
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	00f42400 	.word	0x00f42400

08002710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e28d      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8083 	beq.w	8002836 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002730:	4b94      	ldr	r3, [pc, #592]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d019      	beq.n	8002770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800273c:	4b91      	ldr	r3, [pc, #580]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002744:	2b08      	cmp	r3, #8
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002748:	4b8e      	ldr	r3, [pc, #568]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d00c      	beq.n	8002770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d112      	bne.n	8002788 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b84      	ldr	r3, [pc, #528]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05b      	beq.n	8002834 <HAL_RCC_OscConfig+0x124>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d157      	bne.n	8002834 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e25a      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x90>
 8002792:	4b7c      	ldr	r3, [pc, #496]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7b      	ldr	r2, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xcc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xb4>
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a75      	ldr	r2, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xcc>
 80027c4:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b6c      	ldr	r3, [pc, #432]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6b      	ldr	r2, [pc, #428]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fb60 	bl	8000ea8 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fb5c 	bl	8000ea8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e21f      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xdc>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fb4c 	bl	8000ea8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fb48 	bl	8000ea8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e20b      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b57      	ldr	r3, [pc, #348]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x104>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d06f      	beq.n	8002922 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002842:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d017      	beq.n	800287e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800284e:	4b4d      	ldr	r3, [pc, #308]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002856:	2b08      	cmp	r3, #8
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d11c      	bne.n	80028ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x186>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e1d3      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	e03a      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b4:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_OscConfig+0x278>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe faf5 	bl	8000ea8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe faf1 	bl	8000ea8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1b4      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4925      	ldr	r1, [pc, #148]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e015      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_OscConfig+0x278>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fad4 	bl	8000ea8 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002904:	f7fe fad0 	bl	8000ea8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e193      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d036      	beq.n	800299c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_RCC_OscConfig+0x27c>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fab4 	bl	8000ea8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe fab0 	bl	8000ea8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e173      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x234>
 8002962:	e01b      	b.n	800299c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_OscConfig+0x27c>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7fe fa9d 	bl	8000ea8 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	e00e      	b.n	8002990 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe fa99 	bl	8000ea8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d907      	bls.n	8002990 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e15c      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
 8002984:	40023800 	.word	0x40023800
 8002988:	42470000 	.word	0x42470000
 800298c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b8a      	ldr	r3, [pc, #552]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ea      	bne.n	8002972 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8097 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b83      	ldr	r3, [pc, #524]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	4b7f      	ldr	r3, [pc, #508]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a7e      	ldr	r2, [pc, #504]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b7c      	ldr	r3, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fa59 	bl	8000ea8 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe fa55 	bl	8000ea8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e118      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x31e>
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	e01c      	b.n	8002a68 <HAL_RCC_OscConfig+0x358>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x340>
 8002a36:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a60      	ldr	r2, [pc, #384]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a5d      	ldr	r2, [pc, #372]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0x358>
 8002a50:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a56      	ldr	r2, [pc, #344]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fa1a 	bl	8000ea8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa16 	bl	8000ea8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0d7      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ee      	beq.n	8002a78 <HAL_RCC_OscConfig+0x368>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fa04 	bl	8000ea8 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fa00 	bl	8000ea8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0c1      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ee      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80ad 	beq.w	8002c3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d060      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d145      	bne.n	8002b82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_RCC_OscConfig+0x4b4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe f9d4 	bl	8000ea8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe f9d0 	bl	8000ea8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e093      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	491b      	ldr	r1, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x4b4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe f9a5 	bl	8000ea8 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe f9a1 	bl	8000ea8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e064      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x452>
 8002b80:	e05c      	b.n	8002c3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCC_OscConfig+0x4b4>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe f98e 	bl	8000ea8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe f98a 	bl	8000ea8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04d      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x480>
 8002bae:	e045      	b.n	8002c3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e040      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x538>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d030      	beq.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d129      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d122      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d119      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d10f      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800

08002c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e041      	b.n	8002ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f839 	bl	8002cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 f9c0 	bl	8003010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e04e      	b.n	8002db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d01d      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x80>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d010      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	e007      	b.n	8002db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000800 	.word	0x40000800
 8002dd0:	40000c00 	.word	0x40000c00
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40001800 	.word	0x40001800

08002de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d020      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0202 	mvn.w	r2, #2
 8002e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8d2 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f8c4 	bl	8002fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8d5 	bl	8002fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d020      	beq.n	8002e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0204 	mvn.w	r2, #4
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8ac 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f89e 	bl	8002fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8af 	bl	8002fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d020      	beq.n	8002edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01b      	beq.n	8002edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0208 	mvn.w	r2, #8
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f886 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f878 	bl	8002fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f889 	bl	8002fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0210 	mvn.w	r2, #16
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2208      	movs	r2, #8
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f860 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f852 	bl	8002fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f863 	bl	8002fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0201 	mvn.w	r2, #1
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fd90 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f906 	bl	800317c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00c      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f834 	bl	8002ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0220 	mvn.w	r2, #32
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8d8 	bl	8003168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a46      	ldr	r2, [pc, #280]	; (800313c <TIM_Base_SetConfig+0x12c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d00f      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a43      	ldr	r2, [pc, #268]	; (8003140 <TIM_Base_SetConfig+0x130>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a42      	ldr	r2, [pc, #264]	; (8003144 <TIM_Base_SetConfig+0x134>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a41      	ldr	r2, [pc, #260]	; (8003148 <TIM_Base_SetConfig+0x138>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a40      	ldr	r2, [pc, #256]	; (800314c <TIM_Base_SetConfig+0x13c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d108      	bne.n	8003062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a35      	ldr	r2, [pc, #212]	; (800313c <TIM_Base_SetConfig+0x12c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d02b      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d027      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a32      	ldr	r2, [pc, #200]	; (8003140 <TIM_Base_SetConfig+0x130>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d023      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a31      	ldr	r2, [pc, #196]	; (8003144 <TIM_Base_SetConfig+0x134>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a30      	ldr	r2, [pc, #192]	; (8003148 <TIM_Base_SetConfig+0x138>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01b      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2f      	ldr	r2, [pc, #188]	; (800314c <TIM_Base_SetConfig+0x13c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d017      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2e      	ldr	r2, [pc, #184]	; (8003150 <TIM_Base_SetConfig+0x140>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2d      	ldr	r2, [pc, #180]	; (8003154 <TIM_Base_SetConfig+0x144>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <TIM_Base_SetConfig+0x148>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2b      	ldr	r2, [pc, #172]	; (800315c <TIM_Base_SetConfig+0x14c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <TIM_Base_SetConfig+0x150>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a29      	ldr	r2, [pc, #164]	; (8003164 <TIM_Base_SetConfig+0x154>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <TIM_Base_SetConfig+0x12c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0xf8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <TIM_Base_SetConfig+0x13c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d103      	bne.n	8003110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	611a      	str	r2, [r3, #16]
  }
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010000 	.word	0x40010000
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40000c00 	.word	0x40000c00
 800314c:	40010400 	.word	0x40010400
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800
 800315c:	40001800 	.word	0x40001800
 8003160:	40001c00 	.word	0x40001c00
 8003164:	40002000 	.word	0x40002000

08003168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e042      	b.n	8003228 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fd28 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f973 	bl	80034c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	d175      	bne.n	800333c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_UART_Transmit+0x2c>
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e06e      	b.n	800333e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2221      	movs	r2, #33	; 0x21
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326e:	f7fd fe1b 	bl	8000ea8 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003288:	d108      	bne.n	800329c <HAL_UART_Transmit+0x6c>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e003      	b.n	80032a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032a4:	e02e      	b.n	8003304 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f848 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e03a      	b.n	800333e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	3302      	adds	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e007      	b.n	80032f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1cb      	bne.n	80032a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2140      	movs	r1, #64	; 0x40
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f814 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e006      	b.n	800333e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	e03b      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335e:	d037      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003360:	f7fd fda2 	bl	8000ea8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <UART_WaitOnFlagUntilTimeout+0x30>
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e03a      	b.n	80033f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b80      	cmp	r3, #128	; 0x80
 800338c:	d020      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d01d      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d116      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f81d 	bl	80033f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2208      	movs	r2, #8
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e00f      	b.n	80033f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d0b4      	beq.n	8003358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b095      	sub	sp, #84	; 0x54
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003420:	643a      	str	r2, [r7, #64]	; 0x40
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	61fb      	str	r3, [r7, #28]
   return(result);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800345a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	2b01      	cmp	r3, #1
 800346e:	d119      	bne.n	80034a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 0310 	bic.w	r3, r3, #16
 8003486:	647b      	str	r3, [r7, #68]	; 0x44
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003490:	61ba      	str	r2, [r7, #24]
 8003492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6979      	ldr	r1, [r7, #20]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e5      	bne.n	8003470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034b2:	bf00      	nop
 80034b4:	3754      	adds	r7, #84	; 0x54
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0c0      	sub	sp, #256	; 0x100
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	68d9      	ldr	r1, [r3, #12]
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	ea40 0301 	orr.w	r3, r0, r1
 80034e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003518:	f021 010c 	bic.w	r1, r1, #12
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003526:	430b      	orrs	r3, r1
 8003528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	6999      	ldr	r1, [r3, #24]
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	ea40 0301 	orr.w	r3, r0, r1
 8003546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b8f      	ldr	r3, [pc, #572]	; (800378c <UART_SetConfig+0x2cc>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d005      	beq.n	8003560 <UART_SetConfig+0xa0>
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <UART_SetConfig+0x2d0>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d104      	bne.n	800356a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7fe fe60 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003564:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003568:	e003      	b.n	8003572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800356a:	f7fe fe47 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 800356e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	f040 810c 	bne.w	8003798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800358a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800358e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003592:	4622      	mov	r2, r4
 8003594:	462b      	mov	r3, r5
 8003596:	1891      	adds	r1, r2, r2
 8003598:	65b9      	str	r1, [r7, #88]	; 0x58
 800359a:	415b      	adcs	r3, r3
 800359c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800359e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035a2:	4621      	mov	r1, r4
 80035a4:	eb12 0801 	adds.w	r8, r2, r1
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb43 0901 	adc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035d0:	462b      	mov	r3, r5
 80035d2:	eb49 0303 	adc.w	r3, r9, r3
 80035d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035ee:	460b      	mov	r3, r1
 80035f0:	18db      	adds	r3, r3, r3
 80035f2:	653b      	str	r3, [r7, #80]	; 0x50
 80035f4:	4613      	mov	r3, r2
 80035f6:	eb42 0303 	adc.w	r3, r2, r3
 80035fa:	657b      	str	r3, [r7, #84]	; 0x54
 80035fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003604:	f7fc fe0c 	bl	8000220 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4b61      	ldr	r3, [pc, #388]	; (8003794 <UART_SetConfig+0x2d4>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	011c      	lsls	r4, r3, #4
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003620:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003630:	415b      	adcs	r3, r3
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003638:	4641      	mov	r1, r8
 800363a:	eb12 0a01 	adds.w	sl, r2, r1
 800363e:	4649      	mov	r1, r9
 8003640:	eb43 0b01 	adc.w	fp, r3, r1
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003658:	4692      	mov	sl, r2
 800365a:	469b      	mov	fp, r3
 800365c:	4643      	mov	r3, r8
 800365e:	eb1a 0303 	adds.w	r3, sl, r3
 8003662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003666:	464b      	mov	r3, r9
 8003668:	eb4b 0303 	adc.w	r3, fp, r3
 800366c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800367c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003684:	460b      	mov	r3, r1
 8003686:	18db      	adds	r3, r3, r3
 8003688:	643b      	str	r3, [r7, #64]	; 0x40
 800368a:	4613      	mov	r3, r2
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
 8003692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800369a:	f7fc fdc1 	bl	8000220 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <UART_SetConfig+0x2d4>)
 80036a6:	fba3 2301 	umull	r2, r3, r3, r1
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2264      	movs	r2, #100	; 0x64
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	1acb      	subs	r3, r1, r3
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 2302 	umull	r2, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c8:	441c      	add	r4, r3
 80036ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036e4:	415b      	adcs	r3, r3
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036ec:	4641      	mov	r1, r8
 80036ee:	1851      	adds	r1, r2, r1
 80036f0:	6339      	str	r1, [r7, #48]	; 0x30
 80036f2:	4649      	mov	r1, r9
 80036f4:	414b      	adcs	r3, r1
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003704:	4659      	mov	r1, fp
 8003706:	00cb      	lsls	r3, r1, #3
 8003708:	4651      	mov	r1, sl
 800370a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370e:	4651      	mov	r1, sl
 8003710:	00ca      	lsls	r2, r1, #3
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4603      	mov	r3, r0
 8003718:	4642      	mov	r2, r8
 800371a:	189b      	adds	r3, r3, r2
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003720:	464b      	mov	r3, r9
 8003722:	460a      	mov	r2, r1
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003738:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800373c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003740:	460b      	mov	r3, r1
 8003742:	18db      	adds	r3, r3, r3
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
 8003746:	4613      	mov	r3, r2
 8003748:	eb42 0303 	adc.w	r3, r2, r3
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003756:	f7fc fd63 	bl	8000220 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <UART_SetConfig+0x2d4>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2164      	movs	r1, #100	; 0x64
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <UART_SetConfig+0x2d4>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 0207 	and.w	r2, r3, #7
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4422      	add	r2, r4
 8003786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003788:	e106      	b.n	8003998 <UART_SetConfig+0x4d8>
 800378a:	bf00      	nop
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037aa:	4642      	mov	r2, r8
 80037ac:	464b      	mov	r3, r9
 80037ae:	1891      	adds	r1, r2, r2
 80037b0:	6239      	str	r1, [r7, #32]
 80037b2:	415b      	adcs	r3, r3
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ba:	4641      	mov	r1, r8
 80037bc:	1854      	adds	r4, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb43 0501 	adc.w	r5, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	00eb      	lsls	r3, r5, #3
 80037ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d2:	00e2      	lsls	r2, r4, #3
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	4643      	mov	r3, r8
 80037da:	18e3      	adds	r3, r4, r3
 80037dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037e0:	464b      	mov	r3, r9
 80037e2:	eb45 0303 	adc.w	r3, r5, r3
 80037e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003806:	4629      	mov	r1, r5
 8003808:	008b      	lsls	r3, r1, #2
 800380a:	4621      	mov	r1, r4
 800380c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003810:	4621      	mov	r1, r4
 8003812:	008a      	lsls	r2, r1, #2
 8003814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003818:	f7fc fd02 	bl	8000220 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <UART_SetConfig+0x4e4>)
 8003822:	fba3 2302 	umull	r2, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	011c      	lsls	r4, r3, #4
 800382a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003834:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	61b9      	str	r1, [r7, #24]
 8003844:	415b      	adcs	r3, r3
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6139      	str	r1, [r7, #16]
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003880:	464b      	mov	r3, r9
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	67bb      	str	r3, [r7, #120]	; 0x78
 8003896:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038a4:	4649      	mov	r1, r9
 80038a6:	008b      	lsls	r3, r1, #2
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ae:	4641      	mov	r1, r8
 80038b0:	008a      	lsls	r2, r1, #2
 80038b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038b6:	f7fc fcb3 	bl	8000220 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <UART_SetConfig+0x4e4>)
 80038c2:	fba3 2301 	umull	r2, r3, r3, r1
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2264      	movs	r2, #100	; 0x64
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	1acb      	subs	r3, r1, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <UART_SetConfig+0x4e4>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e0:	441c      	add	r4, r3
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	673b      	str	r3, [r7, #112]	; 0x70
 80038ea:	677a      	str	r2, [r7, #116]	; 0x74
 80038ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038f0:	4642      	mov	r2, r8
 80038f2:	464b      	mov	r3, r9
 80038f4:	1891      	adds	r1, r2, r2
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	415b      	adcs	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003900:	4641      	mov	r1, r8
 8003902:	1851      	adds	r1, r2, r1
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	4649      	mov	r1, r9
 8003908:	414b      	adcs	r3, r1
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003918:	4659      	mov	r1, fp
 800391a:	00cb      	lsls	r3, r1, #3
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003922:	4651      	mov	r1, sl
 8003924:	00ca      	lsls	r2, r1, #3
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	4603      	mov	r3, r0
 800392c:	4642      	mov	r2, r8
 800392e:	189b      	adds	r3, r3, r2
 8003930:	66bb      	str	r3, [r7, #104]	; 0x68
 8003932:	464b      	mov	r3, r9
 8003934:	460a      	mov	r2, r1
 8003936:	eb42 0303 	adc.w	r3, r2, r3
 800393a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	663b      	str	r3, [r7, #96]	; 0x60
 8003946:	667a      	str	r2, [r7, #100]	; 0x64
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003954:	4649      	mov	r1, r9
 8003956:	008b      	lsls	r3, r1, #2
 8003958:	4641      	mov	r1, r8
 800395a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395e:	4641      	mov	r1, r8
 8003960:	008a      	lsls	r2, r1, #2
 8003962:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003966:	f7fc fc5b 	bl	8000220 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <UART_SetConfig+0x4e4>)
 8003970:	fba3 1302 	umull	r1, r3, r3, r2
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	2164      	movs	r1, #100	; 0x64
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	3332      	adds	r3, #50	; 0x32
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <UART_SetConfig+0x4e4>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	f003 020f 	and.w	r2, r3, #15
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4422      	add	r2, r4
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800399e:	46bd      	mov	sp, r7
 80039a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a4:	51eb851f 	.word	0x51eb851f

080039a8 <__NVIC_SetPriority>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SysTick_Handler+0x1c>)
 8003a02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a04:	f001 fcae 	bl	8005364 <xTaskGetSchedulerState>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a0e:	f002 fa93 	bl	8005f38 <xPortSysTickHandler>
  }
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a20:	2100      	movs	r1, #0
 8003a22:	f06f 0004 	mvn.w	r0, #4
 8003a26:	f7ff ffbf 	bl	80039a8 <__NVIC_SetPriority>
#endif
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a36:	f3ef 8305 	mrs	r3, IPSR
 8003a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a42:	f06f 0305 	mvn.w	r3, #5
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e00c      	b.n	8003a64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <osKernelInitialize+0x44>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <osKernelInitialize+0x44>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e002      	b.n	8003a64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a64:	687b      	ldr	r3, [r7, #4]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000160 	.word	0x20000160

08003a78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a7e:	f3ef 8305 	mrs	r3, IPSR
 8003a82:	603b      	str	r3, [r7, #0]
  return(result);
 8003a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a8a:	f06f 0305 	mvn.w	r3, #5
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	e010      	b.n	8003ab4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <osKernelStart+0x48>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d109      	bne.n	8003aae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a9a:	f7ff ffbf 	bl	8003a1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <osKernelStart+0x48>)
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003aa4:	f001 f816 	bl	8004ad4 <vTaskStartScheduler>
      stat = osOK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e002      	b.n	8003ab4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ab4:	687b      	ldr	r3, [r7, #4]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000160 	.word	0x20000160

08003ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad4:	f3ef 8305 	mrs	r3, IPSR
 8003ad8:	617b      	str	r3, [r7, #20]
  return(result);
 8003ada:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d17e      	bne.n	8003bde <osThreadNew+0x11a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d07b      	beq.n	8003bde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003aea:	2318      	movs	r3, #24
 8003aec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003af6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d045      	beq.n	8003b8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <osThreadNew+0x48>
        name = attr->name;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <osThreadNew+0x6e>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b38      	cmp	r3, #56	; 0x38
 8003b24:	d805      	bhi.n	8003b32 <osThreadNew+0x6e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <osThreadNew+0x72>
        return (NULL);
 8003b32:	2300      	movs	r3, #0
 8003b34:	e054      	b.n	8003be0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <osThreadNew+0xa8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b5b      	cmp	r3, #91	; 0x5b
 8003b54:	d90a      	bls.n	8003b6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <osThreadNew+0xa8>
        mem = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e010      	b.n	8003b8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <osThreadNew+0xca>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <osThreadNew+0xca>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <osThreadNew+0xca>
          mem = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e001      	b.n	8003b8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d110      	bne.n	8003bb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b9c:	9202      	str	r2, [sp, #8]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fdf0 	bl	8004790 <xTaskCreateStatic>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	e013      	b.n	8003bde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d110      	bne.n	8003bde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	f107 0310 	add.w	r3, r7, #16
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fe3b 	bl	800484a <xTaskCreate>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <osThreadNew+0x11a>
            hTask = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bde:	693b      	ldr	r3, [r7, #16]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a06      	ldr	r2, [pc, #24]	; (8003c18 <vApplicationGetIdleTaskMemory+0x30>)
 8003bfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2280      	movs	r2, #128	; 0x80
 8003c04:	601a      	str	r2, [r3, #0]
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000164 	.word	0x20000164
 8003c18:	200001c0 	.word	0x200001c0

08003c1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <vApplicationGetTimerTaskMemory+0x30>)
 8003c32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	200003c0 	.word	0x200003c0
 8003c4c:	2000041c 	.word	0x2000041c

08003c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f103 0208 	add.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f103 0208 	add.w	r2, r3, #8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f103 0208 	add.w	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d08:	d103      	bne.n	8003d12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e00c      	b.n	8003d2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e002      	b.n	8003d20 <vListInsert+0x2e>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d2f6      	bcs.n	8003d1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6892      	ldr	r2, [r2, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6852      	ldr	r2, [r2, #4]
 8003d84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d103      	bne.n	8003d98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1e5a      	subs	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003de2:	f002 f817 	bl	8005e14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	3b01      	subs	r3, #1
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	441a      	add	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22ff      	movs	r2, #255	; 0xff
 8003e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d114      	bne.n	8003e62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01a      	beq.n	8003e76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3310      	adds	r3, #16
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 f8cf 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d012      	beq.n	8003e76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <xQueueGenericReset+0xcc>)
 8003e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	e009      	b.n	8003e76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3310      	adds	r3, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fef2 	bl	8003c50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3324      	adds	r3, #36	; 0x24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff feed 	bl	8003c50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e76:	f001 fffd 	bl	8005e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e7a:	2301      	movs	r3, #1
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08e      	sub	sp, #56	; 0x38
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <xQueueGenericCreateStatic+0x52>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <xQueueGenericCreateStatic+0x56>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <xQueueGenericCreateStatic+0x58>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	623b      	str	r3, [r7, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <xQueueGenericCreateStatic+0x7e>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <xQueueGenericCreateStatic+0x82>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <xQueueGenericCreateStatic+0x84>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	61fb      	str	r3, [r7, #28]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f26:	2350      	movs	r3, #80	; 0x50
 8003f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b50      	cmp	r3, #80	; 0x50
 8003f2e:	d00a      	beq.n	8003f46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	61bb      	str	r3, [r7, #24]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f805 	bl	8003f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3730      	adds	r7, #48	; 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e002      	b.n	8003f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	69b8      	ldr	r0, [r7, #24]
 8003faa:	f7ff ff05 	bl	8003db8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	; 0x38
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xQueueGenericSend+0x32>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <xQueueGenericSend+0x40>
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <xQueueGenericSend+0x44>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <xQueueGenericSend+0x46>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <xQueueGenericSend+0x60>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d103      	bne.n	800402e <xQueueGenericSend+0x6e>
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <xQueueGenericSend+0x72>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <xQueueGenericSend+0x74>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericSend+0x8e>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	623b      	str	r3, [r7, #32]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800404e:	f001 f989 	bl	8005364 <xTaskGetSchedulerState>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <xQueueGenericSend+0x9e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <xQueueGenericSend+0xa2>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueGenericSend+0xa4>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueGenericSend+0xbe>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	61fb      	str	r3, [r7, #28]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800407e:	f001 fec9 	bl	8005e14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <xQueueGenericSend+0xd4>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d129      	bne.n	80040e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409a:	f000 fa0b 	bl	80044b4 <prvCopyDataToQueue>
 800409e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 ff9b 	bl	8004fe8 <xTaskRemoveFromEventList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040b8:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <xQueueGenericSend+0x1f8>)
 80040ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	e00a      	b.n	80040e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <xQueueGenericSend+0x1f8>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040e0:	f001 fec8 	bl	8005e74 <vPortExitCritical>
				return pdPASS;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e063      	b.n	80041b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040ee:	f001 fec1 	bl	8005e74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e05c      	b.n	80041b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	4618      	mov	r0, r3
 8004102:	f000 ffd5 	bl	80050b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004106:	2301      	movs	r3, #1
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800410a:	f001 feb3 	bl	8005e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800410e:	f000 fd47 	bl	8004ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004112:	f001 fe7f 	bl	8005e14 <vPortEnterCritical>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800411c:	b25b      	sxtb	r3, r3
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004122:	d103      	bne.n	800412c <xQueueGenericSend+0x16c>
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004132:	b25b      	sxtb	r3, r3
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004138:	d103      	bne.n	8004142 <xQueueGenericSend+0x182>
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004142:	f001 fe97 	bl	8005e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004146:	1d3a      	adds	r2, r7, #4
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f000 ffc4 	bl	80050dc <xTaskCheckForTimeOut>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d124      	bne.n	80041a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800415a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800415c:	f000 faa2 	bl	80046a4 <prvIsQueueFull>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	3310      	adds	r3, #16
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 feea 	bl	8004f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004176:	f000 fa2d 	bl	80045d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800417a:	f000 fd1f 	bl	8004bbc <xTaskResumeAll>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f af7c 	bne.w	800407e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <xQueueGenericSend+0x1f8>)
 8004188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	e772      	b.n	800407e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800419a:	f000 fa1b 	bl	80045d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800419e:	f000 fd0d 	bl	8004bbc <xTaskResumeAll>
 80041a2:	e76c      	b.n	800407e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a6:	f000 fa15 	bl	80045d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041aa:	f000 fd07 	bl	8004bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3738      	adds	r7, #56	; 0x38
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b090      	sub	sp, #64	; 0x40
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <xQueueGenericSendFromISR+0x3c>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <xQueueGenericSendFromISR+0x40>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <xQueueGenericSendFromISR+0x42>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d103      	bne.n	8004226 <xQueueGenericSendFromISR+0x6a>
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <xQueueGenericSendFromISR+0x6e>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <xQueueGenericSendFromISR+0x70>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	623b      	str	r3, [r7, #32]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004246:	f001 fec7 	bl	8005fd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800424a:	f3ef 8211 	mrs	r2, BASEPRI
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	61fa      	str	r2, [r7, #28]
 8004260:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004262:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <xQueueGenericSendFromISR+0xbc>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d12f      	bne.n	80042d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800427e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800428e:	f000 f911 	bl	80044b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004292:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429a:	d112      	bne.n	80042c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe9d 	bl	8004fe8 <xTaskRemoveFromEventList>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e007      	b.n	80042d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042c6:	3301      	adds	r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	b25a      	sxtb	r2, r3
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042d2:	2301      	movs	r3, #1
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80042d6:	e001      	b.n	80042dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3740      	adds	r7, #64	; 0x40
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <xQueueReceive+0x30>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	623b      	str	r3, [r7, #32]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <xQueueReceive+0x3e>
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <xQueueReceive+0x42>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueReceive+0x44>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xQueueReceive+0x5e>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	61fb      	str	r3, [r7, #28]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004352:	f001 f807 	bl	8005364 <xTaskGetSchedulerState>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <xQueueReceive+0x6e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueReceive+0x72>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueReceive+0x74>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueReceive+0x8e>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61bb      	str	r3, [r7, #24]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004382:	f001 fd47 	bl	8005e14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01f      	beq.n	80043d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004396:	f000 f8f7 	bl	8004588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	1e5a      	subs	r2, r3, #1
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00f      	beq.n	80043ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	3310      	adds	r3, #16
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fe1a 	bl	8004fe8 <xTaskRemoveFromEventList>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043ba:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <xQueueReceive+0x1bc>)
 80043bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043ca:	f001 fd53 	bl	8005e74 <vPortExitCritical>
				return pdPASS;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e069      	b.n	80044a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043d8:	f001 fd4c 	bl	8005e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043dc:	2300      	movs	r3, #0
 80043de:	e062      	b.n	80044a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e6:	f107 0310 	add.w	r3, r7, #16
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fe60 	bl	80050b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043f4:	f001 fd3e 	bl	8005e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043f8:	f000 fbd2 	bl	8004ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043fc:	f001 fd0a 	bl	8005e14 <vPortEnterCritical>
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004406:	b25b      	sxtb	r3, r3
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d103      	bne.n	8004416 <xQueueReceive+0x122>
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004422:	d103      	bne.n	800442c <xQueueReceive+0x138>
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800442c:	f001 fd22 	bl	8005e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004430:	1d3a      	adds	r2, r7, #4
 8004432:	f107 0310 	add.w	r3, r7, #16
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fe4f 	bl	80050dc <xTaskCheckForTimeOut>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d123      	bne.n	800448c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004446:	f000 f917 	bl	8004678 <prvIsQueueEmpty>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d017      	beq.n	8004480 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fd75 	bl	8004f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800445e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004460:	f000 f8b8 	bl	80045d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004464:	f000 fbaa 	bl	8004bbc <xTaskResumeAll>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d189      	bne.n	8004382 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <xQueueReceive+0x1bc>)
 8004470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	e780      	b.n	8004382 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004482:	f000 f8a7 	bl	80045d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004486:	f000 fb99 	bl	8004bbc <xTaskResumeAll>
 800448a:	e77a      	b.n	8004382 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800448c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800448e:	f000 f8a1 	bl	80045d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004492:	f000 fb93 	bl	8004bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004498:	f000 f8ee 	bl	8004678 <prvIsQueueEmpty>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f43f af6f 	beq.w	8004382 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3730      	adds	r7, #48	; 0x30
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10d      	bne.n	80044ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d14d      	bne.n	8004576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ff5e 	bl	80053a0 <xTaskPriorityDisinherit>
 80044e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	e043      	b.n	8004576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d119      	bne.n	8004528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6858      	ldr	r0, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	461a      	mov	r2, r3
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	f001 ffc0 	bl	8006484 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	441a      	add	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d32b      	bcc.n	8004576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	e026      	b.n	8004576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68d8      	ldr	r0, [r3, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	461a      	mov	r2, r3
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	f001 ffa6 	bl	8006484 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	425b      	negs	r3, r3
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d207      	bcs.n	8004564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	425b      	negs	r3, r3
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d105      	bne.n	8004576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3b01      	subs	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800457e:	697b      	ldr	r3, [r7, #20]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	441a      	add	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d303      	bcc.n	80045bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68d9      	ldr	r1, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	461a      	mov	r2, r3
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f001 ff5c 	bl	8006484 <memcpy>
	}
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045dc:	f001 fc1a 	bl	8005e14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045e8:	e011      	b.n	800460e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3324      	adds	r3, #36	; 0x24
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fcf6 	bl	8004fe8 <xTaskRemoveFromEventList>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004602:	f000 fdcd 	bl	80051a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	3b01      	subs	r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800460e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	dce9      	bgt.n	80045ea <prvUnlockQueue+0x16>
 8004616:	e000      	b.n	800461a <prvUnlockQueue+0x46>
					break;
 8004618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004622:	f001 fc27 	bl	8005e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004626:	f001 fbf5 	bl	8005e14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004632:	e011      	b.n	8004658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3310      	adds	r3, #16
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fcd1 	bl	8004fe8 <xTaskRemoveFromEventList>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800464c:	f000 fda8 	bl	80051a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004650:	7bbb      	ldrb	r3, [r7, #14]
 8004652:	3b01      	subs	r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800465c:	2b00      	cmp	r3, #0
 800465e:	dce9      	bgt.n	8004634 <prvUnlockQueue+0x60>
 8004660:	e000      	b.n	8004664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800466c:	f001 fc02 	bl	8005e74 <vPortExitCritical>
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004680:	f001 fbc8 	bl	8005e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e001      	b.n	8004696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004696:	f001 fbed 	bl	8005e74 <vPortExitCritical>

	return xReturn;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046ac:	f001 fbb2 	bl	8005e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d102      	bne.n	80046c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e001      	b.n	80046c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046c6:	f001 fbd5 	bl	8005e74 <vPortExitCritical>

	return xReturn;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e014      	b.n	800470e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046e4:	4a0f      	ldr	r2, [pc, #60]	; (8004724 <vQueueAddToRegistry+0x50>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046f0:	490c      	ldr	r1, [pc, #48]	; (8004724 <vQueueAddToRegistry+0x50>)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <vQueueAddToRegistry+0x50>)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004706:	e006      	b.n	8004716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b07      	cmp	r3, #7
 8004712:	d9e7      	bls.n	80046e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	2000081c 	.word	0x2000081c

08004728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004738:	f001 fb6c 	bl	8005e14 <vPortEnterCritical>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004742:	b25b      	sxtb	r3, r3
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d103      	bne.n	8004752 <vQueueWaitForMessageRestricted+0x2a>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004758:	b25b      	sxtb	r3, r3
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475e:	d103      	bne.n	8004768 <vQueueWaitForMessageRestricted+0x40>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004768:	f001 fb84 	bl	8005e74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3324      	adds	r3, #36	; 0x24
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fc07 	bl	8004f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f7ff ff26 	bl	80045d4 <prvUnlockQueue>
	}
 8004788:	bf00      	nop
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08e      	sub	sp, #56	; 0x38
 8004794:	af04      	add	r7, sp, #16
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	623b      	str	r3, [r7, #32]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	61fb      	str	r3, [r7, #28]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047d6:	235c      	movs	r3, #92	; 0x5c
 80047d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b5c      	cmp	r3, #92	; 0x5c
 80047de:	d00a      	beq.n	80047f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	61bb      	str	r3, [r7, #24]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01e      	beq.n	800483c <xTaskCreateStatic+0xac>
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800480c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	2202      	movs	r2, #2
 8004812:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004816:	2300      	movs	r3, #0
 8004818:	9303      	str	r3, [sp, #12]
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	9302      	str	r3, [sp, #8]
 800481e:	f107 0314 	add.w	r3, r7, #20
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f850 	bl	80048d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004836:	f000 f8dd 	bl	80049f4 <prvAddNewTaskToReadyList>
 800483a:	e001      	b.n	8004840 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004840:	697b      	ldr	r3, [r7, #20]
	}
 8004842:	4618      	mov	r0, r3
 8004844:	3728      	adds	r7, #40	; 0x28
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800484a:	b580      	push	{r7, lr}
 800484c:	b08c      	sub	sp, #48	; 0x30
 800484e:	af04      	add	r7, sp, #16
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fbfa 	bl	8006058 <pvPortMalloc>
 8004864:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800486c:	205c      	movs	r0, #92	; 0x5c
 800486e:	f001 fbf3 	bl	8006058 <pvPortMalloc>
 8004872:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
 8004880:	e005      	b.n	800488e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004882:	6978      	ldr	r0, [r7, #20]
 8004884:	f001 fcb4 	bl	80061f0 <vPortFree>
 8004888:	e001      	b.n	800488e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d017      	beq.n	80048c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	2300      	movs	r3, #0
 80048a0:	9303      	str	r3, [sp, #12]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f80e 	bl	80048d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048b8:	69f8      	ldr	r0, [r7, #28]
 80048ba:	f000 f89b 	bl	80049f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048be:	2301      	movs	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e002      	b.n	80048ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048ca:	69bb      	ldr	r3, [r7, #24]
	}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	461a      	mov	r2, r3
 80048ec:	21a5      	movs	r1, #165	; 0xa5
 80048ee:	f001 fd9d 	bl	800642c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048fc:	3b01      	subs	r3, #1
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	617b      	str	r3, [r7, #20]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01f      	beq.n	8004972 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e012      	b.n	800495e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	7819      	ldrb	r1, [r3, #0]
 8004940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	3334      	adds	r3, #52	; 0x34
 8004948:	460a      	mov	r2, r1
 800494a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d006      	beq.n	8004966 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d9e9      	bls.n	8004938 <prvInitialiseNewTask+0x64>
 8004964:	e000      	b.n	8004968 <prvInitialiseNewTask+0x94>
			{
				break;
 8004966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004970:	e003      	b.n	800497a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2b37      	cmp	r3, #55	; 0x37
 800497e:	d901      	bls.n	8004984 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004980:	2337      	movs	r3, #55	; 0x37
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	2200      	movs	r2, #0
 8004994:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff f978 	bl	8003c90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	3318      	adds	r3, #24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff f973 	bl	8003c90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	68f9      	ldr	r1, [r7, #12]
 80049d2:	69b8      	ldr	r0, [r7, #24]
 80049d4:	f001 f8f4 	bl	8005bc0 <pxPortInitialiseStack>
 80049d8:	4602      	mov	r2, r0
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ea:	bf00      	nop
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049fc:	f001 fa0a 	bl	8005e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a0a:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a12:	4a2a      	ldr	r2, [pc, #168]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d110      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a20:	f000 fbe2 	bl	80051e8 <prvInitialiseTaskLists>
 8004a24:	e00d      	b.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <prvAddNewTaskToReadyList+0xd4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d903      	bls.n	8004a68 <prvAddNewTaskToReadyList+0x74>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <prvAddNewTaskToReadyList+0xd4>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <prvAddNewTaskToReadyList+0xd8>)
 8004a76:	441a      	add	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7ff f913 	bl	8003caa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a84:	f001 f9f6 	bl	8005e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d207      	bcs.n	8004aae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <prvAddNewTaskToReadyList+0xdc>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000d30 	.word	0x20000d30
 8004abc:	2000085c 	.word	0x2000085c
 8004ac0:	20000d3c 	.word	0x20000d3c
 8004ac4:	20000d4c 	.word	0x20000d4c
 8004ac8:	20000d38 	.word	0x20000d38
 8004acc:	20000860 	.word	0x20000860
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ae2:	463a      	mov	r2, r7
 8004ae4:	1d39      	adds	r1, r7, #4
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f87c 	bl	8003be8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	9202      	str	r2, [sp, #8]
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	460a      	mov	r2, r1
 8004b02:	4921      	ldr	r1, [pc, #132]	; (8004b88 <vTaskStartScheduler+0xb4>)
 8004b04:	4821      	ldr	r0, [pc, #132]	; (8004b8c <vTaskStartScheduler+0xb8>)
 8004b06:	f7ff fe43 	bl	8004790 <xTaskCreateStatic>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <vTaskStartScheduler+0xbc>)
 8004b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <vTaskStartScheduler+0xbc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e001      	b.n	8004b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b28:	f000 fcfc 	bl	8005524 <xTimerCreateTimerTask>
 8004b2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d116      	bne.n	8004b62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	613b      	str	r3, [r7, #16]
}
 8004b46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <vTaskStartScheduler+0xc0>)
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <vTaskStartScheduler+0xc4>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <vTaskStartScheduler+0xc8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b5c:	f001 f8b8 	bl	8005cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b60:	e00e      	b.n	8004b80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b68:	d10a      	bne.n	8004b80 <vTaskStartScheduler+0xac>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60fb      	str	r3, [r7, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vTaskStartScheduler+0xaa>
}
 8004b80:	bf00      	nop
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	080065c8 	.word	0x080065c8
 8004b8c:	080051b9 	.word	0x080051b9
 8004b90:	20000d54 	.word	0x20000d54
 8004b94:	20000d50 	.word	0x20000d50
 8004b98:	20000d3c 	.word	0x20000d3c
 8004b9c:	20000d34 	.word	0x20000d34

08004ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <vTaskSuspendAll+0x18>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <vTaskSuspendAll+0x18>)
 8004bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	20000d58 	.word	0x20000d58

08004bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bca:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <xTaskResumeAll+0x118>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	603b      	str	r3, [r7, #0]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004be8:	f001 f914 	bl	8005e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bec:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <xTaskResumeAll+0x118>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <xTaskResumeAll+0x118>)
 8004bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <xTaskResumeAll+0x118>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d162      	bne.n	8004cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <xTaskResumeAll+0x11c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d05e      	beq.n	8004cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c06:	e02f      	b.n	8004c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c08:	4b34      	ldr	r3, [pc, #208]	; (8004cdc <xTaskResumeAll+0x120>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3318      	adds	r3, #24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff f8a5 	bl	8003d64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f8a0 	bl	8003d64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <xTaskResumeAll+0x124>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d903      	bls.n	8004c38 <xTaskResumeAll+0x7c>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <xTaskResumeAll+0x124>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <xTaskResumeAll+0x128>)
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7ff f82b 	bl	8003caa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <xTaskResumeAll+0x12c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c62:	4b22      	ldr	r3, [pc, #136]	; (8004cec <xTaskResumeAll+0x130>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c68:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <xTaskResumeAll+0x120>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1cb      	bne.n	8004c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c76:	f000 fb55 	bl	8005324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <xTaskResumeAll+0x134>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d010      	beq.n	8004ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c86:	f000 f847 	bl	8004d18 <xTaskIncrementTick>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c90:	4b16      	ldr	r3, [pc, #88]	; (8004cec <xTaskResumeAll+0x130>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f1      	bne.n	8004c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ca2:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <xTaskResumeAll+0x134>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <xTaskResumeAll+0x130>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <xTaskResumeAll+0x138>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cc4:	f001 f8d6 	bl	8005e74 <vPortExitCritical>

	return xAlreadyYielded;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000d58 	.word	0x20000d58
 8004cd8:	20000d30 	.word	0x20000d30
 8004cdc:	20000cf0 	.word	0x20000cf0
 8004ce0:	20000d38 	.word	0x20000d38
 8004ce4:	20000860 	.word	0x20000860
 8004ce8:	2000085c 	.word	0x2000085c
 8004cec:	20000d44 	.word	0x20000d44
 8004cf0:	20000d40 	.word	0x20000d40
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <xTaskGetTickCount+0x1c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d04:	687b      	ldr	r3, [r7, #4]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000d34 	.word	0x20000d34

08004d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d22:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <xTaskIncrementTick+0x148>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 808f 	bne.w	8004e4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d2c:	4b4d      	ldr	r3, [pc, #308]	; (8004e64 <xTaskIncrementTick+0x14c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d34:	4a4b      	ldr	r2, [pc, #300]	; (8004e64 <xTaskIncrementTick+0x14c>)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d120      	bne.n	8004d82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d40:	4b49      	ldr	r3, [pc, #292]	; (8004e68 <xTaskIncrementTick+0x150>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	603b      	str	r3, [r7, #0]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <xTaskIncrementTick+0x46>
 8004d60:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <xTaskIncrementTick+0x150>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <xTaskIncrementTick+0x154>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <xTaskIncrementTick+0x150>)
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	4a3f      	ldr	r2, [pc, #252]	; (8004e6c <xTaskIncrementTick+0x154>)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	4a3d      	ldr	r2, [pc, #244]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	f000 fad1 	bl	8005324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d82:	4b3c      	ldr	r3, [pc, #240]	; (8004e74 <xTaskIncrementTick+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d349      	bcc.n	8004e20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <xTaskIncrementTick+0x150>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d96:	4b37      	ldr	r3, [pc, #220]	; (8004e74 <xTaskIncrementTick+0x15c>)
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9c:	601a      	str	r2, [r3, #0]
					break;
 8004d9e:	e03f      	b.n	8004e20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da0:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <xTaskIncrementTick+0x150>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d203      	bcs.n	8004dc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004db8:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <xTaskIncrementTick+0x15c>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dbe:	e02f      	b.n	8004e20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe ffcd 	bl	8003d64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe ffc4 	bl	8003d64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <xTaskIncrementTick+0x160>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d903      	bls.n	8004df0 <xTaskIncrementTick+0xd8>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <xTaskIncrementTick+0x160>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <xTaskIncrementTick+0x164>)
 8004dfe:	441a      	add	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7fe ff4f 	bl	8003caa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <xTaskIncrementTick+0x168>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d3b8      	bcc.n	8004d8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e1e:	e7b5      	b.n	8004d8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e20:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <xTaskIncrementTick+0x168>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4915      	ldr	r1, [pc, #84]	; (8004e7c <xTaskIncrementTick+0x164>)
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d901      	bls.n	8004e3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <xTaskIncrementTick+0x16c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e004      	b.n	8004e54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <xTaskIncrementTick+0x170>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <xTaskIncrementTick+0x170>)
 8004e52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e54:	697b      	ldr	r3, [r7, #20]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000d58 	.word	0x20000d58
 8004e64:	20000d34 	.word	0x20000d34
 8004e68:	20000ce8 	.word	0x20000ce8
 8004e6c:	20000cec 	.word	0x20000cec
 8004e70:	20000d48 	.word	0x20000d48
 8004e74:	20000d50 	.word	0x20000d50
 8004e78:	20000d38 	.word	0x20000d38
 8004e7c:	20000860 	.word	0x20000860
 8004e80:	2000085c 	.word	0x2000085c
 8004e84:	20000d44 	.word	0x20000d44
 8004e88:	20000d40 	.word	0x20000d40

08004e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e92:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <vTaskSwitchContext+0xa8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e9a:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <vTaskSwitchContext+0xac>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ea0:	e041      	b.n	8004f26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004ea2:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <vTaskSwitchContext+0xac>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <vTaskSwitchContext+0xb0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e010      	b.n	8004ed2 <vTaskSwitchContext+0x46>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <vTaskSwitchContext+0x40>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	607b      	str	r3, [r7, #4]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <vTaskSwitchContext+0x3e>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	491b      	ldr	r1, [pc, #108]	; (8004f40 <vTaskSwitchContext+0xb4>)
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0e4      	beq.n	8004eb0 <vTaskSwitchContext+0x24>
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <vTaskSwitchContext+0xb4>)
 8004ef2:	4413      	add	r3, r2
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3308      	adds	r3, #8
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d104      	bne.n	8004f16 <vTaskSwitchContext+0x8a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <vTaskSwitchContext+0xb8>)
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <vTaskSwitchContext+0xb0>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6013      	str	r3, [r2, #0]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000d58 	.word	0x20000d58
 8004f38:	20000d44 	.word	0x20000d44
 8004f3c:	20000d38 	.word	0x20000d38
 8004f40:	20000860 	.word	0x20000860
 8004f44:	2000085c 	.word	0x2000085c

08004f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <vTaskPlaceOnEventList+0x44>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3318      	adds	r3, #24
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe febb 	bl	8003cf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6838      	ldr	r0, [r7, #0]
 8004f80:	f000 fa7c 	bl	800547c <prvAddCurrentTaskToDelayedList>
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	2000085c 	.word	0x2000085c

08004f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7fe fe72 	bl	8003caa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f000 fa51 	bl	800547c <prvAddCurrentTaskToDelayedList>
	}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	2000085c 	.word	0x2000085c

08004fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3318      	adds	r3, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe fea3 	bl	8003d64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501e:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <xTaskRemoveFromEventList+0xb0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11d      	bne.n	8005062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fe9a 	bl	8003d64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <xTaskRemoveFromEventList+0x5c>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <xTaskRemoveFromEventList+0xb8>)
 8005052:	441a      	add	r2, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fe fe25 	bl	8003caa <vListInsertEnd>
 8005060:	e005      	b.n	800506e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3318      	adds	r3, #24
 8005066:	4619      	mov	r1, r3
 8005068:	480e      	ldr	r0, [pc, #56]	; (80050a4 <xTaskRemoveFromEventList+0xbc>)
 800506a:	f7fe fe1e 	bl	8003caa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <xTaskRemoveFromEventList+0xc0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d905      	bls.n	8005088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <xTaskRemoveFromEventList+0xc4>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e001      	b.n	800508c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800508c:	697b      	ldr	r3, [r7, #20]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000d58 	.word	0x20000d58
 800509c:	20000d38 	.word	0x20000d38
 80050a0:	20000860 	.word	0x20000860
 80050a4:	20000cf0 	.word	0x20000cf0
 80050a8:	2000085c 	.word	0x2000085c
 80050ac:	20000d44 	.word	0x20000d44

080050b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <vTaskInternalSetTimeOutState+0x24>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <vTaskInternalSetTimeOutState+0x28>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000d48 	.word	0x20000d48
 80050d8:	20000d34 	.word	0x20000d34

080050dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	613b      	str	r3, [r7, #16]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800511e:	f000 fe79 	bl	8005e14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <xTaskCheckForTimeOut+0xbc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513a:	d102      	bne.n	8005142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e023      	b.n	800518a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <xTaskCheckForTimeOut+0xc0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d007      	beq.n	800515e <xTaskCheckForTimeOut+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e015      	b.n	800518a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d20b      	bcs.n	8005180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff9b 	bl	80050b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e004      	b.n	800518a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f000 fe73 	bl	8005e74 <vPortExitCritical>

	return xReturn;
 800518e:	69fb      	ldr	r3, [r7, #28]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000d34 	.word	0x20000d34
 800519c:	20000d48 	.word	0x20000d48

080051a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <vTaskMissedYield+0x14>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000d44 	.word	0x20000d44

080051b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c0:	f000 f852 	bl	8005268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <prvIdleTask+0x28>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d9f9      	bls.n	80051c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <prvIdleTask+0x2c>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051dc:	e7f0      	b.n	80051c0 <prvIdleTask+0x8>
 80051de:	bf00      	nop
 80051e0:	20000860 	.word	0x20000860
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e00c      	b.n	800520e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <prvInitialiseTaskLists+0x60>)
 8005200:	4413      	add	r3, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fd24 	bl	8003c50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b37      	cmp	r3, #55	; 0x37
 8005212:	d9ef      	bls.n	80051f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <prvInitialiseTaskLists+0x64>)
 8005216:	f7fe fd1b 	bl	8003c50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800521a:	480d      	ldr	r0, [pc, #52]	; (8005250 <prvInitialiseTaskLists+0x68>)
 800521c:	f7fe fd18 	bl	8003c50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005220:	480c      	ldr	r0, [pc, #48]	; (8005254 <prvInitialiseTaskLists+0x6c>)
 8005222:	f7fe fd15 	bl	8003c50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005226:	480c      	ldr	r0, [pc, #48]	; (8005258 <prvInitialiseTaskLists+0x70>)
 8005228:	f7fe fd12 	bl	8003c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800522c:	480b      	ldr	r0, [pc, #44]	; (800525c <prvInitialiseTaskLists+0x74>)
 800522e:	f7fe fd0f 	bl	8003c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <prvInitialiseTaskLists+0x78>)
 8005234:	4a05      	ldr	r2, [pc, #20]	; (800524c <prvInitialiseTaskLists+0x64>)
 8005236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvInitialiseTaskLists+0x7c>)
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <prvInitialiseTaskLists+0x68>)
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000860 	.word	0x20000860
 800524c:	20000cc0 	.word	0x20000cc0
 8005250:	20000cd4 	.word	0x20000cd4
 8005254:	20000cf0 	.word	0x20000cf0
 8005258:	20000d04 	.word	0x20000d04
 800525c:	20000d1c 	.word	0x20000d1c
 8005260:	20000ce8 	.word	0x20000ce8
 8005264:	20000cec 	.word	0x20000cec

08005268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800526e:	e019      	b.n	80052a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005270:	f000 fdd0 	bl	8005e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <prvCheckTasksWaitingTermination+0x50>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fd6f 	bl	8003d64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <prvCheckTasksWaitingTermination+0x54>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3b01      	subs	r3, #1
 800528c:	4a0b      	ldr	r2, [pc, #44]	; (80052bc <prvCheckTasksWaitingTermination+0x54>)
 800528e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800529a:	f000 fdeb 	bl	8005e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f810 	bl	80052c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e1      	bne.n	8005270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000d04 	.word	0x20000d04
 80052bc:	20000d30 	.word	0x20000d30
 80052c0:	20000d18 	.word	0x20000d18

080052c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 ff88 	bl	80061f0 <vPortFree>
				vPortFree( pxTCB );
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 ff85 	bl	80061f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052e6:	e018      	b.n	800531a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d103      	bne.n	80052fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 ff7c 	bl	80061f0 <vPortFree>
	}
 80052f8:	e00f      	b.n	800531a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005300:	2b02      	cmp	r3, #2
 8005302:	d00a      	beq.n	800531a <prvDeleteTCB+0x56>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	60fb      	str	r3, [r7, #12]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <prvDeleteTCB+0x54>
	}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <prvResetNextTaskUnblockTime+0x38>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <prvResetNextTaskUnblockTime+0x3c>)
 8005336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800533a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800533c:	e008      	b.n	8005350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <prvResetNextTaskUnblockTime+0x38>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a04      	ldr	r2, [pc, #16]	; (8005360 <prvResetNextTaskUnblockTime+0x3c>)
 800534e:	6013      	str	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	20000ce8 	.word	0x20000ce8
 8005360:	20000d50 	.word	0x20000d50

08005364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <xTaskGetSchedulerState+0x34>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005372:	2301      	movs	r3, #1
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	e008      	b.n	800538a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <xTaskGetSchedulerState+0x38>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005380:	2302      	movs	r3, #2
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	e001      	b.n	800538a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800538a:	687b      	ldr	r3, [r7, #4]
	}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000d3c 	.word	0x20000d3c
 800539c:	20000d58 	.word	0x20000d58

080053a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d056      	beq.n	8005464 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <xTaskPriorityDisinherit+0xd0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d00a      	beq.n	80053d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60bb      	str	r3, [r7, #8]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	429a      	cmp	r2, r3
 8005408:	d02c      	beq.n	8005464 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	2b00      	cmp	r3, #0
 8005410:	d128      	bne.n	8005464 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3304      	adds	r3, #4
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fca4 	bl	8003d64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <xTaskPriorityDisinherit+0xd4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d903      	bls.n	8005444 <xTaskPriorityDisinherit+0xa4>
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <xTaskPriorityDisinherit+0xd4>)
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a09      	ldr	r2, [pc, #36]	; (8005478 <xTaskPriorityDisinherit+0xd8>)
 8005452:	441a      	add	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7fe fc25 	bl	8003caa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005464:	697b      	ldr	r3, [r7, #20]
	}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2000085c 	.word	0x2000085c
 8005474:	20000d38 	.word	0x20000d38
 8005478:	20000860 	.word	0x20000860

0800547c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <prvAddCurrentTaskToDelayedList+0x90>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe fc66 	bl	8003d64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549e:	d10a      	bne.n	80054b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4819      	ldr	r0, [pc, #100]	; (8005514 <prvAddCurrentTaskToDelayedList+0x98>)
 80054b0:	f7fe fbfb 	bl	8003caa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054b4:	e026      	b.n	8005504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4413      	add	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054be:	4b14      	ldr	r3, [pc, #80]	; (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d209      	bcs.n	80054e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f7fe fc09 	bl	8003cf2 <vListInsert>
}
 80054e0:	e010      	b.n	8005504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <prvAddCurrentTaskToDelayedList+0xa0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f7fe fbff 	bl	8003cf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d202      	bcs.n	8005504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000d34 	.word	0x20000d34
 8005510:	2000085c 	.word	0x2000085c
 8005514:	20000d1c 	.word	0x20000d1c
 8005518:	20000cec 	.word	0x20000cec
 800551c:	20000ce8 	.word	0x20000ce8
 8005520:	20000d50 	.word	0x20000d50

08005524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800552e:	f000 fb07 	bl	8005b40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005532:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <xTimerCreateTimerTask+0x80>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d021      	beq.n	800557e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005542:	1d3a      	adds	r2, r7, #4
 8005544:	f107 0108 	add.w	r1, r7, #8
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fb65 	bl	8003c1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	9202      	str	r2, [sp, #8]
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	2302      	movs	r3, #2
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	460a      	mov	r2, r1
 8005564:	4910      	ldr	r1, [pc, #64]	; (80055a8 <xTimerCreateTimerTask+0x84>)
 8005566:	4811      	ldr	r0, [pc, #68]	; (80055ac <xTimerCreateTimerTask+0x88>)
 8005568:	f7ff f912 	bl	8004790 <xTaskCreateStatic>
 800556c:	4603      	mov	r3, r0
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <xTimerCreateTimerTask+0x8c>)
 8005570:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <xTimerCreateTimerTask+0x8c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	613b      	str	r3, [r7, #16]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800559a:	697b      	ldr	r3, [r7, #20]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000d8c 	.word	0x20000d8c
 80055a8:	080065d0 	.word	0x080065d0
 80055ac:	080056e9 	.word	0x080056e9
 80055b0:	20000d90 	.word	0x20000d90

080055b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	623b      	str	r3, [r7, #32]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055e2:	4b1a      	ldr	r3, [pc, #104]	; (800564c <xTimerGenericCommand+0x98>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02a      	beq.n	8005640 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	dc18      	bgt.n	800562e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055fc:	f7ff feb2 	bl	8005364 <xTaskGetSchedulerState>
 8005600:	4603      	mov	r3, r0
 8005602:	2b02      	cmp	r3, #2
 8005604:	d109      	bne.n	800561a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005606:	4b11      	ldr	r3, [pc, #68]	; (800564c <xTimerGenericCommand+0x98>)
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	f107 0110 	add.w	r1, r7, #16
 800560e:	2300      	movs	r3, #0
 8005610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005612:	f7fe fcd5 	bl	8003fc0 <xQueueGenericSend>
 8005616:	6278      	str	r0, [r7, #36]	; 0x24
 8005618:	e012      	b.n	8005640 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <xTimerGenericCommand+0x98>)
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f107 0110 	add.w	r1, r7, #16
 8005622:	2300      	movs	r3, #0
 8005624:	2200      	movs	r2, #0
 8005626:	f7fe fccb 	bl	8003fc0 <xQueueGenericSend>
 800562a:	6278      	str	r0, [r7, #36]	; 0x24
 800562c:	e008      	b.n	8005640 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <xTimerGenericCommand+0x98>)
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	f107 0110 	add.w	r1, r7, #16
 8005636:	2300      	movs	r3, #0
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	f7fe fdbf 	bl	80041bc <xQueueGenericSendFromISR>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005642:	4618      	mov	r0, r3
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000d8c 	.word	0x20000d8c

08005650 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565a:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <prvProcessExpiredTimer+0x94>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fb7b 	bl	8003d64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d022      	beq.n	80056c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	18d1      	adds	r1, r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	6978      	ldr	r0, [r7, #20]
 800568a:	f000 f8d1 	bl	8005830 <prvInsertTimerInActiveList>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01f      	beq.n	80056d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2300      	movs	r3, #0
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	2100      	movs	r1, #0
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff ff88 	bl	80055b4 <xTimerGenericCommand>
 80056a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d113      	bne.n	80056d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	6978      	ldr	r0, [r7, #20]
 80056da:	4798      	blx	r3
}
 80056dc:	bf00      	nop
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000d84 	.word	0x20000d84

080056e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056f0:	f107 0308 	add.w	r3, r7, #8
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f857 	bl	80057a8 <prvGetNextExpireTime>
 80056fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f803 	bl	800570c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005706:	f000 f8d5 	bl	80058b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800570a:	e7f1      	b.n	80056f0 <prvTimerTask+0x8>

0800570c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005716:	f7ff fa43 	bl	8004ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800571a:	f107 0308 	add.w	r3, r7, #8
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f866 	bl	80057f0 <prvSampleTimeNow>
 8005724:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d130      	bne.n	800578e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <prvProcessTimerOrBlockTask+0x3c>
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	429a      	cmp	r2, r3
 8005738:	d806      	bhi.n	8005748 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800573a:	f7ff fa3f 	bl	8004bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff85 	bl	8005650 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005746:	e024      	b.n	8005792 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800574e:	4b13      	ldr	r3, [pc, #76]	; (800579c <prvProcessTimerOrBlockTask+0x90>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <prvProcessTimerOrBlockTask+0x50>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <prvProcessTimerOrBlockTask+0x52>
 800575c:	2300      	movs	r3, #0
 800575e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <prvProcessTimerOrBlockTask+0x94>)
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	4619      	mov	r1, r3
 800576e:	f7fe ffdb 	bl	8004728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005772:	f7ff fa23 	bl	8004bbc <xTaskResumeAll>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <prvProcessTimerOrBlockTask+0x98>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
}
 800578c:	e001      	b.n	8005792 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800578e:	f7ff fa15 	bl	8004bbc <xTaskResumeAll>
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000d88 	.word	0x20000d88
 80057a0:	20000d8c 	.word	0x20000d8c
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <prvGetNextExpireTime+0x44>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <prvGetNextExpireTime+0x16>
 80057ba:	2201      	movs	r2, #1
 80057bc:	e000      	b.n	80057c0 <prvGetNextExpireTime+0x18>
 80057be:	2200      	movs	r2, #0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d105      	bne.n	80057d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057cc:	4b07      	ldr	r3, [pc, #28]	; (80057ec <prvGetNextExpireTime+0x44>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e001      	b.n	80057dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057dc:	68fb      	ldr	r3, [r7, #12]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20000d84 	.word	0x20000d84

080057f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057f8:	f7ff fa7e 	bl	8004cf8 <xTaskGetTickCount>
 80057fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <prvSampleTimeNow+0x3c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d205      	bcs.n	8005814 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005808:	f000 f936 	bl	8005a78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e002      	b.n	800581a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800581a:	4a04      	ldr	r2, [pc, #16]	; (800582c <prvSampleTimeNow+0x3c>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000d94 	.word	0x20000d94

08005830 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d812      	bhi.n	800587c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	429a      	cmp	r2, r3
 8005862:	d302      	bcc.n	800586a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e01b      	b.n	80058a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <prvInsertTimerInActiveList+0x7c>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3304      	adds	r3, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f7fe fa3c 	bl	8003cf2 <vListInsert>
 800587a:	e012      	b.n	80058a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d206      	bcs.n	8005892 <prvInsertTimerInActiveList+0x62>
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d302      	bcc.n	8005892 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800588c:	2301      	movs	r3, #1
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e007      	b.n	80058a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <prvInsertTimerInActiveList+0x80>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7fe fa28 	bl	8003cf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058a2:	697b      	ldr	r3, [r7, #20]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000d88 	.word	0x20000d88
 80058b0:	20000d84 	.word	0x20000d84

080058b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ba:	e0ca      	b.n	8005a52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da18      	bge.n	80058f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	3304      	adds	r3, #4
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	61fb      	str	r3, [r7, #28]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ea:	6850      	ldr	r0, [r2, #4]
 80058ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ee:	6892      	ldr	r2, [r2, #8]
 80058f0:	4611      	mov	r1, r2
 80058f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f2c0 80ab 	blt.w	8005a52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	3304      	adds	r3, #4
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fa29 	bl	8003d64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005912:	463b      	mov	r3, r7
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff6b 	bl	80057f0 <prvSampleTimeNow>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b09      	cmp	r3, #9
 8005920:	f200 8096 	bhi.w	8005a50 <prvProcessReceivedCommands+0x19c>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <prvProcessReceivedCommands+0x78>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	08005955 	.word	0x08005955
 8005930:	08005955 	.word	0x08005955
 8005934:	08005955 	.word	0x08005955
 8005938:	080059c9 	.word	0x080059c9
 800593c:	080059dd 	.word	0x080059dd
 8005940:	08005a27 	.word	0x08005a27
 8005944:	08005955 	.word	0x08005955
 8005948:	08005955 	.word	0x08005955
 800594c:	080059c9 	.word	0x080059c9
 8005950:	080059dd 	.word	0x080059dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	b2da      	uxtb	r2, r3
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	18d1      	adds	r1, r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005974:	f7ff ff5c 	bl	8005830 <prvInsertTimerInActiveList>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d069      	beq.n	8005a52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005984:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d05e      	beq.n	8005a52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	441a      	add	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2300      	movs	r3, #0
 80059a2:	2100      	movs	r1, #0
 80059a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a6:	f7ff fe05 	bl	80055b4 <xTimerGenericCommand>
 80059aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d14f      	bne.n	8005a52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	61bb      	str	r3, [r7, #24]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059da:	e03a      	b.n	8005a52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	617b      	str	r3, [r7, #20]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	18d1      	adds	r1, r2, r3
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a20:	f7ff ff06 	bl	8005830 <prvInsertTimerInActiveList>
					break;
 8005a24:	e015      	b.n	8005a52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d103      	bne.n	8005a3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a36:	f000 fbdb 	bl	80061f0 <vPortFree>
 8005a3a:	e00a      	b.n	8005a52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a4e:	e000      	b.n	8005a52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005a50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <prvProcessReceivedCommands+0x1c0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	1d39      	adds	r1, r7, #4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fc4a 	bl	80042f4 <xQueueReceive>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f47f af2a 	bne.w	80058bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	3730      	adds	r7, #48	; 0x30
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000d8c 	.word	0x20000d8c

08005a78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a7e:	e048      	b.n	8005b12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a80:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <prvSwitchTimerLists+0xc0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <prvSwitchTimerLists+0xc0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe f963 	bl	8003d64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d02e      	beq.n	8005b12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d90e      	bls.n	8005ae4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ad2:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <prvSwitchTimerLists+0xc0>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f7fe f908 	bl	8003cf2 <vListInsert>
 8005ae2:	e016      	b.n	8005b12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	2100      	movs	r1, #0
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff fd60 	bl	80055b4 <xTimerGenericCommand>
 8005af4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	603b      	str	r3, [r7, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <prvSwitchTimerLists+0xc0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1b1      	bne.n	8005a80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <prvSwitchTimerLists+0xc0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <prvSwitchTimerLists+0xc4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <prvSwitchTimerLists+0xc0>)
 8005b28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b2a:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <prvSwitchTimerLists+0xc4>)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6013      	str	r3, [r2, #0]
}
 8005b30:	bf00      	nop
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000d84 	.word	0x20000d84
 8005b3c:	20000d88 	.word	0x20000d88

08005b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b46:	f000 f965 	bl	8005e14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <prvCheckForValidListAndQueue+0x60>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d120      	bne.n	8005b94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b52:	4814      	ldr	r0, [pc, #80]	; (8005ba4 <prvCheckForValidListAndQueue+0x64>)
 8005b54:	f7fe f87c 	bl	8003c50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b58:	4813      	ldr	r0, [pc, #76]	; (8005ba8 <prvCheckForValidListAndQueue+0x68>)
 8005b5a:	f7fe f879 	bl	8003c50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <prvCheckForValidListAndQueue+0x6c>)
 8005b60:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <prvCheckForValidListAndQueue+0x64>)
 8005b62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b64:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <prvCheckForValidListAndQueue+0x70>)
 8005b66:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <prvCheckForValidListAndQueue+0x68>)
 8005b68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <prvCheckForValidListAndQueue+0x74>)
 8005b70:	4a11      	ldr	r2, [pc, #68]	; (8005bb8 <prvCheckForValidListAndQueue+0x78>)
 8005b72:	2110      	movs	r1, #16
 8005b74:	200a      	movs	r0, #10
 8005b76:	f7fe f987 	bl	8003e88 <xQueueGenericCreateStatic>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <prvCheckForValidListAndQueue+0x60>)
 8005b7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <prvCheckForValidListAndQueue+0x60>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <prvCheckForValidListAndQueue+0x60>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	490b      	ldr	r1, [pc, #44]	; (8005bbc <prvCheckForValidListAndQueue+0x7c>)
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fda0 	bl	80046d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b94:	f000 f96e 	bl	8005e74 <vPortExitCritical>
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000d8c 	.word	0x20000d8c
 8005ba4:	20000d5c 	.word	0x20000d5c
 8005ba8:	20000d70 	.word	0x20000d70
 8005bac:	20000d84 	.word	0x20000d84
 8005bb0:	20000d88 	.word	0x20000d88
 8005bb4:	20000e38 	.word	0x20000e38
 8005bb8:	20000d98 	.word	0x20000d98
 8005bbc:	080065d8 	.word	0x080065d8

08005bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3b04      	subs	r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3b04      	subs	r3, #4
 8005bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 0201 	bic.w	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf0:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <pxPortInitialiseStack+0x64>)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3b14      	subs	r3, #20
 8005bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b04      	subs	r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f06f 0202 	mvn.w	r2, #2
 8005c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3b20      	subs	r3, #32
 8005c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c16:	68fb      	ldr	r3, [r7, #12]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	08005c29 	.word	0x08005c29

08005c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <prvTaskExitError+0x54>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3a:	d00a      	beq.n	8005c52 <prvTaskExitError+0x2a>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <prvTaskExitError+0x28>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60bb      	str	r3, [r7, #8]
}
 8005c64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c66:	bf00      	nop
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0fc      	beq.n	8005c68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <pxCurrentTCBConst2>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	6808      	ldr	r0, [r1, #0]
 8005c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8a:	f380 8809 	msr	PSP, r0
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	4770      	bx	lr
 8005c9c:	f3af 8000 	nop.w

08005ca0 <pxCurrentTCBConst2>:
 8005ca0:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop

08005ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <prvPortStartFirstTask+0x24>)
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	6800      	ldr	r0, [r0, #0]
 8005cae:	f380 8808 	msr	MSP, r0
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8814 	msr	CONTROL, r0
 8005cba:	b662      	cpsie	i
 8005cbc:	b661      	cpsie	f
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	df00      	svc	0
 8005cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cca:	bf00      	nop
 8005ccc:	e000ed08 	.word	0xe000ed08

08005cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cd6:	4b46      	ldr	r3, [pc, #280]	; (8005df0 <xPortStartScheduler+0x120>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a46      	ldr	r2, [pc, #280]	; (8005df4 <xPortStartScheduler+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d10a      	bne.n	8005cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	; (8005df0 <xPortStartScheduler+0x120>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3f      	ldr	r2, [pc, #252]	; (8005df8 <xPortStartScheduler+0x128>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10a      	bne.n	8005d16 <xPortStartScheduler+0x46>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d16:	4b39      	ldr	r3, [pc, #228]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b31      	ldr	r3, [pc, #196]	; (8005e00 <xPortStartScheduler+0x130>)
 8005d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d3e:	4b31      	ldr	r3, [pc, #196]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d40:	2207      	movs	r2, #7
 8005d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d44:	e009      	b.n	8005d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d46:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	4a2d      	ldr	r2, [pc, #180]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d0ef      	beq.n	8005d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d66:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1c3 0307 	rsb	r3, r3, #7
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d00a      	beq.n	8005d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60bb      	str	r3, [r7, #8]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d9a:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <xPortStartScheduler+0x134>)
 8005d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005da6:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <xPortStartScheduler+0x138>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <xPortStartScheduler+0x138>)
 8005dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <xPortStartScheduler+0x138>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <xPortStartScheduler+0x138>)
 8005db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dbe:	f000 f8dd 	bl	8005f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <xPortStartScheduler+0x13c>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dc8:	f000 f8fc 	bl	8005fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <xPortStartScheduler+0x140>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <xPortStartScheduler+0x140>)
 8005dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dd8:	f7ff ff66 	bl	8005ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ddc:	f7ff f856 	bl	8004e8c <vTaskSwitchContext>
	prvTaskExitError();
 8005de0:	f7ff ff22 	bl	8005c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000ed00 	.word	0xe000ed00
 8005df4:	410fc271 	.word	0x410fc271
 8005df8:	410fc270 	.word	0x410fc270
 8005dfc:	e000e400 	.word	0xe000e400
 8005e00:	20000e88 	.word	0x20000e88
 8005e04:	20000e8c 	.word	0x20000e8c
 8005e08:	e000ed20 	.word	0xe000ed20
 8005e0c:	2000000c 	.word	0x2000000c
 8005e10:	e000ef34 	.word	0xe000ef34

08005e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	607b      	str	r3, [r7, #4]
}
 8005e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <vPortEnterCritical+0x58>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <vPortEnterCritical+0x58>)
 8005e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <vPortEnterCritical+0x58>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d10f      	bne.n	8005e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <vPortEnterCritical+0x5c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	603b      	str	r3, [r7, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <vPortEnterCritical+0x4a>
	}
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	2000000c 	.word	0x2000000c
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <vPortExitCritical+0x50>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <vPortExitCritical+0x24>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	607b      	str	r3, [r7, #4]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <vPortExitCritical+0x50>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <vPortExitCritical+0x50>)
 8005ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <vPortExitCritical+0x50>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <vPortExitCritical+0x42>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f383 8811 	msr	BASEPRI, r3
}
 8005eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	2000000c 	.word	0x2000000c
	...

08005ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ed0:	f3ef 8009 	mrs	r0, PSP
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <pxCurrentTCBConst>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	f01e 0f10 	tst.w	lr, #16
 8005ee0:	bf08      	it	eq
 8005ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eea:	6010      	str	r0, [r2, #0]
 8005eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ef4:	f380 8811 	msr	BASEPRI, r0
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f7fe ffc4 	bl	8004e8c <vTaskSwitchContext>
 8005f04:	f04f 0000 	mov.w	r0, #0
 8005f08:	f380 8811 	msr	BASEPRI, r0
 8005f0c:	bc09      	pop	{r0, r3}
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	6808      	ldr	r0, [r1, #0]
 8005f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f16:	f01e 0f10 	tst.w	lr, #16
 8005f1a:	bf08      	it	eq
 8005f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f20:	f380 8809 	msr	PSP, r0
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w

08005f30 <pxCurrentTCBConst>:
 8005f30:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop

08005f38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	607b      	str	r3, [r7, #4]
}
 8005f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f52:	f7fe fee1 	bl	8004d18 <xTaskIncrementTick>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <xPortSysTickHandler+0x40>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	2300      	movs	r3, #0
 8005f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f383 8811 	msr	BASEPRI, r3
}
 8005f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <vPortSetupTimerInterrupt+0x34>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <vPortSetupTimerInterrupt+0x38>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <vPortSetupTimerInterrupt+0x3c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <vPortSetupTimerInterrupt+0x40>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	099b      	lsrs	r3, r3, #6
 8005f98:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <vPortSetupTimerInterrupt+0x44>)
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f9e:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <vPortSetupTimerInterrupt+0x34>)
 8005fa0:	2207      	movs	r2, #7
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e010 	.word	0xe000e010
 8005fb4:	e000e018 	.word	0xe000e018
 8005fb8:	20000000 	.word	0x20000000
 8005fbc:	10624dd3 	.word	0x10624dd3
 8005fc0:	e000e014 	.word	0xe000e014

08005fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fd4 <vPortEnableVFP+0x10>
 8005fc8:	6801      	ldr	r1, [r0, #0]
 8005fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fce:	6001      	str	r1, [r0, #0]
 8005fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fd2:	bf00      	nop
 8005fd4:	e000ed88 	.word	0xe000ed88

08005fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fde:	f3ef 8305 	mrs	r3, IPSR
 8005fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b0f      	cmp	r3, #15
 8005fe8:	d914      	bls.n	8006014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <vPortValidateInterruptPriority+0x70>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <vPortValidateInterruptPriority+0x74>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	7afa      	ldrb	r2, [r7, #11]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d20a      	bcs.n	8006014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <vPortValidateInterruptPriority+0x78>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <vPortValidateInterruptPriority+0x7c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d90a      	bls.n	800603a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	603b      	str	r3, [r7, #0]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <vPortValidateInterruptPriority+0x60>
	}
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	e000e3f0 	.word	0xe000e3f0
 800604c:	20000e88 	.word	0x20000e88
 8006050:	e000ed0c 	.word	0xe000ed0c
 8006054:	20000e8c 	.word	0x20000e8c

08006058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006064:	f7fe fd9c 	bl	8004ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006068:	4b5b      	ldr	r3, [pc, #364]	; (80061d8 <pvPortMalloc+0x180>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006070:	f000 f920 	bl	80062b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <pvPortMalloc+0x184>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8093 	bne.w	80061a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01d      	beq.n	80060c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006088:	2208      	movs	r2, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d014      	beq.n	80060c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <pvPortMalloc+0x6c>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	617b      	str	r3, [r7, #20]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d06e      	beq.n	80061a8 <pvPortMalloc+0x150>
 80060ca:	4b45      	ldr	r3, [pc, #276]	; (80061e0 <pvPortMalloc+0x188>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d869      	bhi.n	80061a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060d4:	4b43      	ldr	r3, [pc, #268]	; (80061e4 <pvPortMalloc+0x18c>)
 80060d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <pvPortMalloc+0x18c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060de:	e004      	b.n	80060ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <pvPortMalloc+0xa4>
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060fc:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <pvPortMalloc+0x180>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	429a      	cmp	r2, r3
 8006104:	d050      	beq.n	80061a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2208      	movs	r2, #8
 800610c:	4413      	add	r3, r2
 800610e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	2308      	movs	r3, #8
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	429a      	cmp	r2, r3
 8006126:	d91f      	bls.n	8006168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <pvPortMalloc+0xf8>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	613b      	str	r3, [r7, #16]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006162:	69b8      	ldr	r0, [r7, #24]
 8006164:	f000 f908 	bl	8006378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <pvPortMalloc+0x188>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <pvPortMalloc+0x188>)
 8006174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <pvPortMalloc+0x188>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <pvPortMalloc+0x190>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d203      	bcs.n	800618a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <pvPortMalloc+0x188>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <pvPortMalloc+0x190>)
 8006188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <pvPortMalloc+0x184>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	431a      	orrs	r2, r3
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <pvPortMalloc+0x194>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a11      	ldr	r2, [pc, #68]	; (80061ec <pvPortMalloc+0x194>)
 80061a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061a8:	f7fe fd08 	bl	8004bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <pvPortMalloc+0x174>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60fb      	str	r3, [r7, #12]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <pvPortMalloc+0x172>
	return pvReturn;
 80061cc:	69fb      	ldr	r3, [r7, #28]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20004a98 	.word	0x20004a98
 80061dc:	20004aac 	.word	0x20004aac
 80061e0:	20004a9c 	.word	0x20004a9c
 80061e4:	20004a90 	.word	0x20004a90
 80061e8:	20004aa0 	.word	0x20004aa0
 80061ec:	20004aa4 	.word	0x20004aa4

080061f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04d      	beq.n	800629e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006202:	2308      	movs	r3, #8
 8006204:	425b      	negs	r3, r3
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <vPortFree+0xb8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <vPortFree+0x44>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60fb      	str	r3, [r7, #12]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <vPortFree+0x62>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60bb      	str	r3, [r7, #8]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <vPortFree+0xb8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11a      	bne.n	800629e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <vPortFree+0xb8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	43db      	mvns	r3, r3
 8006272:	401a      	ands	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006278:	f7fe fc92 	bl	8004ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <vPortFree+0xbc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4413      	add	r3, r2
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <vPortFree+0xbc>)
 8006288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f000 f874 	bl	8006378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <vPortFree+0xc0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	4a06      	ldr	r2, [pc, #24]	; (80062b0 <vPortFree+0xc0>)
 8006298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800629a:	f7fe fc8f 	bl	8004bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800629e:	bf00      	nop
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20004aac 	.word	0x20004aac
 80062ac:	20004a9c 	.word	0x20004a9c
 80062b0:	20004aa8 	.word	0x20004aa8

080062b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062c0:	4b27      	ldr	r3, [pc, #156]	; (8006360 <prvHeapInit+0xac>)
 80062c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3307      	adds	r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0307 	bic.w	r3, r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <prvHeapInit+0xac>)
 80062e4:	4413      	add	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <prvHeapInit+0xb0>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <prvHeapInit+0xb0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006300:	2208      	movs	r2, #8
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <prvHeapInit+0xb4>)
 8006314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <prvHeapInit+0xb4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <prvHeapInit+0xb4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvHeapInit+0xb4>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvHeapInit+0xb8>)
 8006342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <prvHeapInit+0xbc>)
 800634a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <prvHeapInit+0xc0>)
 800634e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	20000e90 	.word	0x20000e90
 8006364:	20004a90 	.word	0x20004a90
 8006368:	20004a98 	.word	0x20004a98
 800636c:	20004aa0 	.word	0x20004aa0
 8006370:	20004a9c 	.word	0x20004a9c
 8006374:	20004aac 	.word	0x20004aac

08006378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <prvInsertBlockIntoFreeList+0xac>)
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e002      	b.n	800638c <prvInsertBlockIntoFreeList+0x14>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d8f7      	bhi.n	8006386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4413      	add	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d108      	bne.n	80063ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	441a      	add	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d118      	bne.n	8006400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <prvInsertBlockIntoFreeList+0xb0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d00d      	beq.n	80063f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e008      	b.n	8006408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <prvInsertBlockIntoFreeList+0xb0>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e003      	b.n	8006408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d002      	beq.n	8006416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20004a90 	.word	0x20004a90
 8006428:	20004a98 	.word	0x20004a98

0800642c <memset>:
 800642c:	4402      	add	r2, r0
 800642e:	4603      	mov	r3, r0
 8006430:	4293      	cmp	r3, r2
 8006432:	d100      	bne.n	8006436 <memset+0xa>
 8006434:	4770      	bx	lr
 8006436:	f803 1b01 	strb.w	r1, [r3], #1
 800643a:	e7f9      	b.n	8006430 <memset+0x4>

0800643c <__libc_init_array>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4d0d      	ldr	r5, [pc, #52]	; (8006474 <__libc_init_array+0x38>)
 8006440:	4c0d      	ldr	r4, [pc, #52]	; (8006478 <__libc_init_array+0x3c>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	2600      	movs	r6, #0
 8006448:	42a6      	cmp	r6, r4
 800644a:	d109      	bne.n	8006460 <__libc_init_array+0x24>
 800644c:	4d0b      	ldr	r5, [pc, #44]	; (800647c <__libc_init_array+0x40>)
 800644e:	4c0c      	ldr	r4, [pc, #48]	; (8006480 <__libc_init_array+0x44>)
 8006450:	f000 f826 	bl	80064a0 <_init>
 8006454:	1b64      	subs	r4, r4, r5
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	2600      	movs	r6, #0
 800645a:	42a6      	cmp	r6, r4
 800645c:	d105      	bne.n	800646a <__libc_init_array+0x2e>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	f855 3b04 	ldr.w	r3, [r5], #4
 8006464:	4798      	blx	r3
 8006466:	3601      	adds	r6, #1
 8006468:	e7ee      	b.n	8006448 <__libc_init_array+0xc>
 800646a:	f855 3b04 	ldr.w	r3, [r5], #4
 800646e:	4798      	blx	r3
 8006470:	3601      	adds	r6, #1
 8006472:	e7f2      	b.n	800645a <__libc_init_array+0x1e>
 8006474:	0800666c 	.word	0x0800666c
 8006478:	0800666c 	.word	0x0800666c
 800647c:	0800666c 	.word	0x0800666c
 8006480:	08006670 	.word	0x08006670

08006484 <memcpy>:
 8006484:	440a      	add	r2, r1
 8006486:	4291      	cmp	r1, r2
 8006488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800648c:	d100      	bne.n	8006490 <memcpy+0xc>
 800648e:	4770      	bx	lr
 8006490:	b510      	push	{r4, lr}
 8006492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649a:	4291      	cmp	r1, r2
 800649c:	d1f9      	bne.n	8006492 <memcpy+0xe>
 800649e:	bd10      	pop	{r4, pc}

080064a0 <_init>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	bf00      	nop
 80064a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a6:	bc08      	pop	{r3}
 80064a8:	469e      	mov	lr, r3
 80064aa:	4770      	bx	lr

080064ac <_fini>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr
